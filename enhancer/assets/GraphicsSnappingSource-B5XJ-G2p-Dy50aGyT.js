import{ac as _,a2 as h,a1 as v,a3 as S,b6 as w,u as d,Z as b,bK as k,v as a,S as l,aU as E,cT as G,n as C}from"./main-BmakigK2.js";import{g as F}from"./asyncUtils-BPUlNCrX-CbWahY29.js";import{h as A}from"./memoize-DvEt8OkT-Cy_RrfpZ.js";import{i as I}from"./UpdatingHandles-Bd2FQ26N-BEitewmR.js";import{L as P,O as H,Q as R}from"./projectionUtils-B-CplN3q-CMtSsEG5.js";import{G as O}from"./normalizeUtilsSync-DslYq1HB-BEqZoxea.js";import{U as z}from"./featureConversionUtils-Bjjlcfdo-CwHCg7Xw.js";import{F as Z}from"./OptimizedFeature-mIz_HhJg-DK2ED8HT.js";import{M as x}from"./executeQueryForSnapping-BsS9M1AV-HXvimGuM.js";import{I as M}from"./FeatureStore-DfjNNhD_-CobAEPzA.js";import{K as L}from"./QueryEngine-B7NH52mH-ClDA6tGp.js";import{o as T}from"./FieldsIndex-Bt0Y8aWr-DEC3oKuR.js";import{B as W}from"./elevationInfoUtils-Ccn2Wfoe-BxRqAuib.js";import{a as u}from"./utils-Cb2uXNfG-BSSj3Lej.js";import{z as q,ar as N}from"./SketchViewModel-B0qFHK0t-Du_yqWX_.js";import{c as U,u as V}from"./queryEngineUtils-BDP_R2CG-J1jipXgp.js";import{w as y,T as B,A as g}from"./symbologySnappingCandidates-DPxOMBHj-Bz2_76Lh.js";import{r as $}from"./Scheduler-BV4C4cVP-BjerO09l.js";import"./normalizeUtilsCommon-ClagynAA-DTseV17U.js";import"./OptimizedFeatureSet-Dz5hF8Qm-B1brSkRC.js";import"./OptimizedGeometry-pzfNw1AT-BojZ5HZM.js";import"./memoryEstimations-DeWfxwaV-BRViC7kf.js";import"./normalizeUtils-u00NGW3M-BB0tMA56.js";import"./utils-BO8hgPs3-asGX3cNV.js";import"./utils-DpLVEUvg-DWbB2Znv.js";import"./queryUtils-DZy8hWx3-CM-SbWJT.js";import"./json-BI97KiBB-Ce5cWfI2.js";import"./timeSupport-C2LrHIeW-B8bZFGZA.js";import"./BoundsStore-DffHzOYo-hD1QVjIY.js";import"./PooledRBush-DfSXIoUa-BPuD2Wsb.js";import"./quickselect-DHTstthl-Ds_Aj0x5.js";import"./optimizedFeatureQueryEngineAdapter-LiTJLGWN-Ch5peCmY.js";import"./WhereClauseCache-CixYkZwn-DnqQl_Oq.js";import"./LRUCache-DPWdPNTF-Du_Z0yHt.js";import"./MemCache-qDGoejB7-9IozotvY.js";import"./WhereClause-D4rZJkVN-Bxe03OTx.js";import"./TimeOnly-CGkId3bj-CQ3gvfaS.js";import"./enum-g1DWyQyu-BRJQ015_.js";import"./UnknownTimeZone-DxjyzFvs-DTdIRgrF.js";import"./fieldType-PhcL4ff8-C9YELbYx.js";import"./QueryEngineCapabilities-CFs6iCek-Cjdn3gaY.js";import"./quantizationUtils-D907S7Bm-BSQJw3ED.js";import"./utils-s7ypkCzr-uTyBbK38.js";import"./TimeExtent-Cf2Pienb-BrJjtKSZ.js";import"./heatmapUtils-DRTN9U3a-D44fIJ1L.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./vec4f64-DD-nkcCV-CSNWKRqG.js";import"./utils-CdIngiRE-C1J6oOQY.js";import"./mat4f32-BdRMyjXW-CWt6U0BP.js";import"./mat4-OOmHNWi7-Csdy1rLd.js";import"./intl-BAA1onnp-B3bMJo3g.js";import"./timeZoneUtils-d5p0Jda1-C_i0AVe7.js";import"./utils-CKRJGBD_-BVHbU2vG.js";import"./ClassBreaksDefinition-BZ4FJdWb-DuMdskfc.js";import"./SnappingCandidate-DIiHATRz-CuetCfU1.js";import"./FixedIntervalBinParameters-CsFyInBi-CUDeR1Az.js";import"./NormalizationBinParametersMixin-70JA0FRq-BOZfDLSW.js";import"./ElevationInfo-DE5to86a-BFUrcKd8.js";import"./lengthUtils-C61nRlXw-B6iUMzLJ.js";import"./jsonUtils-BwLwuQj7-C2mJEtVm.js";import"./parser-CWccHtwJ-B-G-yuP4.js";import"./cimSymbolUtils-DCedSSCN-CdXlhaKK.js";import"./utils-BfXZnjCE-BS1uLyEA.js";import"./defaultCIMValues-BcSaJjm--58G-soMN.js";import"./enums-a_LDTPYU-CBIcy3mM.js";import"./GraphicsLayer-BiEC2-gS-DyxeXOpu.js";import"./GraphicsCollection-uWAVmks7-Cpj8okuw.js";import"./Layer-DvVVmz9x-D88u0no4.js";import"./BlendLayer-DjW_5k0v-2JtFSo7T.js";import"./layerContainerType-ChWdCT09-G5sdAsSy.js";import"./ScaleRangeLayer-x42fwED3-BHG4p_pT.js";import"./editableLayers-DFUBlMJy-Sp0Kv3fW.js";import"./utils-Dd8gTonD-e73g_-ik.js";import"./Queue-DV3gpSdl-fdZguU7y.js";import"./Version-CnwD6MZa-_YB0fcCj.js";import"./Cyclical-DgD7_U1C-D_RK0WB6.js";import"./quantityUtils-B1Ov7DZK-eQ9cpUQR.js";import"./vec2-BnynUbeJ-CKtGJQAy.js";import"./vec2f64-CkowXrDb-3zFQ3LNH.js";import"./vec32-Cj8pVsU0-DiaCE6ml.js";import"./projectVectorToVector-DcyiGOWJ-SB7w8kEk.js";import"./projectPointToVector-BZJhoF_5-B2sLh5oL.js";import"./geodesicUtils-DKS2UG72-fmXaUkMc.js";import"./Query-n1aoaaFC-0nztKB1O.js";import"./Field-BIQ-quF4-BCGfbiai.js";import"./plane-Cf3Koz3c-3-R5CVk4.js";import"./vectorStacks-5ZZtmT9E-SQ_6y-Hz.js";import"./mat3f64-BnNZDR5l-Bz3OL2oI.js";import"./mat4f64-xsZDPPj0-Dq35B4BL.js";import"./quatf64-C16JxGFv-BKWK1F8U.js";import"./sphere-zPMQWhGG-xSN1n5-v.js";import"./mat3-DOnW3DjW-C3hbW9XY.js";import"./geodeticLengthOperator-DHGBHzf3-D0YKKhMz.js";import"./geodeticCurveType-D_etKnbP-CirnHLSB.js";import"./earcut-C6NeZYSh-Da0ULCQ5.js";import"./triangle-BM89wdHY-BKEsopuW.js";import"./lineSegment-BAWQVP9P-sS008MUD.js";import"./spatialReferenceEllipsoidUtils-BK0OQJn2-DQqodz1u.js";import"./VertexSnappingCandidate-OoGbhLWl-ljTI7Jqa.js";import"./PointSnappingHint-OKXicQ1z-DrAymMun.js";import"./debugFlags-8tOwPnHK-DGGbsW-H.js";const f="graphics-collections";let n=class extends _{get updating(){return this._updatingHandles.updating}get _hasZ(){const t=this.view;return t!=null&&t.type==="3d"&&this.layerSource.layer.type!=="map-notes"}get _snappingElevationAligner(){const{view:t}=this,{layer:e}=this.layerSource,i=t!=null&&t.type==="3d";if(!i||e.type==="map-notes")return y();const o=async(r,s)=>(await E(t.whenLayerView(e),s)).elevationAlignPointsInFeatures(r,s);return y(i,{elevationInfo:e.elevationInfo,alignPointsInFeatures:o})}get _snappingElevationFilter(){const{view:t}=this,e=t!=null&&t.type==="3d"&&this.layerSource.layer.type!=="map-notes";return B(e)}get _symbologySnappingFetcher(){const{view:t}=this,{layer:e}=this.layerSource,i=t!=null&&t.type==="3d",o=this._extrudedPolygonSymbolsCount>0;return i&&e.type!=="map-notes"&&o?g(o,async(r,s)=>{const p=await t.whenLayerView(e);return d(s),p.queryForSymbologySnapping({candidates:r,spatialReference:t.spatialReference},s)}):g()}constructor(t){super(t),this.availability=1,this._sources={multipoint:null,point:null,polygon:null,polyline:null},this._loadedWkids=new Set,this._loadedWkts=new Set,this._pendingAdds=[],this._extrudedPolygonSymbolsCount=0,this._updatingHandles=new I,this._memoizedMakeGetGroundElevation=A(V)}destroy(){for(const t of this._pendingAdds)t.task.abort();this._pendingAdds.length=0,this._mapSources(t=>this._destroySource(t)),this._updatingHandles.destroy()}initialize(){this._updatingHandles.add(()=>this.getGraphicsLayers(),i=>{this._updatingHandles.removeHandles(f);for(const o of i)this._addMany(o.graphics.toArray()),this.addHandles([o.on("graphic-update",r=>this._onGraphicUpdate(r)),this._updatingHandles.addOnCollectionChange(()=>o.graphics,r=>this._onGraphicsChanged(r))],f)},h);const{view:t}=this,{layer:e}=this.layerSource;t!=null&&t.type==="3d"&&e.type!=="map-notes"&&t.elevationProvider&&this.addHandles([t.elevationProvider.on("elevation-change",({context:i})=>{W(i,e.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()}),v(()=>e.elevationInfo,()=>this._snappingElevationAligner.notifyElevationSourceChange(),h),S(()=>e,["edits","apply-edits","graphic-update"],()=>this._symbologySnappingFetcher.notifySymbologyChange())])}async fetchCandidates(t,e){const{point:i,coordinateHelper:{spatialReference:o}}=t,r=await w(this._mapSources(m=>this._fetchCandidatesForSource(m,t,e)));d(e);const s=this._memoizedMakeGetGroundElevation(this.view,o),p=r.flat().map(m=>U(m,s));return q(i,p),p}async _fetchCandidatesForSource(t,e,i){const o=N({parameters:e,mode:this.view?.type??"2d"}),r=await x(t.queryEngine,o,i);d(i);const s=await this._snappingElevationAligner.alignCandidates(r.candidates,e.coordinateHelper.spatialReference,i);d(i);const p=await this._symbologySnappingFetcher.fetch(s,i);d(i);const m=p.length===0?s:[...s,...p];return this._snappingElevationFilter.filter(o,m)}refresh(){}_onGraphicUpdate(t){if(this.getGraphicsLayers().some(e=>e.graphics.includes(t.graphic)))switch(t.property){case"geometry":case"visible":this._remove(t.graphic),this._addMany([t.graphic])}}_onGraphicsChanged(t){for(const e of t.removed)this._remove(e);this._addMany(t.added)}_addMany(t){const e=[],i=new Map;for(const o of t)o.geometry!=null&&(this._needsInitializeProjection(o.geometry.spatialReference)?(e.push(o.geometry.spatialReference),i.set(o.uid,o)):this._add(o));this._createPendingAdd(e,i)}_createPendingAdd(t,e){if(!t.length)return;const i=F(async s=>{await R(t.map(p=>({source:p,dest:this.spatialReference})),{signal:s}),this._markLoadedSpatialReferences(t);for(const p of e.values())this._add(p)});this._updatingHandles.addPromise(i.promise);const o={task:i,graphics:e},r=()=>G(this._pendingAdds,o);i.promise.then(r,r),this._pendingAdds.push(o)}_markLoadedSpatialReferences(t){for(const e of t){e.wkid!=null&&this._loadedWkids.add(e.wkid);const i=e.wkt2||e.wkt;i&&this._loadedWkts.add(i)}}_add(t){if(t.geometry==null||!t.visible)return;let e=t.geometry;if(e.type==="mesh")return;e.type==="extent"&&(e=b.fromExtent(e));const i=this._ensureSource(e.type);if(i==null)return;const o=this._createOptimizedFeature(t.uid,e);o!=null&&(i.featureStore.add(o),u(t.symbol)&&this._extrudedPolygonSymbolsCount++)}_needsInitializeProjection(t){if(t.wkid!=null&&this._loadedWkids.has(t.wkid))return!1;const e=t.wkt2||t.wkt;return(!e||!this._loadedWkts.has(e))&&!P(t,this.spatialReference)}_createOptimizedFeature(t,e){const i=H(O(e),this.spatialReference);if(!i)return null;const o=this._ensureGeometryHasZ(i),r=z(o,this._hasZ,!1);return new Z(r,{[c]:t},null,t)}_ensureGeometryHasZ(t){if(!this._hasZ)return t;const e=o=>{for(;o.length<3;)o.push(0)},i=t.clone();switch(i.hasZ=!0,i.type){case"point":i.z=i.z??0;break;case"multipoint":i.points.forEach(e);break;case"polyline":i.paths.forEach(o=>o.forEach(e));break;case"polygon":i.rings.forEach(o=>o.forEach(e))}return i}_ensureSource(t){const e=this._sources[t];if(e!=null)return e;const i=this._createSource(t);return this._sources[t]=i,i}_createSource(t){const e=k.toJSON(t),i=this._hasZ,o=new M({geometryType:e,hasZ:i,hasM:!1});return{featureStore:o,queryEngine:new L({featureStore:o,fieldsIndex:T.fromLayerJSON({fields:[{name:c,type:"esriFieldTypeOID",alias:c}]}),geometryType:e,hasM:!1,hasZ:i,featureIdInfo:{type:"object-id",fieldName:c},spatialReference:this.spatialReference,priority:$.SNAPPING,scheduler:this.view!=null&&this.view.type==="3d"?this.view.resourceController.scheduler:null}),type:t}}_remove(t){this._mapSources(e=>this._removeFromSource(e,t));for(const e of this._pendingAdds)e.graphics.delete(t.uid),e.graphics.size===0&&e.task.abort()}_removeFromSource(t,e){const i=e.uid;t.featureStore.has(i)&&(t.featureStore.removeById(e.uid),u(e.symbol)&&this._extrudedPolygonSymbolsCount--)}_destroySource(t){t.queryEngine.destroy(),this._sources[t.type]=null}_mapSources(t){const{point:e,polygon:i,polyline:o,multipoint:r}=this._sources,s=[];return e!=null&&s.push(t(e)),i!=null&&s.push(t(i)),o!=null&&s.push(t(o)),r!=null&&s.push(t(r)),s}};a([l()],n.prototype,"getGraphicsLayers",void 0),a([l({constructOnly:!0})],n.prototype,"layerSource",void 0),a([l({constructOnly:!0})],n.prototype,"spatialReference",void 0),a([l({constructOnly:!0})],n.prototype,"view",void 0),a([l({readOnly:!0})],n.prototype,"updating",null),a([l({readOnly:!0})],n.prototype,"availability",void 0),a([l()],n.prototype,"_hasZ",null),a([l()],n.prototype,"_snappingElevationAligner",null),a([l()],n.prototype,"_snappingElevationFilter",null),a([l()],n.prototype,"_symbologySnappingFetcher",null),a([l()],n.prototype,"_extrudedPolygonSymbolsCount",void 0),n=a([C("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],n);const c="OBJECTID";export{n as GraphicsSnappingSource};
