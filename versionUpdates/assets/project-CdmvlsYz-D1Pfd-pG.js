import{v as s,I as i,T as l,t as d,a9 as y,Y as S,$ as n,dG as m,b as g}from"./main-BrXQBr3M.js";import{y as R,c as w}from"./utils-DuaeuwP5-t1uDCGxn.js";import{f as F}from"./utils-Jw-4AGsF-DGUB3bF1.js";let e=class extends S{constructor(o){super(o),this.geometries=[],this.outSpatialReference=null,this.transformation=null,this.transformForward=null}toJSON(){const o=this.geometries.map(a=>a.toJSON()),t=this.geometries[0],r={};return r.outSR=n(this.outSpatialReference),r.inSR=n(t.spatialReference),r.geometries=JSON.stringify({geometryType:m(t),geometries:o}),this.transformation&&(r.transformation=this.transformation.wkid||JSON.stringify(this.transformation)),this.transformForward!=null&&(r.transformForward=this.transformForward),r}};s([i()],e.prototype,"geometries",void 0),s([i({type:l,json:{read:{source:"outSR"}}})],e.prototype,"outSpatialReference",void 0),s([i()],e.prototype,"transformation",void 0),s([i()],e.prototype,"transformForward",void 0),e=s([d("esri.rest.support.ProjectParameters")],e);const j=e,v=y(j);async function $(o,t,r){t=v(t);const a=R(o),p={...a.query,f:"json",...t.toJSON()},f=t.outSpatialReference,u=m(t.geometries[0]),c=w(p,r);return g(a.path+"/project",c).then(({data:{geometries:h}})=>F(h,u,f))}export{$ as F,j as p};
