import{W as y,c as o}from"./main-BrXQBr3M.js";import{R as h}from"./HeightModelInfo-BkDck4B0-DuW1KdQ_.js";function R(e,a,l){const i=M(e),s=a,u=w(i,s,l);if(i){const n=h.deriveUnitFromSR(i,e.spatialReference).heightUnit;if(!l&&n!==i.heightUnit){const r=new o("layerview:unmatched-height-unit",`The vertical units of the layer must match the horizontal units (${n})`,{horizontalUnit:n});return new o("layerview:unsupported-height-model-info","The vertical coordinate system of the layer is not supported",{heightModelInfo:i,error:r})}}if(!v(e)||u===t.Unsupported)return new o("layerview:unsupported-height-model-info","The vertical coordinate system of the layer is not supported",{heightModelInfo:i});switch(u){case t.Units:{const n=i?.heightUnit||"unknown",r=s?.heightUnit||"unknown",c=new o("layerview:incompatible-height-unit",`The vertical units of the layer (${n}) must match the vertical units of the scene (${r})`,{layerUnit:n,sceneUnit:r});return new o("layerview:incompatible-height-model-info","The vertical coordinate system of the layer is incompatible with the scene",{layerHeightModelInfo:i,sceneHeightModelInfo:s,error:c})}case t.HeightModel:{const n=i?.heightModel||"unknown",r=s?.heightModel||"unknown",c=new o("layerview:incompatible-height-model",`The height model of the layer (${n}) must match the height model of the scene (${r})`,{layerHeightModel:n,sceneHeightModel:r});return new o("layerview:incompatible-height-model-info","The vertical coordinate system of the layer is incompatible with the scene",{layerHeightModelInfo:i,sceneHeightModelInfo:s,error:c})}case t.CRS:{const n=i?.vertCRS||"unknown",r=s?.vertCRS||"unknown",c=new o("layerview:incompatible-vertical-datum",`The vertical datum of the layer (${n}) must match the vertical datum of the scene (${r})`,{layerDatum:n,sceneDatum:r});return new o("layerview:incompatible-height-model-info","The vertical coordinate system of the layer is incompatible with the scene",{layerHeightModelInfo:i,sceneHeightModelInfo:s,error:c})}}return null}function w(e,a,l){if(!d(e)||!d(a))return t.Unsupported;if(e==null||a==null)return t.Ok;if(!l&&e.heightUnit!==a.heightUnit)return t.Units;if(e.heightModel!==a.heightModel)return t.HeightModel;switch(e.heightModel){case"gravity-related-height":return t.Ok;case"ellipsoidal":return e.vertCRS===a.vertCRS?t.Ok:t.CRS;default:return t.Unsupported}}var t;function d(e){return e==null||e.heightModel!=null&&e.heightUnit!=null}function v(e){return"heightModelInfo"in e&&e.heightModelInfo!=null||e.spatialReference!=null||!p(e)}function M(e){if(e.type==="integrated-mesh-3dtiles")return null;const a=e.url?y(e.url):void 0;return!(e.spatialReference?.vcsWkid==null&&a!=null&&a.serverType==="ImageServer")&&g(e)&&e.heightModelInfo?e.heightModelInfo:p(e)?h.deriveUnitFromSR(b,e.spatialReference):null}function g(e){return"heightModelInfo"in e}function f(e){if(e.type==="unknown"||!("capabilities"in e))return!1;switch(e.type){case"catalog":case"catalog-footprint":case"csv":case"feature":case"geojson":case"subtype-group":case"ogc-feature":case"oriented-imagery":case"wfs":case"knowledge-graph-sublayer":return!0;default:return!1}}function p(e){return f(e)?!!(e.capabilities&&e.capabilities.data&&e.capabilities.data.supportsZ):m(e)}function I(e){return e.layers!=null||m(e)||f(e)||g(e)}function m(e){switch(e.type){case"building-scene":case"elevation":case"integrated-mesh":case"integrated-mesh-3dtiles":case"point-cloud":case"scene":case"voxel":return!0;case"base-dynamic":case"base-elevation":case"base-tile":case"bing-maps":case"catalog":case"catalog-footprint":case"catalog-dynamic-group":case"csv":case"dimension":case"geojson":case"feature":case"subtype-group":case"geo-rss":case"graphics":case"group":case"imagery":case"imagery-tile":case"kml":case"knowledge-graph":case"link-chart":case"knowledge-graph-sublayer":case"line-of-sight":case"map-image":case"map-notes":case"media":case"ogc-feature":case"open-street-map":case"oriented-imagery":case"parquet":case"route":case"stream":case"tile":case"unknown":case"unsupported":case"vector-tile":case"video":case"viewshed":case"wcs":case"web-tile":case"wfs":case"wms":case"wmts":case null:return!1}return!1}(function(e){e[e.Ok=0]="Ok",e[e.Units=1]="Units",e[e.HeightModel=2]="HeightModel",e[e.CRS=3]="CRS",e[e.Unsupported=4]="Unsupported"})(t||(t={}));const b=new h({heightModel:"gravity-related-height"});export{I as U,M as g,R as v};
