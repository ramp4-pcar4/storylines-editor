import{r as L}from"./common-CYWrYyJl-E8-sukrT.js";import{R as V,E as X,D as Z,H as J,G as Y}from"./mat3-DOnW3DjW-C3hbW9XY.js";import{e as tt,E as et,m as ot}from"./MapView-BcnxJC0k-BVBloQKt.js";import{e as st}from"./vec2f32-CVhmN3Me-DxoqVD7C.js";import{t as rt}from"./vec3f32-BS0cezmI-B_madU1n.js";import{u as it}from"./normalizeUtils-b-vZURob-Cu-Bjt2-.js";import{v as i,kr as G,cg as at,aC as nt}from"./main-BrXQBr3M.js";import{D as pt}from"./WGLContainer-CF3AeUnM-Cf87U66s.js";import{P as dt}from"./FeatureCommandQueue-CqM9cs0l-_pPAXlqZ.js";import{e as B}from"./utils-DA6J6wjA-DDjZAYSk.js";import{d as K,l as n,E as ht,P as x,g as k,F as ct,a as O,h as lt,e as ut,R as ft,K as mt,S as vt,c as yt,s as Q,p as gt,a1 as xt,a6 as wt}from"./GraphShaderModule-C7Apfssb-T5TyQXiZ.js";import{i as _t}from"./TechniqueType-GommNIdJ-ByYTgVOB.js";import{L as Mt,D,I as U,T as St}from"./enums-DBi1-Mm2-CUS1pvQe.js";import{n as W}from"./VertexElementDescriptor-BAy1DPb3-BOhpDZGx.js";class $ extends ht{}i([K(0,x)],$.prototype,"pos",void 0),i([K(1,x)],$.prototype,"uv",void 0);class Et extends wt{}class q extends k{}i([n(ct)],q.prototype,"dvs",void 0);class v extends k{}i([n(x)],v.prototype,"perspective",void 0),i([n(x)],v.prototype,"texSize",void 0),i([n(O)],v.prototype,"wrapAroundShift",void 0),i([n(O)],v.prototype,"opacity",void 0),i([n(lt)],v.prototype,"texture",void 0);class g extends ut{constructor(){super(...arguments),this.type="OverlayShader"}vertex(e){const t=e.uv.divide(this.config.texSize),o=new O(1).add(ft(t,this.config.perspective)),s=new mt(e.pos.add(new x(this.config.wrapAroundShift,0)),1),r=this.transform.dvs.multiply(s);return{uv:t,glPosition:new vt(r.xy.multiply(o),0,o)}}fragment(e){const t=yt(this.config.texture,e.uv).multiply(this.config.opacity),o=new xt;return o.fragColor=t,o}}i([n(q)],g.prototype,"transform",void 0),i([n(v)],g.prototype,"config",void 0),i([G(0,Q($))],g.prototype,"vertex",null),i([G(0,Q(Et))],g.prototype,"fragment",null);class bt extends gt{constructor(){super(...arguments),this.type=_t.Overlay,this._mesh=null,this.shaders={overlay:new g}}render(e,t){const{context:o,painter:s}=e,r=this._getMesh(e,t);s.setPipelineState(B);const{isWrapAround:p,wrapAroundShift:l}=t.config,u={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:u},defines:null,optionalAttributes:null,useComputeBuffer:!1};s.setPipelineState({...B,stencil:{write:!1,test:{compare:Mt.EQUAL,op:{fail:D.KEEP,zFail:D.KEEP,zPass:D.REPLACE},ref:0,mask:255}}}),s.submitDrawMeshUntyped(o,f,r),p&&(u.wrapAroundShift=l,s.submitDrawMeshUntyped(o,f,r))}shutdown(){nt(this._mesh)}_getMesh(e,t){const{context:o}=e;if(this._mesh){const s=this._mesh.vertexBuffers.get("positions");if(!s)throw new Error("Buffer not found");s.buffer.setData(t.position)}else{const s=t.index!=null?t.index.length:t.position.length/2;this._mesh=new dt(o,{vertex:{positions:{data:t.position,attributes:[new W("pos",2,U.FLOAT,0,8)]},uvs:{data:t.tex,attributes:[new W("uv",2,U.UNSIGNED_SHORT,0,4)]}},index:t.index!=null?{index:{data:t.index}}:void 0,groups:[{index:t.index!=null?"index":void 0,primitive:St.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:s}]})}return this._mesh}}class Qt extends pt{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=tt(),this._overlayTechnique=new bt}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==et.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const o of this.children)o.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:o,size:s,pixelRatio:r,resolution:p,rotation:l,viewpoint:u,displayMat3:f}=t;if(this._viewStateId===o)return;const w=L(l),d=r*s[0],m=r*s[1];this._localOrigin=u.targetGeometry.clone();const{x:y,y:S}=this._localOrigin,_=it(y,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=S;const E=p*d,b=p*m,a=V(this._dvsMat3);X(a,a,f),Z(a,a,st(d/2,m/2)),J(a,a,rt(d/E,-m/b,1)),Y(a,a,-w),this._viewStateId=o}_updateOverlays(e,t){const{state:o}=e,{rotation:s,spatialReference:r,worldScreenWidth:p,size:l,viewpoint:u}=o,f=this._localOrigin;let w,d=0;const m=at(r);if(m&&r.isWrappable){const y=l[0],S=l[1],_=L(s),E=Math.abs(Math.cos(_)),b=Math.abs(Math.sin(_)),a=Math.round(y*E+S*b),[T,z]=m.valid,h=ot(r),{x:I,y:F}=u.targetGeometry,N=[I,F],A=[0,0];o.toScreen(A,N);const M=[0,0];let P;P=a>p?.5*p:.5*a;const C=Math.floor((I+.5*h)/h),H=T+C*h,j=z+C*h,R=[A[0]+P,0];o.toMap(M,R),M[0]>j&&(d=h),R[0]=A[0]-P,o.toMap(M,R),M[0]<H&&(d=-h),w={worldWidth:h,xBounds:[T,z]}}for(const y of t)y.updateDrawCoords(f,d,r,w)}}export{Qt as E};
