import{iB as O,at as U,l as q,cz as A,bT as G,ar as R,f8 as Y,h as C}from"./main-166dfadA.js";import{h as v}from"./TimeExtent-Cf2Pienb-lZIPdeTr.js";import{N as B}from"./quantizationUtils-D907S7Bm-5mFbGUGa.js";import{M as D,b as S}from"./heatmapUtils-DRTN9U3a-Wi0Oi8bp.js";import{M as V}from"./utils-CdIngiRE-PKgIMjLf.js";import{a as z,b as Z}from"./utils-CKRJGBD_-D-_GqvW-.js";let c=null;const j=/^(?<hh>([0-1][0-9])|([2][0-3])):(?<mm>[0-5][0-9])(:(?<ss>[0-5][0-9]))?([.](?<ms>\d+))?$/;function K(t,e,n){return t.x<0?t.x+=e:t.x>n&&(t.x-=e),t}function te(t,e,n,i){const r=O(n)?U(n):null,s=r?Math.round((r.valid[1]-r.valid[0])/e.scale[0]):null;return t.map(a=>{const l=new q(a.geometry);return B(e,l,l),a.geometry=r?K(l,s??0,i[0]):l,a})}function ne(t,e=18,n,i,r){const s=new Float64Array(i*r);e=Math.round(Y(e));let a=Number.POSITIVE_INFINITY,l=Number.NEGATIVE_INFINITY;const N=S(n);for(const{geometry:p,attributes:F}of t){const{x:g,y:f}=p,b=Math.max(0,g-e),M=Math.max(0,f-e),T=Math.min(r,f+e),w=Math.min(i,g+e),h=+N(F);for(let m=M;m<T;m++)for(let d=b;d<w;d++){const x=m*i+d,I=D(d-g,m-f,e)*h,u=s[x]+=I;a=Math.min(a,u),l=Math.max(l,u)}}return{min:a,max:l}}function L(t){const e=j.exec(t);if(!e)return null;const{hh:n,mm:i,ss:r,ms:s}=e.groups;return Number(n)*v.hours+Number(i)*v.minutes+Number(r)*v.seconds+Number(s||0)}async function ie(t,e,n=!0){if(!e)return[];const{field:i,field2:r,field3:s,fieldDelimiter:a,fieldInfos:l,timeZone:N}=t,p=i&&l?.find(u=>u.name.toLowerCase()===i.toLowerCase()),F=!!p&&A(p),g=!!p&&V(p),f=t.valueExpression,b=t.normalizationType,M=t.normalizationField,T=t.normalizationTotal,w=[],h=t.viewInfoParams;let m=null,d=null;if(f){if(!c){const{arcadeUtils:u}=await G();c=u}c.hasGeometryOperations(f)&&await c.enableGeometryOperations(),m=c.createFunction(f),d=h?c.getViewInfo({viewingMode:h.viewingMode,scale:h.scale,spatialReference:new R(h.spatialReference)}):null}const x=t.fieldInfos,I=!(e[0]&&"declaredClass"in e[0]&&e[0].declaredClass==="esri.Graphic")&&x?{fields:x}:null;return e.forEach(u=>{const y=u.attributes;let o;if(f){const $=I?{...u,layer:I}:u,E=c.createExecContext($,d,N);o=c.executeFunction(m,E)}else y&&(o=y[i],r?(o=`${z(o)}${a}${z(y[r])}`,s&&(o=`${o}${a}${z(y[s])}`)):typeof o=="string"&&n&&(g?o=o?new Date(o).getTime():null:F&&(o=o?L(o):null)));if(b&&typeof o=="number"&&isFinite(o)){const $=y&&parseFloat(y[M]);o=Z(o,b,$,T)}w.push(o)}),w}function re(t){const e=t.field,n=t.normalizationType,i=t.normalizationField;let r;return n==="field"?r="(NOT "+i+" = 0)":n!=="log"&&n!=="natural-log"&&n!=="square-root"||(r=`(${e} > 0)`),r}function oe(t,e,n){const i=e!=null?t+" >= "+e:"",r=n!=null?t+" <= "+n:"";let s="";return s=i&&r?P(i,r):i||r,s?"("+s+")":""}function P(t,e){let n=t??"";return e!=null&&e&&(n=n?"("+n+") AND ("+e+")":e),n}function se(t,e){if(t&&t.spatialRelationship!=="intersects")return new C(e,"Only 'intersects' spatialRelationship is supported for featureFilter")}function ae(t,e,n){const i=Q({layer:t,fields:e});if(i.length)return new C(n,"Unknown fields: "+i.join(", ")+". You can only use fields defined in the layer schema");const r=X({layer:t,fields:e});return r.length?new C(n,"Unsupported fields: "+r.join(", ")+". You can only use fields that can be fetched i.e. AdapterFieldUsageInfo.supportsStatistics must be true"):void 0}function Q(t){const e=t.layer;return t.fields.filter(n=>!e.getField(n))}function X(t){const e=t.layer;return t.fields.filter(n=>{const i=e.getFieldUsageInfo(n);return!i||!i.supportsStatistics})}export{P as C,ie as H,te as J,re as K,oe as Q,se as W,ae as X,ne as Z,L as z};
