import{ar as E,ba as S,o as d,D as l,a6 as D}from"./main-166dfadA.js";import h from"./Mesh-Do_GurVZ-DeajMRjw.js";import{g,v as N}from"./External-DqjNpFcZ-BWVuo46Y.js";import{b as M}from"./infoFor3D-BeWnZejW-DJyBSoCy.js";import{c as v}from"./FeatureSet-BVGGhhH9-BqZkPUun.js";import{s as F,e as T}from"./meshFeatureAttributes-BKpzm8ZZ-BYGQFkMu.js";import"./axisAngleDegrees-BTSCyz4U-ByRvjlXZ.js";import"./mat4-OOmHNWi7-BuqdpAWY.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./quat-DQgq9Ar5-B0jsAZLM.js";import"./mat3f64-BnNZDR5l-Bz3OL2oI.js";import"./quatf64-C16JxGFv-BKWK1F8U.js";import"./vec32-Cj8pVsU0-Ctf7DHQR.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./MeshComponent-D5ytf0sY-CQUCXFzz.js";import"./imageUtils-D3tfFRL_-9SiokMT7.js";import"./meshProperties-D3dLIiIV-CfHVFTP-.js";import"./MeshLocalVertexSpace-Cfxtmv6L-D7fdrBnw.js";import"./MeshTransform-ByFk-Izc-CTkX_5Cb.js";import"./mat4f64-xsZDPPj0-Dq35B4BL.js";import"./MeshVertexAttributes-V5I0YcSf-CU0gBk2N.js";import"./meshVertexSpaceUtils-CCr86FVF-DbQB_xkB.js";import"./triangulationUtils--8_1p-hL-z-6ioKCd.js";import"./earcut-C6NeZYSh-Da0ULCQ5.js";import"./Indices-BuIC5D20-BA-R-k7q.js";import"./plane-Cf3Koz3c-DndwFo37.js";import"./vectorStacks-5ZZtmT9E-CWQey70M.js";import"./vec2f64-CkowXrDb-3zFQ3LNH.js";import"./vec4f64-DD-nkcCV-CSNWKRqG.js";import"./deduplicate-DRKoZSEv-D9BCeh8y.js";import"./projectPointToVector-BZJhoF_5-BvK8uO_b.js";import"./projectionUtils-B-CplN3q-DW7g1ptQ.js";import"./vertexSpaceConversion-DrPwe-Ch-DX8NQ1Of.js";import"./mat3-DOnW3DjW-C3hbW9XY.js";import"./spatialReferenceEllipsoidUtils-BK0OQJn2-GGWjOczs.js";import"./computeTranslationToOriginAndRotation-e-ft1lOz-C4YXncK1.js";import"./vec3-lTcIGC_C-CLezJiKq.js";import"./BufferView-wDxx79o3-JO2d20CA.js";import"./vec2-BnynUbeJ-CKtGJQAy.js";import"./vec4-FWCYsiir-IKnYxf9b.js";import"./Field-BIQ-quF4-_aOBtzg2.js";import"./fieldType-PhcL4ff8-B53C9lP5.js";const b=()=>D.getLogger("esri.rest.support.meshFeatureSet");function gt(t,o,r){const e=r.features;r.features=[],delete r.geometryType;const s=v.fromJSON(r);if(s.geometryType="mesh",!r.assetMaps)return s;const n=O(o,r.assetMaps),a=t.sourceSpatialReference??E.WGS84,u=r.globalIdFieldName,{outFields:i}=t,c=i!=null&&i.length>0?I(i.includes("*")?null:new Set(i)):()=>({});for(const m of e){const p=L(m,u,a,o,n);s.features.push(new S({geometry:p,attributes:c(m)}))}return s}function I(t){return({attributes:o})=>{if(!o)return{};if(!t)return o;for(const r in o)t.has(r)||delete o[r];return o}}function L(t,o,r,e,s){const n=t.attributes[o],a=s.get(n);if(a==null||!t.geometry)return null;const u=F(t.attributes,r,e.transformFieldRoles),i=d.fromJSON(t.geometry);i.spatialReference=r;const c=T(t.attributes,e.transformFieldRoles),m=r.isGeographic?"local":"georeferenced",p=w(a);return p?h.createWithExternalSource(u,p,{extent:i,transform:c,vertexSpace:m,unitConversionDisabled:!0}):h.createIncomplete(u,{extent:i,transform:c,vertexSpace:m})}var f;function O(t,o){const r=new Map;for(const e of o){const s=e.parentGlobalId;if(s==null)continue;const n=e.assetName,a=e.assetType,u=e.assetHash,i=e.assetURL,c=e.conversionStatus,m=e.seqNo,p=M(a,t.supportedFormats);if(!p){b().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${a}, but it does not list it as a supported type`);continue}const y=l(r,s,()=>({files:new Map}));l(y.files,n,()=>({name:n,type:a,mimeType:p,status:P(c),parts:[]})).parts[m]={hash:u,url:i}}return r}function w(t){const o=Array.from(t.files.values()),r=new Array;for(const e of o){if(e.status!==f.COMPLETED)return null;const s=new Array;for(const n of e.parts){if(!n)return null;s.push(new g(n.url,n.hash))}r.push(new N(e.name,e.mimeType,s))}return{type:"service",assets:r}}function P(t){switch(t){case"COMPLETED":case"SUBMITTED":return f.COMPLETED;case"INPROGRESS":return f.PENDING;default:return f.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(f||(f={}));export{O as assetMapFromAssetMapsJSON,L as extractMesh,gt as meshFeatureSetFromJSON};
