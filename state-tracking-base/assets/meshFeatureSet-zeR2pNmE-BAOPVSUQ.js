import{J as S,bi as d,n as y,an as l,a1 as F}from"./main-D9vZy-Ej.js";import{F as h}from"./Mesh-DLzjDUIO-TtB9fnzu.js";import{v as N,i as g}from"./External-D_wl4XAw-DRQZrOo_.js";import{b as D}from"./infoFor3D-DIuYZyyK-BtH19JJ7.js";import{O as M}from"./FeatureSet-BkVNthuN-C3QU_F4-.js";import{s as O,e as T}from"./meshFeatureAttributes-BwKR5odo-D3jX0hO_.js";import"./MeshTransform-C--IG09w-BFp2Jdlu.js";import"./mat4-DX7gBViE-BdB9q0YZ.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./mat4f64-Dn1WEGBx-C99QVUMW.js";import"./quat-BODLR7mS-njd4YH98.js";import"./mat3f64-Dh9_zhFu-BIT-k8Dm.js";import"./quatf64-C16JxGFv-BKWK1F8U.js";import"./vec32-D9GsKZ1t-BdvFfv7u.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./imageUtils-BA2D6Uf1-DNCSWuEl.js";import"./MeshVertexAttributes-CbNpPur2-Cdce7OlQ.js";import"./MeshLocalVertexSpace-BqgocsoS-4xkR2-_3.js";import"./meshVertexSpaceUtils-B4l_Zo0M-LYKBk-ys.js";import"./earcut-XDcq3zAf-BcwyrT7l.js";import"./Indices-DEr2HrWx-CnexNAAQ.js";import"./plane-Dt8R0KeE-C-6P8AxP.js";import"./vec2f64-CeODonrJ-CkkJCdRC.js";import"./vec4f64-hf2nxvhQ-CaAr8PTM.js";import"./deduplicate-D2d-E5Pw-CTsIlJT-.js";import"./projectPointToVector-B2UUY9SE-B6Zdb_cO.js";import"./projection-BA9M1R7d-CKaS9mLZ.js";import"./projectBuffer-CvCBvJ6W-DLxXZbWh.js";import"./vertexSpaceConversion-CiKaVq_u-CiwnXvHv.js";import"./mat3-CC4Foazl-BWjyqE2v.js";import"./spatialReferenceEllipsoidUtils-DUrKTvup-B-hxRot_.js";import"./computeTranslationToOriginAndRotation-wF0y9WQG-DsXuTp0_.js";import"./vec3-BazNroeq-Dy1_nBSg.js";import"./BufferView-PQoE3GL7-Cm7ZFo_B.js";import"./vec2-tHZ6OaOy-xCj1obDt.js";import"./vec4-DWDdg1fj-DFBs_6eN.js";import"./Field-C6hA1tZj-CoJCNQaq.js";import"./fieldType-CD2CL2hr-CkQ42Pnt.js";const L=()=>F.getLogger("esri.rest.support.meshFeatureSet");function St(t,o,r){const e=r.features;r.features=[],delete r.geometryType;const s=M.fromJSON(r);if(s.geometryType="mesh",!r.assetMaps)return s;const n=I(o,r.assetMaps),a=t.sourceSpatialReference??S.WGS84,u=r.globalIdFieldName,{outFields:i}=t,f=i!=null&&i.length>0?b(i.includes("*")?null:new Set(i)):()=>({});for(const m of e){const p=w(m,u,a,o,n);s.features.push(new d({geometry:p,attributes:f(m)}))}return s}function b(t){return({attributes:o})=>{if(!o)return{};if(!t)return o;for(const r in o)t.has(r)||delete o[r];return o}}function w(t,o,r,e,s){const n=t.attributes[o],a=s.get(n);if(a==null||!t.geometry)return null;const u=O(t.attributes,r,e.transformFieldRoles),i=y.fromJSON(t.geometry);i.spatialReference=r;const f=T(t.attributes,e.transformFieldRoles),m=r.isGeographic?"local":"georeferenced",p=v(a);return p?h.createWithExternalSource(u,p,{extent:i,transform:f,vertexSpace:m,unitConversionDisabled:!0}):h.createIncomplete(u,{extent:i,transform:f,vertexSpace:m})}var c;function I(t,o){const r=new Map;for(const e of o){const s=e.parentGlobalId;if(s==null)continue;const n=e.assetName,a=e.assetType,u=e.assetHash,i=e.assetURL,f=e.conversionStatus,m=e.seqNo,p=D(a,t.supportedFormats);if(!p){L().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${a}, but it does not list it as a supported type`);continue}const E=l(r,s,()=>({files:new Map}));l(E.files,n,()=>({name:n,type:a,mimeType:p,status:P(f),parts:[]})).parts[m]={hash:u,url:i}}return r}function v(t){const o=Array.from(t.files.values()),r=new Array;for(const e of o){if(e.status!==c.COMPLETED)return null;const s=new Array;for(const n of e.parts){if(!n)return null;s.push(new N(n.url,n.hash))}r.push(new g(e.name,e.mimeType,s))}return r}function P(t){switch(t){case"COMPLETED":case"SUBMITTED":return c.COMPLETED;case"INPROGRESS":return c.PENDING;default:return c.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(c||(c={}));export{I as assetMapFromAssetMapsJSON,w as extractMesh,St as meshFeatureSetFromJSON};
