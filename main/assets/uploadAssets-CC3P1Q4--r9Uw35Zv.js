import{c as m,bc as Z,a5 as M,H as p,b as f,ag as w,T as ee,da as se,ah as te,as as oe,dy as D,dm as j,G as re,kO as ne,a8 as ae,dz as O,X as ie}from"./main-D7vwjMDX.js";import{a as ce}from"./uuid-Dj9mdEVg-BaKSCiyT.js";import{T as pe,B as le,i as k,v as I,O as ue}from"./External-BcEXC8Ad-Bk_BapEu.js";import{i as me,n as de,s as fe,x as ge,b as he}from"./FeatureType-MZ846Ius-CR_p-Fe2.js";import{w as we}from"./MeshTransform-CvTryVbE-nHk0oPqj.js";import{e as ye,s as be}from"./meshFeatureAttributes-72y3WnNN-DW_gTpt0.js";import"./labelingInfo-D9WqyhOx-D_hhjBwk.js";import"./Field-Cj6Pz3TI-CQAvI3hR.js";import"./fieldType-VTpxE-EM-B2R_XePP.js";import"./Query-CxQYWcUQ-K9TJdLqp.js";import"./TimeExtent-gZaEUVeW-B8lK7hOc.js";import"./SimpleRenderer-ADQlYl8U-CKsUmlGq.js";import"./commonProperties-BLIn8DYU-BTX5skpN.js";import"./colorRamps-KMmVdCPJ-Q_tnbhPZ.js";import"./ColorStop-DoHCvOqO-fZATK5b5.js";import"./visualVariableUtils-BO-_wo28-C9xWppdB.js";import"./lengthUtils-wU9RRIqK-Dn-cOZRL.js";import"./UniqueValueRenderer-BmoLL_Ee-BrXow9so.js";import"./diffUtils-BSe9IE26-SHg3xJhl.js";import"./RendererLegendOptions-f5mIImtQ-CcW-1Fo3.js";import"./styleUtils-DxAOZq5S-B5tpz6qE.js";import"./RelationshipQuery-BgG1nLP1-B-OFihYZ.js";import"./NormalizationBinParametersMixin-ZkplD1Sk-ChHLP-pU.js";import"./labelUtils-Dd5sr1UJ-Dw6ial7G.js";import"./mat4-BFStKTjU-WrlKAspo.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./mat4f64-BaJwL7tQ-k0uMm8LY.js";import"./quat-D8L_R4I0-BhK2bIY8.js";import"./mat3f64-Dh9_zhFu-BIT-k8Dm.js";import"./quatf64-C16JxGFv-BKWK1F8U.js";import"./vec32-BuqRmYBM-ClpcRCNx.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./axisAngleDegrees-nTnQhoaG-kPlPAa9I.js";const y="upload-assets",b=()=>new Error;class Pe extends m{constructor(){super(`${y}:unsupported`,"Layer does not support asset uploads.",b())}}let Te=class extends m{constructor(){super(`${y}:no-glb-support`,"Layer does not support glb.",b())}},ve=class extends m{constructor(){super(`${y}:no-supported-source`,"No supported external source found",b())}};class xe extends m{constructor(){super(`${y}:not-base-64`,"Expected gltf data in base64 format after conversion.",b())}}let Ae=class extends m{constructor(){super(`${y}:unable-to-prepare-options`,"Unable to prepare uploadAsset request options.",b())}},Me=class extends m{constructor(e,s){super(`${y}:bad-response`,`Bad response. Uploaded ${e} items and received ${s} results.`,b())}};class je extends m{constructor(s,t){super(`${y}-layer:upload-failed`,`Failed to upload mesh file ${s}. Error code: ${t?.code??"-1"}. Error message: ${t?.messages??"unknown"}`,b())}}let R=class extends m{constructor(e){super(`${y}-layer:unsupported-format`,`The service allowed us to upload an asset of FormatID ${e}, but it does not list it in its supported formats.`,b())}},Fe=class extends m{constructor(){super(`${y}:convert3D-failed`,"convert3D failed.")}},qs=class extends m{constructor(){super("invalid-input:no-model","No supported model found")}},Ls=class extends m{constructor(){super("invalid-input:multiple-models","Multiple supported models found")}};function Se(e){const s=1/Z(e,1);return s!==1?new we({scale:[s,s,s]}):void 0}const F={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function P(e,s=o=>{},t){return new Ee(e,s,t)}let Ee=class{constructor(e,s=o=>{},t){if(this.onProgress=s,this.taskName=t,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,typeof e=="number"){this._weights={};for(let o=0;o<e;o++){const r=o,n=1/e;this._weights[r]=n,this._progressMap.set(r,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(const[s,t]of this._progressMap.entries())e+=t*this._weights[s];if(e===1&&M("enable-feature:esri-3dofl-upload-timings")){const s=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${s} sec`);for(const[t,o]of this._timingsMap){const r=Math.round(o.end-o.start)/1e3,n=Math.round(r/s*100);console.log(this.taskName??"Task",{stepKey:t,stepTime:r,relativeTime:n})}}this.onProgress(e)}setProgress(e,s){if(this._progressMap.set(e,s),M("enable-feature:esri-3dofl-upload-timings")){const t=performance.now();this._startTime??=t;const o=te(this._timingsMap,e,()=>({start:t,end:0}));s===1&&(o.end=t)}this.emitProgress()}simulate(e,s){return B(t=>this.setProgress(e,t),s)}makeOnProgress(e){return s=>this.setProgress(e,s)}};function B(e=t=>{},s=ke){const t=performance.now();e(0);const o=setInterval(()=>{const r=performance.now()-t,n=1-Math.exp(-r/s);e(n)},Oe);return oe(()=>{clearInterval(o),e(1)})}function Ne(e,s=$e){return D(O(e*C/s))}function _e(e,s=De){return D(O(e*C/s))}const $e=10,De=10,C=8e-6,Oe=j(50),ke=j(1e3),U=1e6,$=20*U,Ie=2e9,Re=3;async function Be({data:e,name:s,description:t},o,r){let n=null;try{const a=w(o,"uploads"),i=w(a,"info"),{data:l}=await f(i,{query:{f:"json"},responseType:"json"});p(r);const g=ie(o),h=l.maxUploadFileSize*U,d=g?Ie:h,c=g?Math.min($,h):$;if(e.size>d)throw new Error("Data too large");const G=w(a,"register"),{data:S}=await f(G,{query:{f:"json",itemName:Ce(s),description:t},responseType:"json",method:"post"});if(p(r),!S.success)throw new Error("Registration failed");const{itemID:W}=S.item;n=w(a,W);const J=w(n,"uploadPart"),E=Math.ceil(e.size/c),T=new Array;for(let u=0;u<E;++u)T.push(e.slice(u*c,Math.min((u+1)*c,e.size)));const v=T.slice().reverse(),N=new Array,K=P(E,r?.onProgress,"uploadItem"),X=async()=>{for(;v.length!==0;){const u=T.length-v.length,x=v.pop(),A=new FormData,V=K.simulate(u,Ne(x.size));try{A.append("f","json"),A.append("file",x),A.append("partId",`${u}`);const{data:Y}=await f(J,{timeout:0,body:A,responseType:"json",method:"post"});if(p(r),!Y.success)throw new Error("Part upload failed")}finally{V.remove()}}};for(let u=0;u<Re&&v.length!==0;++u)N.push(X());await Promise.all(N);const Q=w(n,"commit"),{data:_}=await f(Q,{query:{f:"json",parts:T.map((u,x)=>x).join(",")},responseType:"json",method:"post"});if(p(r),!_.success)throw new Error("Commit failed");return _.item}catch(a){if(n!=null){const i=w(n,"delete");await f(i,{query:{f:"json"},responseType:"json",method:"post"})}throw a}}function Ce(e){return e.replaceAll("/","_").replaceAll("\\","_")}async function Ue(e,s,t){const o=e.length;if(!o)return t?.onProgress?.(1),[];const r=P(o,t?.onProgress,"uploadAssets");return Promise.all(e.map((n,a)=>qe(n,s,{...t,onProgress:r.makeOnProgress(a)})))}async function qe(e,{layer:s,ongoingUploads:t},o){const r=t.get(e);if(r)return r;if(!ns(s))throw new Pe;if(Le(e,s))return o?.onProgress?.(1),e;const n=ze(e,s,o);t.set(e,n);try{await n}finally{t.delete(e)}return e}function Le(e,s){const{parsedUrl:t}=s;return t!=null&&e.metadata.externalSources.some(o=>pe(o,t))}async function ze(e,s,t){const{metadata:o}=e,{displaySource:r}=o,n=q(r?.source,s,{checkForConversionRequired:M("enable-feature:georeferenced-uploads")}),a=n!=null?He(n,s,t):o.externalSources.length>0?Ge(e,s,t):We(e,s,t),i=await a;return p(t),e.addExternalSources([i]),e}async function He(e,s,t){return{source:await L(e,s,t),original:!0,unitConversionDisabled:!0}}async function Ge(e,s,t){const o=H(s),{externalSources:r}=e.metadata,n=Ke(r,s);if(!n)throw new ve;const a=P(F.uploadConvertibleSource,t?.onProgress,"uploadConvertibleSource"),i=await L(n,s,{onProgress:a.makeOnProgress("uploadEditSource")});e.addExternalSources([{source:i,original:!0}]);const l=n.reduce((h,{asset:d})=>d instanceof File?h+d.size:h,0),g=a.simulate("serviceAssetsToGlb",_e(l));try{const{source:h,transform:d,origin:c}=await ss(i,s,o);return e.transform=d,c&&(e.metadata.georeferenced=!0,t?.useAssetOrigin&&(e.vertexSpace.origin=[c.x,c.y,c.z??0],e.spatialReference=c.spatialReference)),{source:h,unitConversionDisabled:!0}}finally{g.remove()}}async function We(e,s,t){const o=P(F.uploadLocalMesh,t?.onProgress,"uploadLocalMesh"),r=Je(e,s,{...t,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:await z([r],s,{...t,onProgress:o.makeOnProgress("uploadAssetBlobs")}),extent:e.extent.clone(),original:!0}}async function Je(e,s,t){const o=H(s),r=await e.load(t),n=await r.toBinaryGLTF({origin:r.origin,signal:t?.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return p(t),{blob:new Blob([n],{type:"model/gltf-binary"}),assetName:`${ce()}.glb`,assetType:o}}function Ke(e,s){for(const t of e){const o=q(t.source,s);if(o)return o}return null}function q(e,{infoFor3D:s},t={}){if(!e)return null;const{supportedFormats:o,editFormats:r}=s,n=ue(e),a=new Array,i=me(s),l=de(s);let g=!1;for(const h of n){const d=Xe(h,o);if(!d)return null;const{assetType:c}=d;if(t.checkForConversionRequired&&(c===i||c===l))return null;r.includes(c)&&(g=!0),a.push(d)}return g?a:null}function Xe(e,s){const t=le(e,s);return t?{asset:e,assetType:t}:null}async function L(e,s,t){return z(e.map(o=>Qe(o,t)),s,t)}async function z(e,s,t){const o=P(F.uploadAssetBlobs,t?.onProgress,"uploadAssetBlobs"),r=await Ye(e,s,{...t,onProgress:o.makeOnProgress("prepareAssetItems")});p(t);const n=r.map(({item:i})=>i),{uploadResults:a}=await Ze(n,s,{...t,onProgress:o.makeOnProgress("uploadAssetItems")});return p(t),e.map((i,l)=>es(r[l],a[l],s))}async function Qe(e,s){const{asset:t,assetType:o}=e;if(t instanceof File)return{blob:t,assetName:t.name,assetType:o};const r=await t.toBlob(s);return p(s),{blob:r,assetName:t.assetName,assetType:o}}async function Ve(e,s,t){const{blob:o,assetType:r,assetName:n}=e;let a=null;try{const i=await Be({data:o,name:n},s.url,t);p(t),a={assetType:r,assetUploadId:i.itemID}}catch(i){re(i),as().warnOnce(`Service ${s.url} does not support the REST Uploads API.`)}if(!a){const i=await ne(o);if(p(t),!i.isBase64)throw new xe;a={assetType:r,assetData:i.data}}if(!a)throw new Ae;return{item:a,assetName:n}}function Ye(e,s,t){const o=P(e.length,t?.onProgress,"prepareAssetItems");return Promise.all(e.map(async(r,n)=>{const a=Ve(await r,s,{...t,onProgress:o.makeOnProgress(n)});return p(t),a}))}async function Ze(e,s,t){const o=B(t?.onProgress);try{const r=await f(w(s.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if(p(t),r.data.uploadResults.length!==e.length)throw new Me(e.length,r.data.uploadResults.length);return r.data}finally{o.remove()}}function es(e,s,t){const{success:o}=s;if(!o){const{error:g}=s;throw new je(e.assetName,g)}const{assetHash:r}=s,{assetName:n,item:{assetType:a}}=e,{infoFor3D:{supportedFormats:i}}=t,l=fe(a,i);if(!l)throw new R(a);return new k(n,l,[new I(`${t.parsedUrl.path}/assets/${r}`,r)])}async function ss(e,s,t){const o=e.map(({assetName:n,parts:a})=>({assetName:n,assetHash:a[0].partHash}));let r;try{const n=w(s.parsedUrl.path,"convert3D"),a=s.capabilities?.operations.supportsAsyncConvert3D;r=(await(a?rs:os)(n,{query:{f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:t,async:a},responseType:"json",timeout:0})).data}catch{throw new Fe}return ts(s,r)}function ts(e,s){const t={source:s.assets.map(o=>{const r=ge(o.contentType,e.infoFor3D.supportedFormats);if(!r)throw new R(r);return new k(o.assetName,o.contentType,[new I(o.assetURL,o.assetHash)])}),origin:void 0,transform:void 0};if(M("enable-feature:georeferenced-uploads")&&s.transform){if(t.transform=ye(s.transform),s.spatialReference){const o=ee.fromJSON(s.spatialReference);t.origin=be(s.transform,o)}}else t.transform=Se(e.spatialReference);return t}function os(e,s){return f(e,s)}async function rs(e,s){const t=(await f(e,s)).data.statusUrl;for(;;){const o=(await f(t,{query:{f:"json"},responseType:"json"})).data;switch(o.status){case"Completed":return f(o.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(o.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await se(is)}}function ns(e){return!!e.infoFor3D&&!!e.url}function H({infoFor3D:e}){const s=he(e);if(!s)throw new Te;return s}function as(){return ae.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const is=j(1e3),zs=Object.freeze(Object.defineProperty({__proto__:null,uploadAssets:Ue},Symbol.toStringTag,{value:"Module"}));export{qs as i,Ls as m,Se as t,zs as u};
