import{z as v,jd as u,cX as b}from"./main-D7vwjMDX.js";import{x as M}from"./colorUtils-DxUhbS7D-CIyLRpfX.js";import{k as C,g as d,P as I,h as x,Q as k,K as O,w as S}from"./utils-BYqzY6_X-DS1RelRz.js";import h from"./callExpressionWithFeature-uWLbeAgq-DHKpVKjP.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./vec4f64-CjUMzAyX-DPYbdAom.js";import"./defaultCIMValues-gWpu7WSC-cjxb95kj.js";import"./enums-f9UUstHQ-hLTu4V1l.js";import"./quantizationUtils-Cndke4AR-B6Ut0kxM.js";const N=f=>{if(!f)return[0,0,0,0];const{r:e,g:r,b:i,a:s}=f;return[e,r,i,255*s]};class a{static findApplicableOverrides(e,r,i){if(e&&r){if(e.primitiveName){let s=!1;for(const t of i)if(t.primitiveName===e.primitiveName){s=!0;break}if(!s)for(const t of r)t.primitiveName===e.primitiveName&&i.push(t)}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const s of e.effects)a.findApplicableOverrides(s,r,i);if(e.symbolLayers)for(const s of e.symbolLayers)a.findApplicableOverrides(s,r,i);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMPictureStroke":case"CIMGradientStroke":case"CIMSolidFill":case"CIMPictureFill":case"CIMHatchFill":case"CIMGradientFill":case"CIMVectorMarker":case"CIMCharacterMarker":case"CIMPictureMarker":if(e.effects)for(const s of e.effects)a.findApplicableOverrides(s,r,i);if(e.markerPlacement&&a.findApplicableOverrides(e.markerPlacement,r,i),e.type==="CIMVectorMarker"){if(e.markerGraphics)for(const s of e.markerGraphics)a.findApplicableOverrides(s,r,i),a.findApplicableOverrides(s.symbol,r,i)}else e.type==="CIMCharacterMarker"?a.findApplicableOverrides(e.symbol,r,i):e.type==="CIMHatchFill"?a.findApplicableOverrides(e.lineSymbol,r,i):e.type==="CIMPictureMarker"&&a.findApplicableOverrides(e.animatedSymbolProperties,r,i)}}}static findEffectOverrides(e,r){if(!e)return null;if(e.type==="CIMGeometricEffectDashes"&&C(e),!r||!e.primitiveName)return{type:"cim-effect-param",effect:e,overrides:[]};const i=d(e),s=e.primitiveName,t=[];for(const c of r)c.primitiveName===s&&t.push(d(c));return{type:"cim-effect-param",effect:i,overrides:I(t)}}static async resolveSymbolOverrides(e,r,i,s,t,c,o){if(!e?.symbol)return null;let{symbol:n,primitiveOverrides:l}=e;const m=!!l;if(!m&&!s)return n;n=v(n),l=v(l);let y=!0;if(r||(r={attributes:{}},y=!1),m){if(y||(l=l.filter(p=>!p.valueExpressionInfo?.expression.includes("$feature"))),o||(l=l.filter(p=>!p.valueExpressionInfo?.expression.includes("$view"))),l.length>0){const p={spatialReference:i,fields:x(r.attributes),geometryType:t};await a.createRenderExpressions(l,p),a.evaluateOverrides(l,r,t??"esriGeometryPoint",c,o)}a.applyOverrides(n,l)}return s&&a.applyDictionaryTextOverrides(n,r,s,null),n}static async createRenderExpressions(e,r){const i=[];for(const s of e){const t=s.valueExpressionInfo;if(!t||a._expressionToRenderExpression.has(t.expression))continue;const c=u(t.expression,r.spatialReference,r.fields);i.push(c),c.then(o=>a._expressionToRenderExpression.set(t.expression,o))}i.length>0&&await Promise.all(i)}static evaluateOverrides(e,r,i,s,t){const c={$view:{scale:t?.scale}};for(const o of e){o.value&&typeof o.value=="object"&&M(o.value)&&(o.propertyName==="Color"||o.propertyName==="StrokeColor")&&(o.value=N(o.value));const n=o.valueExpressionInfo;if(!n)continue;const l=a._expressionToRenderExpression.get(n.expression);l&&(o.value=h(l,r,c,i,s))}}static applyDictionaryTextOverrides(e,r,i,s,t="Normal"){if(e?.type)switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":case"CIMTextSymbol":{const c=e.symbolLayers;if(!c)return;for(const o of c)o&&o.type==="CIMVectorMarker"&&a.applyDictionaryTextOverrides(o,r,i,s,e.type==="CIMTextSymbol"?e.textCase:t)}break;case"CIMVectorMarker":{const c=e.markerGraphics;if(!c)return;for(const o of c)o&&a.applyDictionaryTextOverrides(o,r,i,s)}break;case"CIMMarkerGraphic":{const c=e.textString;if(c&&c.includes("[")){const o=k(c,i);e.textString=O(r,o,s,t)}}}}static applyOverrides(e,r,i,s){if(e.primitiveName){for(const t of r)if(t.primitiveName===e.primitiveName){const c=S(t.propertyName);if(s&&s.push({cim:e,nocapPropertyName:c,value:e[c]}),i){let o=!1;for(const n of i)n.primitiveName===e.primitiveName&&(o=!0);o||i.push(t)}t.value!=null&&(e[c]=t.value)}}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const t of e.effects)a.applyOverrides(t,r,i,s);if(e.symbolLayers)for(const t of e.symbolLayers)a.applyOverrides(t,r,i,s);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMSolidFill":case"CIMVectorMarker":if(e.effects)for(const t of e.effects)a.applyOverrides(t,r,i,s);if(e.type==="CIMVectorMarker"&&e.markerGraphics)for(const t of e.markerGraphics)a.applyOverrides(t,r,i,s),a.applyOverrides(t.symbol,r,i,s)}}static restoreOverrides(e){for(const r of e)r.cim[r.nocapPropertyName]=r.value}static buildOverrideKey(e){let r="";for(const i of e)i.value!==void 0&&(r+=`${i.primitiveName}${i.propertyName}${JSON.stringify(i.value)}`);return r}static toValue(e,r){if(e==="DashTemplate")return r.split(" ").map(i=>Number(i));if(e==="Color"){const i=new b(r).toRgba();return i[3]*=255,i}return r}}a._expressionToRenderExpression=new Map;export{a as OverrideHelper};
