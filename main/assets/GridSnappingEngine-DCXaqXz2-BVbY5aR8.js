import{b9 as j,cu as E,a8 as z,co as k,v as s,I as l,t as D}from"./main-D7vwjMDX.js";import{H as F}from"./vec32-BuqRmYBM-ClpcRCNx.js";import{U as G,O as L}from"./projection-m8vi7Cxv-CyI2jDkU.js";import{f as H}from"./normalizeUtils-b-vZURob-BPlRWf3g.js";import{f as I}from"./scaleUtils-DtnDbXa5-uHor4eLM.js";import{P as W,Q as Z,k as $}from"./gridUtils-D2du44-d-v-PEiS0b.js";import{ag as d,L as A,a5 as O,ah as B,a as J}from"./SketchViewModel-T2dNp9Tt-QF9qwxQk.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./utils-DuaeuwP5-C_ijv4zF.js";import"./utils-Jw-4AGsF-CU104lYw.js";import"./geodesicUtils-DV-lFWtb-ID_rpKXS.js";import"./UpdatingHandles-DBzjq66S-BJQBk2Bl.js";import"./GraphicsLayer-GkJJfSu5-BZxIbWSA.js";import"./GraphicsCollection-rAFZo1AJ-xDpoTuU3.js";import"./Layer-B8q-l4yV-BexM1eQl.js";import"./TimeExtent-gZaEUVeW-B8lK7hOc.js";import"./ScaleRangeLayer-DIxukUBC-C-91RrTO.js";import"./layerContainerType-ChWdCT09-G5sdAsSy.js";import"./jsonUtils-DzmXEA9_-DgFzKCQh.js";import"./parser-hXQyB-Qx-DBEB2hCw.js";import"./mat4f32-CiZjBg9k-CUm34GoR.js";import"./mat4-BFStKTjU-WrlKAspo.js";import"./ElevationInfo-DkWlof50-CKiKbD2K.js";import"./lengthUtils-wU9RRIqK-Dn-cOZRL.js";import"./globalCss-CFN4F315-DRhKtkbs.js";import"./Queue-B8H6jIv7-oUuyYSR9.js";import"./signal-DxzURL18-CpTU2B0U.js";import"./Version-BTMwSXf1-pRbtbwqb.js";import"./quantityUtils-RaoZoCNH-1kEzJw6x.js";import"./vec2-BnynUbeJ-CKtGJQAy.js";import"./vec2f64-CEUyUoff-BBc0aQ6D.js";import"./projectVectorToVector-D0K_S4MR-QWHMdts3.js";import"./projectPointToVector-CG1hALQu-DPSkW3cH.js";import"./Query-CxQYWcUQ-K9TJdLqp.js";import"./Field-Cj6Pz3TI-CQAvI3hR.js";import"./fieldType-VTpxE-EM-B2R_XePP.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./vec4f64-CjUMzAyX-DPYbdAom.js";import"./plane-B_adY3_o-CH2S3dla.js";import"./mat3f64-Dh9_zhFu-BIT-k8Dm.js";import"./mat4f64-BaJwL7tQ-k0uMm8LY.js";import"./quatf64-C16JxGFv-BKWK1F8U.js";import"./sphere-Cj20syUS-D26RDXx7.js";import"./mat3-DOnW3DjW-C3hbW9XY.js";let o=class extends j{constructor(t){super(t),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){return this.grid?.rotateWithMap?0:E(this.view.rotation??0)}get gridRotation(){return E(this.grid?.rotation??0)}get gridCenter(){const{spatialReference:t,grid:r}=this;if(!r||!t||!G(r.center.spatialReference,t))return null;try{const e=L(r.center,t),i=t.isWrappable&&this.view?.center!=null?H(e.x,this.view.center.x,t):e.x;return d(i,e.y,e.z)}catch(e){return z.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",e),null}}get offsetScaleFactor(){const{pixelsPerStride:t,grid:r}=this;if(!r||!t)return 1;const{majorLineInterval:e,dynamicScaling:i}=r;return e<1?null:W(e,t,i)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:t}=this;return t?k(t.spacing,t.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:t}=this;return t==null?null:t*I(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:t}=this.view;return this.gridCenter?Z(this.gridCenter[0],this.gridCenter[1],t):null}get pixelsPerStride(){const{gridMetersPerStride:t,viewMetersPerPixel:r}=this;return r&&t?t/r:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(t,r,e){const{options:i,view:n}=this;if(!i?.effectiveGridEnabled||!n.grid||e.feature?.attributes&&A in e.feature.attributes)return[];const p=e.coordinateHelper.arrayToPoint(t),a=i.distance*(e.pointer==="touch"?i.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(p,a)}fetchCandidatesSync(t,r){const e=[],{grid:i,effectiveViewRotation:n,gridRotation:p,gridCenter:a,viewMetersPerPixel:f,viewMetersPerSRUnit:m,offsetScaleFactor:S,spatialReference:g,gridMetersPerStride:C,pixelsPerStride:b}=this;if(!(i&&f&&m&&a&&g&&S&&C&&b)||!i.dynamicScaling&&b<$||!G(t.spatialReference,g))return e;const w=L(t,g),X=d(w.x,w.y,w.z),u=h(X,-p,a,-n),P=C/m*S,c=Q(u,P,a),{shouldSnapX:v,shouldSnapY:y}=T(c,u,r,f,m);if(!v&&!y)return[];const Y=d((v?c:u)[0],(y?c:u)[1]),R=h(Y,p,a,n),U=h(c,p,a,n);if(y){const M=V(c,u,P,"y"),x=h(M,p,a,n);e.push(new O({lineStart:U,lineEnd:x,targetPoint:R,isDraped:!1}))}if(v){const M=V(c,u,P,"x"),x=h(M,p,a,n);e.push(new O({lineStart:U,lineEnd:x,targetPoint:R,isDraped:!1}))}return v&&y&&e.push(new B(R,e[0],e[1],!1)),e}};s([l({constructOnly:!0})],o.prototype,"view",void 0),s([l()],o.prototype,"options",void 0),s([l()],o.prototype,"grid",null),s([l()],o.prototype,"effectiveViewRotation",null),s([l()],o.prototype,"gridRotation",null),s([l()],o.prototype,"gridCenter",null),s([l()],o.prototype,"offsetScaleFactor",null),s([l()],o.prototype,"spatialReference",null),s([l()],o.prototype,"gridMetersPerStride",null),s([l()],o.prototype,"viewMetersPerPixel",null),s([l()],o.prototype,"viewMetersPerSRUnit",null),s([l()],o.prototype,"pixelsPerStride",null),s([l()],o.prototype,"updating",null),o=s([D("esri.views.interactive.snapping.GridSnappingEngine")],o);const h=(t,r,e,i)=>{const n=J(t[0],t[1],t[2]);return F(n,F(n,n,e,r),e,i)},Q=(t,r,e)=>{const i=(t[0]-e[0])/r,n=(t[1]-e[1])/r,p=Math.trunc(i),a=Math.trunc(n),f=Math.round(i%1),m=Math.round(n%1),S=e[0]+(p+f)*r,g=e[1]+(a+m)*r;return d(S,g)},T=(t,r,e,i,n)=>{if(i<=0)return{shouldSnapX:!1,shouldSnapY:!1};const p=(t[0]-r[0])/i,a=(t[1]-r[1])/i;return{shouldSnapX:Math.abs(p*n)<e,shouldSnapY:Math.abs(a*n)<e}},V=(t,r,e,i)=>{if(i==="y"){const p=r[0]>t[0]?1:-1;return d(t[0]+e*p,t[1])}const n=r[1]>t[1]?1:-1;return d(t[0],t[1]+e*n)};export{o as GridSnappingEngine};
