import{iA as n,t as p,N as y,dq as m,f as u,v as o,S as i,w as d,o as h,n as c,f2 as a,eJ as f,ff as S,eu as v,eK as g}from"./main-CKPAMuMz.js";import{w as b}from"./MultiOriginJSONSupport-BqiFJbbt-AVJjKP58.js";import{e as C}from"./Layer-DvVVmz9x-CjIFACse.js";import{u as w}from"./BlendLayer-DjW_5k0v-Ba_o1T5X.js";import{u as G,y as x,a as P,i as _}from"./OperationalLayer-CbXUnTH0-DR-Octoq.js";import{x as F}from"./PortalLayer-B34ZUA2x-Bjkz37Dy.js";import{T as R}from"./RefreshableLayer-Qpvyi8qY-DqK3l5ZI.js";import{S as k}from"./ScaleRangeLayer-x42fwED3-Hy2yL90P.js";import"./TimeExtent-Cf2Pienb-hUnhds2K.js";import"./layerContainerType-ChWdCT09-G5sdAsSy.js";import"./jsonUtils-BwLwuQj7-CC6Ggc3y.js";import"./parser-CWccHtwJ-CN5cwz5B.js";import"./mat4f32-BdRMyjXW-CWt6U0BP.js";import"./mat4-OOmHNWi7-DoywWAQR.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./ElevationInfo-DE5to86a-BquCsGD8.js";import"./lengthUtils-C61nRlXw-DOzVfUMy.js";import"./asyncUtils-BPUlNCrX-UqV5GU0y.js";import"./PortalItem-BP-IQXnZ-D8She0MZ.js";import"./portalItemUtils-BfWDJg-S-BZpz_F3l.js";import"./projectionUtils-B-CplN3q-DbdB_f1Y.js";const E=["atom","xml"],M={base:a,key:"type",typeMap:{"simple-line":f},errorContext:"symbol"},T={base:a,key:"type",typeMap:{"picture-marker":S,"simple-marker":v},errorContext:"symbol"},j={base:a,key:"type",typeMap:{"simple-fill":g},errorContext:"symbol"};let t=class extends w(R(G(F(k(b(C)))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}readFeatureCollections(e,r){return r.featureCollection.layers.forEach(s=>{const l=s.layerDefinition.drawingInfo.renderer.symbol;l&&l.type==="esriSFS"&&l.outline?.style.includes("esriSFS")&&(l.outline.style="esriSLSSolid")}),r.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&this.originOf("title")!=="defaults"?e:this.url?n(this.url,E)||"GeoRSS":e}set title(e){this._set("title",e)}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(p).then(()=>this._fetchService(r)).then(s=>{this.read(s,{origin:"service"})})),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){const r=this.spatialReference,{data:s}=await y(u.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:m(r)?void 0:r.wkid??JSON.stringify(r)},signal:e});return s}_hasGeometry(e){return this.featureCollections?.some(r=>r.featureSet?.geometryType===e&&r.featureSet.features?.length>0)??!1}};o([i()],t.prototype,"description",void 0),o([i()],t.prototype,"featureCollections",void 0),o([d("service","featureCollections",["featureCollection.layers"])],t.prototype,"readFeatureCollections",null),o([i({type:h,json:{name:"lookAtExtent"}})],t.prototype,"fullExtent",void 0),o([i(x)],t.prototype,"id",void 0),o([i(P)],t.prototype,"legendEnabled",void 0),o([i({types:M,json:{write:!0}})],t.prototype,"lineSymbol",void 0),o([i({type:["show","hide"]})],t.prototype,"listMode",void 0),o([i({types:T,json:{write:!0}})],t.prototype,"pointSymbol",void 0),o([i({types:j,json:{write:!0}})],t.prototype,"polygonSymbol",void 0),o([i({type:["GeoRSS"]})],t.prototype,"operationalLayerType",void 0),o([i(_)],t.prototype,"url",void 0),o([i({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],t.prototype,"title",null),o([i({readOnly:!0,json:{read:!1},value:"geo-rss"})],t.prototype,"type",void 0),t=o([c("esri.layers.GeoRSSLayer")],t);const te=t;export{te as default};
