import{aU as M,a1 as C,ah as R,aA as S,n as U,v as o,S as h,i as F,o as w,$ as V}from"./main-CSzu-mNg.js";import{d as b}from"./BitmapContainer-BC8fvmFc-Dqrz4VM1.js";import{X as q,Y as L}from"./LayerView-Bish-E63-DuQoNWP9.js";import{K as W}from"./ExportStrategy-BNE7Gp0u-BYOSKALk.js";import{n as A}from"./RefreshableLayerView-BdQpGYly-Vjvv6vpV.js";import{r as z}from"./ExportWMSImageParameters-CMk80WSM-Dd7AJNqu.js";import{T as B}from"./timeSupport-ohWmWReZ-HKn6le_J.js";import"./WGLContainer-LxgEo4I_-DNZ5TV90.js";import"./definitions-DJSdSb77-DkoRHaVx.js";import"./LabelMetric-BeluzH3o-S7CmLz06.js";import"./enums-CpSG_SL3-BMD3Tb1v.js";import"./Texture-BCt2hphT-CinHIoJm.js";import"./enums-DBi1-Mm2-CUS1pvQe.js";import"./Program-DLVwTiPA-DstVmpmy.js";import"./BufferObject-BM_7mcDb-CBWq4Wu9.js";import"./VertexElementDescriptor-BAy1DPb3-BOhpDZGx.js";import"./vec2f32-CVhmN3Me-DxoqVD7C.js";import"./VertexArrayObject-M4iRGGoi-Dck8W8Qt.js";import"./ProgramTemplate-DQOm6Omy-Xl5tamzl.js";import"./Tile-D75RMC64-C3x2sjvl.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./TileKey-C5IL-JBr-o-rFij5p.js";import"./vec2-tHZ6OaOy-xCj1obDt.js";import"./QueueProcessor-DbfV9fLy-BrACXvkX.js";import"./workers-PiCjreoO-Be0bQ3N0.js";import"./ReactiveMap-CFk6jPfN-KsKIkWpA.js";import"./signal-CETehA7D-vYXSYU0t.js";import"./quickselect-DHTstthl-Ds_Aj0x5.js";import"./Query-BrwMGK8U-C_QbOWZv.js";import"./Field-C6hA1tZj-zhOeTVdD.js";import"./fieldType-CD2CL2hr-ejOPtSY-.js";import"./TimeExtent-Cn0Jofqr-C-dk_a7O.js";import"./mat3-CC4Foazl-BWjyqE2v.js";import"./MapView-BGOJJ8ch-DXtax-nf.js";import"./Cyclical-C_9rKUUQ-DQcp8zQa.js";import"./CollectionFlattener-DkHuHn5E-C1d_1DgI.js";import"./projection-BA9M1R7d-DpaCJFwQ.js";import"./projectBuffer-CvCBvJ6W-jMgs37aA.js";import"./TileInfo-CWIRDhZl-DCiwc9E2.js";import"./TileKey-B_6qmYK--BtZdR-Xy.js";import"./themeUtils-YjM7iIiX-CqHyowa-.js";import"./uuid-Dj9mdEVg-BaKSCiyT.js";import"./UpdatingHandles-CUu3u1ms-DbsevhD7.js";import"./Map-1zd11DKO-B4ZJqT_4.js";import"./Basemap-BEqqSTw9-DYq9X3zK.js";import"./loadAll-e978YItg-PWq9IdvI.js";import"./PortalItem-CctGdnxF-C6BkyzeL.js";import"./writeUtils-D5qlLkwk-Bmdh2kV4.js";import"./compilerUtils-CV1QYWI8-CbALkdne.js";import"./mat4f32-CiZjBg9k-CUm34GoR.js";import"./mat4-DX7gBViE-Cy6eqffn.js";import"./TablesMixin-C8RojhYs-DheDoaE8.js";import"./Layer-ChoECxvZ-_yZF0uga.js";import"./GraphicsCollection-CWTXNZOX-G2yetnfD.js";import"./HeightModelInfo-C5vFqzyF-5upADeJw.js";import"./arcgisLayerUrl-HNYh8jvG-C8-yyEtI.js";import"./ViewingMode-CyR_b1T8-_s7_Gbsk.js";import"./vec2f64-CeODonrJ-CkkJCdRC.js";import"./normalizeUtils-Bxmy9MNI-B2J0TFlr.js";import"./normalizeUtilsCommon-CRJlkfEA-QIejocsS.js";import"./utils-9sQxfkoa-BFdB-EdI.js";import"./utils-Bq23Xwmj-BlmCMq5R.js";import"./unitBezier-CGtWxaCq-BRwEDigF.js";import"./Scheduler-B7UX7Wr5-BLGrRtvK.js";import"./vec32-D9GsKZ1t-c8_wTGeN.js";import"./imageUtils-BA2D6Uf1-BhQP-ppU.js";import"./capabilities-agoTWNzb-CtsNgRyk.js";import"./Version-CoKzbupV-Cs_gmb7H.js";import"./ColorBackground-gVZldRLm-CTXj2mZh.js";import"./vec3f32-BS0cezmI-B_madU1n.js";import"./Container-BcuL1ZEG-DiYp0ODV.js";import"./parser-DyDJ-rlI-za1wiDaU.js";import"./StyleDefinition-Ct4HIk9T-B82pTf0h.js";import"./config-nuMERBvb-MDUrh2eL.js";import"./earcut-XDcq3zAf-BcwyrT7l.js";import"./featureConversionUtils-D6hFQ4Af-CUAoGrRW.js";import"./OptimizedFeature-EIithYlr-Cq64mIT3.js";import"./OptimizedFeatureSet-DfZGBuxJ-C08BOAgi.js";import"./layerViewUtils-DURAPenP-DAIJsEJS.js";import"./Bitmap-CcqmzvfR-CpGq-BZ9.js";const H=e=>{let t=class extends e{initialize(){this.exportImageParameters=new z({layer:this.layer})}destroy(){this.exportImageParameters=S(this.exportImageParameters)}get exportImageVersion(){return this.exportImageParameters?.commitProperty("version"),this.commitProperty("timeExtent"),(this._get("exportImageVersion")||0)+1}get timeExtent(){return B(this.layer,this.view?.timeExtent,this._get("timeExtent"))}async fetchPopupFeaturesAtLocation(i,p){const{layer:a}=this;if(!i)throw new w("wmslayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:a});const{popupEnabled:d}=a;if(!d)throw new w("wmslayerview:fetchPopupFeatures","popupEnabled should be true",{popupEnabled:d});const r=this.createFetchPopupFeaturesQuery(i);if(!r)return[];const{extent:m,width:s,height:n,x:c,y:l}=r;if(!(m&&s&&n))throw new w("wmslayerview:fetchPopupFeatures","WMSLayer does not support fetching features.",{extent:m,width:s,height:n});const y=await a.fetchFeatureInfo(m,s,n,c,l);return V(p),y}};return o([h()],t.prototype,"exportImageParameters",void 0),o([h({readOnly:!0})],t.prototype,"exportImageVersion",null),o([h()],t.prototype,"layer",void 0),o([h({readOnly:!0})],t.prototype,"timeExtent",null),t=o([F("esri.views.layers.WMSLayerView")],t),t};let u=class extends H(A(q(L))){constructor(){super(...arguments),this.bitmapContainer=new b}supportsSpatialReference(e){return this.layer.serviceSupportsSpatialReference(e)}update(e){this.strategy.update(e).catch(t=>{M(t)||C.getLogger(this).error(t)})}attach(){const{layer:e}=this,{imageMaxHeight:t,imageMaxWidth:i}=e;this.bitmapContainer=new b,this.container.addChild(this.bitmapContainer),this.strategy=new W({container:this.bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxHeight:t,imageMaxWidth:i,imageRotationSupported:!1,imageNormalizationSupported:!1,hidpi:!1}),this.addAttachHandles(R(()=>this.exportImageVersion,()=>this.requestUpdate()))}detach(){this.strategy=S(this.strategy),this.container.removeAllChildren()}viewChange(){}moveEnd(){this.requestUpdate()}createFetchPopupFeaturesQuery(e){const{view:t,bitmapContainer:i}=this,{x:p,y:a}=e,{spatialReference:d}=t;let r,m=0,s=0;if(i.children.some(y=>{const{width:f,height:v,resolution:I,x:g,y:x}=y,P=g+I*f,E=x-I*v;return p>=g&&p<=P&&a<=x&&a>=E&&(r=new U({xmin:g,ymin:E,xmax:P,ymax:x,spatialReference:d}),m=f,s=v,!0)}),!r)return null;const n=r.width/m,c=Math.round((p-r.xmin)/n),l=Math.round((r.ymax-a)/n);return{extent:r,width:m,height:s,x:c,y:l}}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(e,t,i,p){return this.layer.fetchImageBitmap(e,t,i,{timeExtent:this.timeExtent,...p})}};o([h()],u.prototype,"strategy",void 0),o([h()],u.prototype,"updating",void 0),u=o([F("esri.views.2d.layers.WMSLayerView2D")],u);const ue=u;export{ue as default};
