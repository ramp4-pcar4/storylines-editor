import{c0 as s,v as o,I as n,bz as p,t as u,a8 as z}from"./main-DK5A1thH.js";const d=s()({naturalLog:"natural-log",squareRoot:"square-root",percentOfTotal:"percent-of-total",log:"log",field:"field"}),r="percent-of-total",l="field",g=m=>{let t=class extends m{constructor(){super(...arguments),this.normalizationField=null,this.normalizationMaxValue=null,this.normalizationMinValue=null,this.normalizationTotal=null}get normalizationType(){let a=this._get("normalizationType");const i=!!this.normalizationField,e=this.normalizationTotal!=null;return i||e?(a=i&&l||e&&r||null,i&&e&&z.getLogger(this).warn("warning: both normalizationField and normalizationTotal are set!")):a!==l&&a!==r||(a=null),a}set normalizationType(a){this._set("normalizationType",a)}};return o([n({type:String,json:{name:"parameters.normalizationField",write:!0}})],t.prototype,"normalizationField",void 0),o([n({type:Number,json:{name:"parameters.normalizationMaxValue",write:!0}})],t.prototype,"normalizationMaxValue",void 0),o([n({type:Number,json:{name:"parameters.normalizationMinValue",write:!0}})],t.prototype,"normalizationMinValue",void 0),o([n({type:Number,json:{name:"parameters.normalizationTotal",write:!0}})],t.prototype,"normalizationTotal",void 0),o([p(d,{name:"parameters.normalizationType"})],t.prototype,"normalizationType",null),t=o([u("esri.rest.support.NormalizationBinParametersMixin")],t),t};export{g as d,d as r};
