import{v as o,K as O,ak as f,aD as u,S as r,ac as _,le as y,lf as T,jj as C,b9 as S,aW as D,aX as b,n as v}from"./main-CRSVFBx1.js";import{C as $}from"./mat2df64-DDXwUeaJ-Tu7q-7Mk.js";import{b as M,d as I,C as g,Y as x,O as E,E as V,I as z,R as U}from"./drawSurfaces-DQUGW1oK-BwMPyv67.js";import{K as h}from"./jsxFactory-Cua8zWVZ-CNmTho2W.js";import"./vec32-Cj8pVsU0-DycYYCfx.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./geodesicUtils-DKS2UG72-DKtK8lEq.js";import"./projectionUtils-B-CplN3q-Dcz5oYkV.js";import"./distanceOperator-CZDvZf3O-BSiG3L50.js";import"./Point2D-CaHJVGk1-JqvJXjLr.js";import"./ProjectionTransformation-DQ4GElxa-CiIu67D1.js";import"./Envelope2D-DlBzXkgv-eKRxGysX.js";import"./Transformation2D-CXWnDKXs-CjsleQQw.js";import"./SimpleGeometryCursor-DSF_YyIm-TAMgMsbK.js";import"./OperatorDefinitions-DJdq_wrt-DP7_WWTp.js";import"./apiConverter-CSuukuP9-fnABc3oQ.js";import"./jsonConverter-tsQ40CV0-CBUB9zWJ.js";import"./simplifyOperator-BW9Vrh-l-DSyehrdM.js";import"./operatorSimplify-CjcRb60U-CijmXgvy.js";import"./mat2d-BQA-1WB--Pnyy0dhf.js";import"./quat-DQgq9Ar5-COc6Vxw6.js";import"./mat3f64-BnNZDR5l-Bz3OL2oI.js";import"./quatf64-C16JxGFv-BKWK1F8U.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./memoize-DvEt8OkT-Cy_RrfpZ.js";import"./ReactiveSet-CRNikQMW-1LKrlgiM.js";import"./diffUtils-BxG8DCnW-CWNsPGP8.js";import"./UpdatingHandles-Bd2FQ26N-5SDlh-De.js";import"./elevationInfoUtils-Ccn2Wfoe-C2OFtCTP.js";import"./ElevationInfo-DE5to86a-C3BeW4an.js";import"./lengthUtils-C61nRlXw-BDGhVIua.js";import"./ViewingMode-CdRKcXnc-Dab70bGf.js";import"./SnappingContext-OY7xJ98b-jUdnJ1Qt.js";import"./vec2-BnynUbeJ-CKtGJQAy.js";import"./vec2f64-CkowXrDb-3zFQ3LNH.js";import"./vec4f64-DD-nkcCV-CSNWKRqG.js";import"./plane-Cf3Koz3c-QjU3kzOT.js";import"./vectorStacks-5ZZtmT9E-BVIf6VRt.js";import"./mat4f64-xsZDPPj0-Dq35B4BL.js";import"./SketchViewModel-B0qFHK0t-cK5TL9L8.js";import"./GraphicsLayer-BiEC2-gS-Cd1ch4HY.js";import"./GraphicsCollection-uWAVmks7-CasBlo56.js";import"./Layer-DvVVmz9x-DcPqziX7.js";import"./TimeExtent-Cf2Pienb-9KGnkWaA.js";import"./BlendLayer-DjW_5k0v-CGLMCIeb.js";import"./layerContainerType-ChWdCT09-G5sdAsSy.js";import"./jsonUtils-BwLwuQj7-Cl-0PMR8.js";import"./parser-CWccHtwJ-CZ1DDriE.js";import"./mat4f32-BdRMyjXW-CWt6U0BP.js";import"./mat4-OOmHNWi7-BxzOUwQV.js";import"./ScaleRangeLayer-x42fwED3-D4uoWJ4Q.js";import"./editableLayers-DFUBlMJy-ClNIOWta.js";import"./utils-Dd8gTonD-CLxM4-6Z.js";import"./Queue-DV3gpSdl-BHbZNGmw.js";import"./Version-CnwD6MZa-DQ8hQoV-.js";import"./Cyclical-DgD7_U1C-Bbl9CQ6j.js";import"./quantityUtils-B1Ov7DZK-Bb52-9wi.js";import"./projectVectorToVector-DcyiGOWJ-B20y-Ej6.js";import"./projectPointToVector-BZJhoF_5-DRr3Jlt1.js";import"./asyncUtils-BPUlNCrX-3KN34Iu_.js";import"./Query-n1aoaaFC-D1i9IH_O.js";import"./Field-BIQ-quF4-DP9xtL2A.js";import"./fieldType-PhcL4ff8-DIy64uPm.js";import"./sphere-zPMQWhGG-B-w9Sdt4.js";import"./mat3-DOnW3DjW-C3hbW9XY.js";import"./geodeticLengthOperator-DHGBHzf3-Bo6ABrgX.js";import"./geodeticCurveType-D_etKnbP-CirnHLSB.js";import"./earcut-C6NeZYSh-Da0ULCQ5.js";import"./triangle-BM89wdHY-DvPof5zx.js";import"./lineSegment-BAWQVP9P-BfTcNLeA.js";import"./spatialReferenceEllipsoidUtils-BK0OQJn2-D8Z2h4KG.js";import"./meshVertexSpaceUtils-CCr86FVF-rmOKSh_L.js";import"./MeshLocalVertexSpace-Cfxtmv6L-BWaiO3_H.js";import"./hydratedFeatures-oobA80ei-DsLxoz7l.js";import"./Scheduler-BV4C4cVP-C-sv6XG3.js";import"./debugFlags-8tOwPnHK-BkXrdmKo.js";import"./intl-BAA1onnp-DizJDE51.js";import"./uuid-Dj9mdEVg-BaKSCiyT.js";import"./sanitizerUtils-B1yRmbO2-B7KG_jBT.js";let i=class extends _{constructor(t){super(t),this.coordinates=void 0,this.strokeDash=[],this.strokeWidth=1,this.strokeColor=[0,0,0,1],this.strokeDashColor=[255,255,255,1],this.fillColor=[0,0,0,0],this.visible=!0,this.isDecoration=!0}get _strokeStyle(){const t=this.strokeColor;return`rgba(${t[0]}, ${t[1]}, ${t[2]}, ${t[3]})`}get _strokeBackgroundStyle(){const t=this.strokeDashColor;return`rgba(${t[0]}, ${t[1]}, ${t[2]}, ${t[3]})`}get _fillStyle(){const t=this.fillColor;return`rgba(${t[0]}, ${t[1]}, ${t[2]}, ${t[3]})`}get _renderCoordinates(){const t=[];if(!this.coordinates)return{coordinates:t,rect:y};const e=T(C(S(y),this.coordinates),2*this.strokeWidth);e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.ceil(e[2]+.5),e[3]=Math.ceil(e[3]+.5);for(const n of this.coordinates)t.push([Math.floor(n[0]-e[0])+.5,Math.floor(n[1]-e[1])+.5]);return t.reverse(),{coordinates:t,rect:e}}render(){const{coordinates:t,rect:e}=this._renderCoordinates,n=D(e),a=b(e);return h("div",{classes:{"esri-outline-overlay-item":!0},styles:{left:e[0]+"px",top:e[1]+"px",width:n+"px",height:a+"px",visibility:this.visible?"visible":"hidden"}},h("svg",{height:a,styles:{display:"block"},width:n},h("polygon",{fill:this._fillStyle,points:t.map(([l,p])=>`${l},${p}`).join(" "),stroke:this._strokeBackgroundStyle,"stroke-width":this.strokeWidth}),h("polygon",{fill:"transparent",points:t.map(([l,p])=>`${l},${p}`).join(" "),stroke:this._strokeStyle,"stroke-dasharray":this.strokeDash.length?this.strokeDash.join(" "):void 0,"stroke-width":this.strokeWidth})))}renderCanvas(){}};o([r()],i.prototype,"coordinates",void 0),o([r()],i.prototype,"strokeDash",void 0),o([r()],i.prototype,"strokeWidth",void 0),o([r()],i.prototype,"strokeColor",void 0),o([r()],i.prototype,"strokeDashColor",void 0),o([r()],i.prototype,"fillColor",void 0),o([r()],i.prototype,"visible",void 0),o([r()],i.prototype,"isDecoration",void 0),o([r({readOnly:!0})],i.prototype,"_strokeStyle",null),o([r({readOnly:!0})],i.prototype,"_strokeBackgroundStyle",null),o([r({readOnly:!0})],i.prototype,"_fillStyle",null),o([r({readOnly:!0})],i.prototype,"_renderCoordinates",null),i=o([v("esri.views.overlay.OutlineOverlayItem")],i);let s=class extends O.EventedMixin(M){constructor(t){super(t),this.drawOperation=null,this._overlayItem=void 0,this.geometryType=null,this.mode=null,this.type="draw-screen"}initialize(){this.drawOperation=this._makeDrawOperation();const t=e=>this.drawOperation?.on(e,n=>{this._updateVisuals(),this.emit(e,n)})??u();this.addHandles([t("vertex-add"),t("vertex-remove"),t("vertex-update"),t("cursor-update"),t("complete")]),this.finishToolCreation()}destroy(){this.drawOperation=f(this.drawOperation),this._set("view",null)}get canRedo(){return!!this.drawOperation?.canRedo}get canUndo(){return!!this.drawOperation?.canUndo}set centeredToggled(t){this._set("centeredToggled",t),this._updateVisuals()}set enabled(t){const{drawOperation:e}=this;e&&(e.interactive=t),this._set("enabled",t)}set uniformSizeToggled(t){this._set("uniformSizeToggled",t),this._updateVisuals()}get updating(){return this.drawOperation?.updating??!1}get cursor(){return this._get("cursor")??"crosshair"}set cursor(t){this._set("cursor",t);const{drawOperation:e}=this;e&&(e.cursor=t)}completeCreateOperation(){this.drawOperation?.complete()}onInputEvent(t){this.destroyed||this.drawOperation?.onInputEvent(t)}redo(){this.drawOperation?.redo()}undo(){this.drawOperation?.undo()}reset(){}_makeDrawOperation(){const{view:t}=this;return new I({view:t,manipulators:this.manipulators,geometryType:W(this.geometryType),drawingMode:this.mode,hasZ:!1,defaultZ:0,snapToSceneEnabled:!1,drawSurface:new g,hasM:!1,snappingManager:null,snappingVisualizer:null,graphic:null,cursor:this.cursor,automaticLengthMeasurementUtils:this.automaticLengthMeasurementUtils})}get coordinates(){const{drawOperation:t}=this;if(!t?.geometryIncludingUncommittedVertices.length)return[];const{coordinateHelper:e}=t,n=t.committableVertex,a=t.committedVertices.slice();n!=null&&a.push(e.pointToArray(n));const l=a.length;switch(this.geometryType){case"point":return a.slice(0,1);case"circle":case"rectangle":{const p=new x($,g.spatialReference),c=this.geometryType==="circle"?E:V,w=this.geometryType==="circle"?z:U;if(l===1&&t.isCompleted){const d=a[0],m=p.makeMapPoint(d[0]+j,d[1]);return c([d,m],p,!0)?.geometry.rings[0]??[]}if(l===2){const d=this.geometryType!=="rectangle",m=this.centeredToggled!==d,k=this.geometryType!=="rectangle";return(this.uniformSizeToggled!==k?c(a,p,m)?.geometry.rings[0]:w(a,p,m)?.geometry.rings[0])??[]}return[]}}return a}_updateVisuals(){if(!this._overlayItem){const t=new i({strokeDash:[5],strokeDashColor:[255,255,255,255]});this.view.overlay?.addItem(t),this.addHandles(u(()=>{this.view.overlay?.removeItem(t),t?.destroy(),this._overlayItem=void 0})),this._overlayItem=t}this._overlayItem.coordinates=this.coordinates}onDeactivate(){this.drawOperation?.isCompleted||this.drawOperation?.cancel()}};function W(t){switch(t){case"polygon":case"point":return t;case"circle":case"rectangle":return"segment"}}o([r({value:!1})],s.prototype,"centeredToggled",null),o([r()],s.prototype,"drawOperation",void 0),o([r({value:!0})],s.prototype,"enabled",null),o([r({value:!1})],s.prototype,"uniformSizeToggled",null),o([r({constructOnly:!0})],s.prototype,"geometryType",void 0),o([r({constructOnly:!0})],s.prototype,"mode",void 0),o([r({readOnly:!0})],s.prototype,"type",void 0),o([r({readOnly:!0})],s.prototype,"updating",null),o([r({constructOnly:!0,nonNullable:!0})],s.prototype,"view",void 0),o([r({constructOnly:!0})],s.prototype,"automaticLengthMeasurementUtils",void 0),o([r()],s.prototype,"cursor",null),s=o([v("esri.views.draw.DrawScreenTool")],s);const j=48;export{s as DrawScreenTool,W as geometryTypeToDrawOperationGeometryType};
