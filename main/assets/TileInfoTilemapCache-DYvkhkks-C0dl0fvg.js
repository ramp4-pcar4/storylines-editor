import{d5 as n,h,aM as r}from"./main-C6fh4Kls.js";class f{constructor(i,t=0,e=i.lods[i.lods.length-1].level){this.tileInfo=i,this.minLOD=t,this.maxLOD=e,i.lodAt(t)||(this.minLOD=i.lods[0].level),i.lodAt(e)||(this.maxLOD=i.lods[i.lods.length-1].level)}get effectiveMinLOD(){return this.minLOD??this.tileInfo.lods[0].level}get effectiveMaxLOD(){return this.maxLOD??this.tileInfo.lods[this.tileInfo.lods.length-1].level}getAvailability(i,t,e){const l=this.tileInfo?.lodAt(i);return!l||i<this.minLOD||i>this.maxLOD?"unavailable":l.cols&&l.rows?e>=l.cols[0]&&e<=l.cols[1]&&t>=l.rows[0]&&t<=l.rows[1]?"unknown":"unavailable":"unknown"}async fetchAvailability(i,t,e,l){await n(l);const a=this.getAvailability(i,t,e);if(a==="unavailable")throw new h("tile-map:tile-unavailable","Tile is not available",{level:i,row:t,col:e});return a}async fetchAvailabilityUpsample(i,t,e,l,a){await n(a),l.level=i,l.row=t,l.col=e;const s=this.tileInfo;return s.updateTileInfo(l),this.fetchAvailability(i,t,e,a).catch(o=>{if(r(o))throw o;if(s.upsampleTile(l))return this.fetchAvailabilityUpsample(l.level,l.row,l.col,l,a);throw o})}}export{f as c};
