import{V as F,G as V,Z as M,N as G,v as y,H as k,m as H,a as J}from"./Point2D-CaHJVGk1-JqvJXjLr.js";import{e as w,s as K,u as W,aU as ee,aw as X,p as te}from"./ProjectionTransformation-DQ4GElxa-DelCEYL2.js";import{Envelope2D as v}from"./Envelope2D-DlBzXkgv-eKRxGysX.js";import"./main-CKPAMuMz.js";import"./jsonConverter-tsQ40CV0-1T66oZwl.js";import{i as ne,e as re}from"./SimpleGeometryCursor-DSF_YyIm-TAMgMsbK.js";import{A as oe}from"./Centroid-DZi-eb9F-Bn8_mFvc-Uq1oV1eG.js";import{v as A}from"./OperatorProximity-Gr4lvnCj-ErucKUUD.js";import{toPoint as U,getSpatialReference as I,fromGeometry as R}from"./apiConverter-CSuukuP9-D42Vbd50.js";import"./Transformation2D-CXWnDKXs-CjsleQQw.js";import"./OperatorDefinitions-DJdq_wrt-DP7_WWTp.js";class se{getOperatorType(){return 10203}accelerateGeometry(e,s,o){return!1}canAccelerateGeometry(e){return!1}supportsCurves(){return!0}executeMany(e,s){return new j(e,s)}execute(e,s){return new j(null,s).labelPoint(e)}}class j extends re{progress_(){}tock(){return!0}getRank(){return 1}constructor(e,s){super(),this.m_index=-1,this.m_progressCounter=0,this.m_progressTracker=s,this.m_inputGeoms=e}next(){const e=this.m_inputGeoms.next();return e?(F(e),this.m_index=this.m_inputGeoms.getGeometryID(),this.labelPoint(e)):null}getGeometryID(){return this.m_index}labelPoint(e){if(e===null&&V("null pointer is not allowed"),e.getGeometryType()===M.enumPoint)return e;if(e.isEmpty())return new w({vd:e.getDescription()});switch(e.getGeometryType()){case M.enumPolygon:return this.labelPointPolygon(e);case M.enumPolyline:return this.labelPointPolyline(e);case M.enumMultiPoint:return this.labelPointMultiPoint(e);case M.enumEnvelope:return this.labelPointEnvelope(e);default:V("geometry is not supported")}}labelPointPolygon(e){const s=new v;e.queryEnvelope(s);const o=K(null,s,!0).total();let l=null,r=e;if(e.hasNonLinearSegments()){const t=new W({copy:e}),m=ee(t,.25*o,o);G(m!==e),l=m,r=l}let u=0,d=0;for(let t=0,m=r.getPathCount();t<m;++t){const E=Math.abs(r.calculateRingArea2D(t));E>d&&(d=E,u=t)}const a=new y;if(Math.abs(d)<=2*o*o?a.setNAN():a.assign(oe(r,u)),Number.isNaN(a.x)){const t=new v;return r.queryPathEnvelope(u,t),new w({pt:t.getCenter()})}if(r.getPointCount()<4)return new w({x:a.x,y:a.y});const b=y.getNAN(),n=[b.clone(),b.clone(),b.clone(),b.clone()],N=[Number.NaN,Number.NaN,Number.NaN,Number.NaN],p=[Number.NaN,Number.NaN,Number.NaN,Number.NaN];let D=!1,x=new A().getNearestCoordinate(r,a,!0,!1);if(x.m_distance===0&&(D=!0,n[0]=a,x=new A().getNearestCoordinate(r,a,!1,!1),x.m_distance>.25*s.minDimension()*1.66666666))return new w({x:a.x,y:a.y});N[0]=x.m_distance,p[0]=0;const f=new y;let c=!1,i=.25,g=-1;const _=new v;r.queryPathEnvelope(u,_);do{let t=Number.NaN;if(n[1]=this.calculateParacentroid_(r,k(_.xmin,_.xmax,i),o),n[1].isNAN()||(x=new A().getNearestCoordinate(r,n[1],!1,!1),t=x.m_distance),t>o&&X(r,n[1],o)===1)c=!0,N[1]=t,p[1]=y.sqrDistance(n[1],a);else if(t>g&&(g=t,f.setCoordsPoint2D(n[1])),i-=.01,i<.1){if(!(g>=0))break;c=!0,N[1]=g,n[1]=f,p[1]=y.sqrDistance(n[1],a)}}while(!c);c=!1,i=.5,g=-1;let T=.01,Y=1;do{let t=Number.NaN;if(n[2]=this.calculateParacentroid_(r,k(_.xmin,_.xmax,i),o),n[2].isNAN()||(x=new A().getNearestCoordinate(r,n[2],!1,!1),t=x.m_distance),t>o&&X(r,n[2],o)===1)c=!0,N[2]=t,p[2]=y.sqrDistance(n[2],a);else if(t>g&&(g=t,f.setCoordsPoint2D(n[2])),i=.5+T*Y,T+=.01,Y*=-1,i<.3||i>.7){if(!(g>=0))break;c=!0,N[2]=g,n[2]=f,p[2]=y.sqrDistance(n[2],a)}}while(!c);c=!1,i=.75,g=-1;do{let t=Number.NaN;if(n[3]=this.calculateParacentroid_(r,k(_.xmin,_.xmax,i),o),n[3].isNAN()||(x=new A().getNearestCoordinate(r,n[3],!1,!1),t=x.m_distance),t>o&&X(r,n[3],o)===1)c=!0,N[3]=t,p[3]=y.sqrDistance(n[3],a);else if(t>g&&(g=t,f.setCoordsPoint2D(n[3])),i+=.01,i>.9){if(!(g>=0))break;c=!0,N[3]=g,n[3]=f,p[3]=y.sqrDistance(n[3],a)}}while(!c);const h=[0,1,2,3],S=D?0:1;for(let t=S;t<4;t++)for(let m=S;m<3;m++){const E=p[m],O=p[m+1];if(H(E,O)>0){const B=h[m];h[m]=h[m+1],h[m+1]=B,p[m]=O,p[m+1]=E}}let q=S,$=0,C=0;for(let t=S;t<4;t++){switch(t){case 0:C=2*N[h[t]];break;case 1:C=1.66666666*N[h[t]];break;case 2:C=1.33333333*N[h[t]];break;case 3:C=N[h[t]]}C>$&&($=C,q=h[t])}return G(!n[q].isNAN()),new w({x:n[q].x,y:n[q].y})}labelPointPolyline(e){const s=new y;if(e.getPointCount()>2*e.getPathCount()){let o=-1,l=-Number.MAX_VALUE;for(let a=0,b=e.getPathCount();a<b;a++)if(e.getPathSize(a)>2){const n=e.calculatePathLength2D(a);n>l&&(l=n,o=a)}const r=e.getPathStart(o),u=e.getPathEnd(o),d=Math.trunc((r+u)/2);s.assign(e.getXY(d))}else{let o=-Number.MAX_VALUE;const l=e.querySegmentIterator();for(;l.nextPath();)if(l.hasNextSegment()){const r=l.nextSegment(),u=r.calculateLength2D();u>o&&(o=u,s.assign(r.getCoord2D(r.lengthToT(.5*u))))}}return new w({x:s.x,y:s.y})}labelPointMultiPoint(e){const s=new v;e.queryEnvelope(s);const o=s.getCenter(),l=new A().getNearestCoordinate(e,o,!1,!1).m_coordinate;return new w({x:l.x,y:l.y})}labelPointEnvelope(e){const s=e.getCenterXY();return new w({x:s.x,y:s.y})}calculateParacentroid_(e,s,o){const l=new v;e.queryEnvelope(l);const r=new y(s,0);let u=Number.MAX_VALUE,d=Number.MAX_VALUE,a=!1,b=!1;const n=new te;n.setStartXYCoords(r.x,l.ymin-1),n.setEndXYCoords(r.x,l.ymax+1);const N=new v,p=new y,D=new y,x=J(y,2),f=e.querySegmentIterator();for(;f.nextPath();)for(;f.hasNextSegment();){const c=f.nextSegment();if(c.queryEnvelope(N),G(c.isMonotoneQuickAndDirty()),p.setCoordsPoint2D(n.getStartXY()),D.setCoordsPoint2D(n.getEndXY()),N.clipLine(p,D)===0||n.intersect(c,x,null,null,o)!==1)continue;const i=x[0].y;u>d?i<u&&(u=i,a=!0):i<d&&(d=i,b=!0)}return a&&b?r.y=(u+d)/2:r.setNAN(),r}}const L=new se;function ae(P){return L.execute(P,null)}function ie(P){const e=L.executeMany(new ne(P),null);return Array.from(e)}function le(){return L.supportsCurves()}function z(P){return U(ae(R(P)),I(P))}function Z(P){const e=P.map(R),s=I(P);return ie(e).map(o=>U(o,s))}const Q=le(),be=Object.freeze(Object.defineProperty({__proto__:null,execute:z,executeMany:Z,supportsCurves:Q},Symbol.toStringTag,{value:"Module"})),he=Object.freeze(Object.defineProperty({__proto__:null,execute:z,executeMany:Z,supportsCurves:Q},Symbol.toStringTag,{value:"Module"}));export{be as c,he as l};
