const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./geometryEngine-CdPoFSE4-oYwBbCAG.js","./main-CtABufGA.js","./main-BqT9ZjJ6.css","./geometryEngineBase-DueYg7ux-CCeespPx.js","./_commonjsHelpers-BITg13Vk-KnjfkSck.js","./hydrated-CplJC1Fs-CFTfuScV.js","./imageryUtils-6MVSqijr-8FXWHvzM.js","./utils-BVWK2jiA-CsDh80KY.js","./originUtils-BLsWtgV9-B4sclfuf.js","./multiOriginJSONSupportUtils-DGETddQl-BrWaY9_8.js","./PortalItem-CctGdnxF-aCgqvZ8N.js","./jsonContext-BA8GHqVk-5T7T-F5x.js","./portalItemUtils-B8bw6SAG-DFRRKHWT.js","./projection-BA9M1R7d-DjQPoeD7.js","./projectBuffer-CvCBvJ6W-B8XmSvu3.js","./saveUtils-CIYk-dsQ-C_B2tE_O.js"])))=>i.map(i=>d[i]);
import{v as w,S as b,i as K,aa as wt,bp as It,W as bt,aO as Ae,o as C,ah as Rt,a1 as ne,bL as vt,e as St,w as A,n as W,f as at,J as L,E as Tt,_ as ot,l as _t,bB as Ft,bz as kt,a0 as Ct,iF as lt,K as Ot,aS as Pt,O as Mt,a as Nt,aq as Me,fd as Dt,aG as Et,jz as Jt,ar as Bt,dc as At}from"./main-CtABufGA.js";import{m as Lt}from"./MultiOriginJSONSupport-DKRh9P6w-BbvIni52.js";import{D as Ht}from"./Layer-ChoECxvZ-DYJ3ZvKH.js";import{a as zt}from"./ArcGISService-BYA-y6X6-D1E-gmKg.js";import{u as Wt}from"./BlendLayer-D1WkSmwP-DsdpMhjK.js";import{i as Gt}from"./CustomParametersMixin-vdKsTHer-D97m9U9Q.js";import{J as $t,k as Ne,p as qt,A as Vt,l as jt,c as Ut,V as Yt,E as Kt,a as Xt,Z as Qt,b as je,I as Ue,T as Zt,v as ei,w as ti,C as ii,S as Ye,f as si}from"./RasterPresetRendererMixin-D6W9pUY6-CITyyJaJ.js";import{j as ct}from"./arcgisLayerUrl-HNYh8jvG-CVjcqCqP.js";import{Z as ut,_ as ri}from"./commonProperties-BtIqvFU_-DNzV3Gxx.js";import{R as ht,J as mt,Y as ni,I as ai,g as Le,j as Ke,p as oi,T as Xe,z as li}from"./multidimensionalUtils-BwTugeu7-BocZmcOq.js";import{V as ee,d as ci}from"./TileInfo-CWIRDhZl-3n9vBf6Q.js";import{V as ui,c as Re,W as ve,S as hi,d as He,s as ze,b as mi,u as fi,v as pi,A as di,D as yi,E as pe,F as gi,H as xi,N as wi,J as Ii,t as bi,L as Qe}from"./RasterSymbolizer-BVys6HkM-C3t3hcMw.js";import{K as Ze,U as et,V as tt,X as Ri,Q as vi}from"./RawBlockCache-Cj_tmHDm-BRMRW8nQ.js";import{f as Te,A as ft,M as Si,v as Ti,x as _i,b as Fi,k as ki,y as Ci,E as Oi,D as we,w as Pi,R as Mi,K as Ni}from"./dataUtils-BkPy4R3C-BQ8FOXPF.js";import{k as de,L as De,n as it,Q as st,X as Di,s as _e,o as Ie,K as Ei,Y as Ji,W as Bi,F as Ee}from"./rasterProjectionHelper-Calp0o_1-DVcovaFJ.js";import{k as Ai}from"./QueueProcessor-DbfV9fLy-DSsbfVbu.js";import{D as Li,h as pt,E as Je,v as We,x as Hi,B as zi}from"./PolynomialTransform-C3nWCu0l-BUnxlQpP.js";import{O as Ge}from"./FeatureSet-BkVNthuN-DclGTs__.js";import{E as Wi}from"./OperationalLayer-B5IXiMa2-aDN-hRRM.js";import{C as Gi}from"./PortalLayer-CElnYuSQ-CXVmKL9I.js";import{T as $i}from"./RefreshableLayer-a8BQ58Xh-7y6DqJXW.js";import{S as qi}from"./ScaleRangeLayer-Bz0DcnvM-DzqZS_Kc.js";import{x as Vi}from"./TemporalLayer-CpOrN_w9-D6aOEDlH.js";import{y as ce}from"./Field-C6hA1tZj-Qmieq0Np.js";import{f as ji}from"./TilemapCache-CRRxws77-Ccbz2VR7.js";import{w as Ui}from"./popupUtils-B0uZcXX0-CgsvyTpv.js";import{E as ye}from"./interfaces-Cwm0pihk-Ptzy6gTd.js";import"./TimeExtent-Cn0Jofqr-CcQUixHZ.js";import"./jsonUtils-wIllKWI4-CDK81nMH.js";import"./parser-DyDJ-rlI-F1bmHddB.js";import"./mat4f32-CiZjBg9k-CUm34GoR.js";import"./mat4-DX7gBViE-CKfrYlqh.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./workers-PiCjreoO-BOzUKgZP.js";import"./UniqueValueRenderer-fS5V0Ej1-Cj__VOTX.js";import"./RendererLegendOptions-K3md58-X-C7NZWcaf.js";import"./diffUtils-Cz3Fi8Xb-Homdp6Bv.js";import"./colorRamps-q0bZVhs2-o__tBH0D.js";import"./sizeVariableUtils-t52KcLLi-D0hbQF8b.js";import"./visualVariableUtils-D3kZJRyn-CTTKZ6ka.js";import"./compilerUtils-CV1QYWI8-HXJyj6UP.js";import"./lengthUtils-DKpMe5qR-oQnE3hm3.js";import"./styleUtils-BtpNqZyT-itgPKNsh.js";import"./ClassBreaksDefinition-bYRgYgPp-Dl-0yERj.js";import"./utils-9sQxfkoa-2SGMvjtw.js";import"./normalizeUtils-Bxmy9MNI-CwgO4ema.js";import"./normalizeUtilsCommon-CRJlkfEA-Djc6zLe0.js";import"./utils-Bq23Xwmj-CUXNDMVS.js";import"./utils-DPtQ14k3-ZFH8-pRT.js";import"./cimSymbolUtils-CKIzBgMU-CgMJpNoG.js";import"./utils-SPbpQbmm-BC2K68TU.js";import"./enums-CpSG_SL3-BMD3Tb1v.js";import"./LRUCache-C3erQTWv-DH6l5CUb.js";import"./ElevationInfo-yv2-9tj6-1ONk9jVZ.js";import"./TileKey-B_6qmYK--BtZdR-Xy.js";import"./_commonjsHelpers-BITg13Vk-KnjfkSck.js";import"./colorUtils-Cthpxcks-D5zmdJUc.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./vec4f64-hf2nxvhQ-CaAr8PTM.js";import"./projection-BA9M1R7d-DjQPoeD7.js";import"./projectBuffer-CvCBvJ6W-B8XmSvu3.js";import"./ReactiveMap-CFk6jPfN-CyPMJDyM.js";import"./signal-CETehA7D-D-Grqjw0.js";import"./PortalItem-CctGdnxF-aCgqvZ8N.js";import"./portalItemUtils-B8bw6SAG-DFRRKHWT.js";import"./TimeInfo-w_HB2CsF-rXZY_RsJ.js";import"./fieldType-CD2CL2hr-BVMOLq4b.js";import"./ByteSizeUnit-DL8UhsB0-B2-AmVRx.js";const rt=8,Yi=256;let Ki=0,J=class extends St{constructor(){super(...arguments),this._tileFetchQueue=new Ai({concurrency:32,process:(t,e)=>this._fetchRawTile(t.pyramidLevel,t.row,t.col,{...t.options,signal:e})}),this.datasetName=null,this.datasetFormat=null,this.hasUniqueSourceStorageInfo=!0,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}normalizeCtorArgs(t){return t?.ioConfig&&(t={...t,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:ee.create(),...t.ioConfig}}),t}get _isGlobalWrappableSource(){const{rasterInfo:t}=this,e=de(t.spatialReference);return e!=null&&t.extent.width>=e/2}get _hasNoneOrGCSShiftTransform(){const{transform:t}=this.rasterInfo;return t==null||t.type==="gcs-shift"}set rasterJobHandler(t){this._set("rasterJobHandler",t),this.datasetFormat==="Function"&&this.primaryRasters?.rasters?.forEach(e=>e.rasterJobHandler=t)}get rasterId(){return this.url||"rasterId-"+Ki++}set url(t){this._set("url",ct(t,ne.getLogger(this)))}async open(t){return this._openPromise??=De().then(()=>this._open(t)),this._openPromise}async fetchTile(t,e,r,i={}){const s=i.tileInfo||this.rasterInfo.storageInfo.tileInfo,a=this.getTileExtentFromTileInfo(t,e,r,s);return i={noClip:!0,...i},this.fetchPixels(a,s.size[0],s.size[1],i)}async identify(t,e={}){t=Ae(A,t).clone().normalize();const{multidimensionalDefinition:r,timeExtent:i}=e,{rasterInfo:s}=this,{hasMultidimensionalTranspose:a,multidimensionalInfo:n}=s;let{transposedVariableName:l}=e;const o=n!=null&&a&&(i!=null||ht(r));o&&!l&&(l=r!=null&&r.length>0?r[0].variableName??void 0:n.variables[0].name,e={...e,transposedVariableName:l}),e=this._getRequestOptionsWithSliceId(e);const{spatialReference:c,extent:u}=s,{datumTransformation:f}=e;let h=it(t,c,f);if(!u.intersects(h))return{location:h,value:null};if(s.transform!=null){const F=s.transform.inverseTransform(h);if(!s.nativeExtent.intersects(F))return{location:F,value:null};h=F}let m=0;const y=l!=null&&n!=null&&s.hasMultidimensionalTranspose;if(this.datasetFormat==="Function"){const F=this.primaryRasters.rasters[0];if(y)return F.identify(h,e);const{pixelSize:M}=s,O=3,N=M.x*O/2,D=M.y*O/2,B=new W({xmin:h.x-N,xmax:h.x+N,ymin:h.y-D,ymax:h.y+D,spatialReference:c}),z={interpolation:"nearest",multidimensionalDefinition:r,sliceId:e.sliceId},{pixelBlock:j}=await F.fetchPixels(B,O,O,z),{pixelBlock:G}=await this.fetchPixels(B,O,O,z);if(j==null)return{location:h,value:null};const $=Math.floor(O*O*.5),X=!j.mask||j.mask[$]?j.pixels.map(V=>V[$]):null;let te;return G!=null&&(te=!G.mask||G.mask[$]?G.pixels.map(V=>V[$]):void 0),{location:h,value:X,processedValue:te,pyramidLevel:0}}if(!y){if(e.srcResolution)m=st(e.srcResolution,s,this.ioConfig.sampling).pyramidLevel;else if(m=await this.computeBestPyramidLevelForLocation(t,e),m==null)return{location:h,value:null}}const g=this.identifyPixelLocation(h,m,null,y);if(g===null)return{location:h,value:null};const{row:p,col:d,rowOffset:x,colOffset:I,blockWidth:R}=g,S=l??e.sliceId,T=Ze(this.rasterId,S),v=`${m}/${p}/${d}`;let k=et(T,null,v);k==null&&(k=this.fetchRawTile(m,p,d,e),tt(T,null,v,k));const _=await k;if(!_?.pixels?.length)return{location:h,value:null};const P=x*R+I;return this._processIdentifyResult(_,{srcLocation:h,position:P,pyramidLevel:m,useTransposedTile:!!y,requestSomeSlices:o,identifyOptions:e})}async fetchPixels(t,e,r,i={}){t=Di(t),i=this._getRequestOptionsWithSliceId(i);const{_hasNoneOrGCSShiftTransform:s}=this;if(i.requestRawData&&s)return this._fetchPixels(t,e,r,i);const a=de(t.spatialReference),n=_e(t);if(a==null||n===0||n===1&&this._isGlobalWrappableSource&&s)return this._fetchPixels(t,e,r,i);if(n>=3)return{extent:t,pixelBlock:null};const l=[],{xmin:o,xmax:c}=t,u=Math.round(a/(c-o)*e),f=u-Math.round((a/2-o)/(c-o)*e);let h=0;const m=[];for(let d=0;d<=n;d++){const x=new W({xmin:d===0?o:-a/2,xmax:d===n?c-a*d:a/2,ymin:t.ymin,ymax:t.ymax,spatialReference:t.spatialReference}),I=d===0?u-f:d===n?e-h:u;h+=I,m.push(I);const R=i.disableWrapAround&&d>0?null:this._fetchPixels(x,I,r,i);l.push(R)}const y=(await Promise.all(l)).map(d=>d?.pixelBlock);let g=null;const p={width:e,height:r};return this.rasterJobHandler?g=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:y,srcMosaicSize:p,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:m},i)).pixelBlock:g=Te(y,p,{blockWidths:m}),{extent:t,srcExtent:Ie(t,this.rasterInfo.spatialReference,i.datumTransformation),pixelBlock:g}}async fetchRawPixels(t,e,r,i={}){e={x:Math.floor(e.x),y:Math.floor(e.y)};const s=await this._fetchRawTiles(t,e,r,i),{nativeExtent:a,nativePixelSize:n,storageInfo:l}=this.rasterInfo,o=2**t,c=n.x*o,u=n.y*o,f=new W({xmin:a.xmin+c*e.x,xmax:a.xmin+c*(e.x+r.width-1),ymin:a.ymax-u*(e.y+r.height-1),ymax:a.ymax-u*e.y,spatialReference:a.spatialReference});if(!s)return{extent:f,srcExtent:f,pixelBlock:null};const{pixelBlocks:h,mosaicSize:m}=s;if(h.length===1&&h[0]!=null&&h[0].width===r.width&&h[0].height===r.height)return{extent:f,srcExtent:f,pixelBlock:s.pixelBlocks[0]};const y=t>0?l.pyramidBlockWidth:l.blockWidth,g=t>0?l.pyramidBlockHeight:l.blockHeight,p={x:e.x%y,y:e.y%g};let d;return this.rasterJobHandler?d=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:h,srcMosaicSize:m,destDimension:r,clipOffset:p,clipSize:r,coefs:null,sampleSpacing:null,interpolation:i.interpolation,alignmentInfo:null,blockWidths:null},i)).pixelBlock:d=Te(h,m,{clipOffset:p,clipSize:r}),{extent:f,srcExtent:f,pixelBlock:d}}fetchRawTile(t,e,r,i){throw new C("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(t){return Ie(this.rasterInfo.extent,t)}decodePixelBlock(t,e){return!this.rasterJobHandler||e.useCanvas?ui(t,e):this.rasterJobHandler.decode({data:t,options:e})}async request(t,e,r=0){const{customFetchParameters:i}=this.ioConfig,{range:s,query:a,headers:n}=e;r=r??e.retryCount??this.ioConfig.retryCount;const l=s?{Range:`bytes=${s.from}-${s.to}`}:null;try{return await at(t,{...e,query:{...a,...i},headers:{...n,...l}})}catch(o){if(r>0)return r--,this.request(t,e,r);throw o}}getSliceIndex(t){const{multidimensionalInfo:e}=this.rasterInfo;return e==null||t==null||t.length===0?null:mt(t,e)}getTileExtentFromTileInfo(t,e,r,i){const s=i.lodAt(t);return this.getTileExtent({x:s.resolution,y:s.resolution},e,r,i.origin,i.spatialReference,i.size)}updateTileInfo(){const{storageInfo:t,spatialReference:e,extent:r,pixelSize:i}=this.rasterInfo,{pyramidResolutions:s}=t;if(!t.tileInfo){const a=[],n=t.maximumPyramidLevel||0;let l=(i.x+i.y)/2,o=1/.0254*96*l;for(let u=0;u<=n&&(a.unshift(new ci({level:n-u,resolution:l,scale:o})),u!==n);u++)if(s){const f=(s[u].x+s[u].y)/2;o*=f/l,l=f}else l*=2,o*=2;const c=new A({x:r.xmin,y:r.ymax,spatialReference:e});t.tileInfo=new ee({origin:c,size:[t.blockWidth,t.blockHeight],spatialReference:e,lods:a}),t.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(t,e=512,r=512,i){const{width:s,height:a,nativeExtent:n,pixelSize:l,spatialReference:o}=t,c=new A({x:n.xmin,y:n.ymax,spatialReference:o});i==null&&(i=Math.max(0,Math.round(Math.log(Math.max(s,a))/Math.LN2-8)));const u=this.computeBlockBoundary(n,512,512,{x:n.xmin,y:n.ymax},[l],i);t.storageInfo=new Re({blockWidth:e,blockHeight:r,pyramidBlockWidth:e,pyramidBlockHeight:r,origin:c,firstPyramidLevel:1,maximumPyramidLevel:i,blockBoundary:u})}async computeBestPyramidLevelForLocation(t,e={}){return 0}computeBlockBoundary(t,e,r,i,s,a=0,n=2){if(s.length===1&&a>0){s=[...s];let{x:u,y:f}=s[0];for(let h=0;h<a;h++)u*=n,f*=n,s.push({x:u,y:f})}const l=[],{x:o,y:c}=i;for(let u=0;u<s.length;u++){const{x:f,y:h}=s[u];l.push({minCol:Math.floor((t.xmin-o+.1*f)/e/f),maxCol:Math.floor((t.xmax-o-.1*f)/e/f),minRow:Math.floor((c-t.ymax+.1*h)/r/h),maxRow:Math.floor((c-t.ymin-.1*h)/r/h)})}return l}getPyramidPixelSize(t){const{nativePixelSize:e}=this.rasterInfo,{pyramidResolutions:r,pyramidScalingFactor:i}=this.rasterInfo.storageInfo;if(t===0)return e;if(r!=null&&r.length)return r[t-1];const s=i**t;return{x:e.x*s,y:e.y*s}}identifyPixelLocation(t,e,r,i){const{spatialReference:s,nativeExtent:a,storageInfo:n}=this.rasterInfo,{maximumPyramidLevel:l,origin:o,transposeInfo:c}=n,u=i&&c!=null?c.tileSize[0]:n.blockWidth,f=i&&c!=null?c.tileSize[1]:n.blockHeight,h=it(t,s,r);if(!a.intersects(h)||e<0||e>l)return null;const m=this.getPyramidPixelSize(e),{x:y,y:g}=m,p=(o.y-h.y)/g/f,d=(h.x-o.x)/y/u,x=Math.min(f-1,Math.floor((p-Math.floor(p))*f)),I=Math.min(u-1,Math.floor((d-Math.floor(d))*u));return{pyramidLevel:e,row:Math.floor(p),col:Math.floor(d),rowOffset:x,colOffset:I,blockWidth:u,srcLocation:h}}getTileExtent(t,e,r,i,s,a){const[n,l]=a,o=i.x+r*n*t.x,c=o+n*t.x,u=i.y-e*l*t.y,f=u-l*t.y;return new W({xmin:o,xmax:c,ymin:f,ymax:u,spatialReference:s})}getBlockWidthHeight(t){return{blockWidth:t>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:t>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(t,e,r){const i=this.rasterInfo.storageInfo.blockBoundary[t];return!i||i.maxRow<e||i.maxCol<r||i.minRow>e||i.minCol>r}updateImageSpaceRasterInfo(t){const{pixelSize:e}=t,{width:r,height:i}=t,s=L.WebMercator;t.spatialReference=s,t.extent=t.nativeExtent=new W({xmin:-.5,ymax:.5,xmax:r-.5,ymin:.5-i,spatialReference:s}),t.isPseudoSpatialReference=!0,t.transform=null,t.pixelSize=new A({x:1,y:1,spatialReference:s});const{extent:a,storageInfo:n}=t;if(n){n.origin=new A({x:a.xmin,y:a.ymax,spatialReference:s});const{pyramidResolutions:l,tileInfo:o}=n;if(l&&l.forEach(c=>{c.x/=e.x,c.y/=e.y}),o){o.origin=n.origin;const c=(t.nativePixelSize.x+t.nativePixelSize.y)/2;o.lods.forEach((u,f)=>{u.resolution=c*2**f,u.scale=96*u.resolution/.0254})}}}async _fetchPixels(t,e,r,i={}){let s=_e(t);if(s>=2)return{extent:t,pixelBlock:null};const a=this._getSourceDataInfo(t,e,r,i),{pyramidLevel:n,srcResolution:l,srcExtent:o,srcWidth:c,srcHeight:u,ul:f}=a;if(c===0||u===0)return{extent:t,srcExtent:o,pixelBlock:null};const{rasterInfo:h}=this,m=h.transform,y=m?.type==="gcs-shift",g=de(t.spatialReference)!=null;!y&&g||(s=_e(a.srcExtent,y));const p=await this._fetchRawTiles(n,f,{width:c,height:u,wrapCount:s},i);if(!p)return{extent:t,srcExtent:o,pixelBlock:null};const d=h.storageInfo,x=n>0?d.pyramidBlockWidth:d.blockWidth,I=n>0?d.pyramidBlockHeight:d.blockHeight;let{x:R,y:S}=h.pixelSize;if(n>0){const{pyramidResolutions:Q,pyramidScalingFactor:xt}=d;if(Q!=null&&Q[n-1])({x:R,y:S}=Q[n-1]);else{const Ve=xt**n;R*=Ve,S*=Ve}}const T=h.spatialReference,v=new A({x:R,y:S,spatialReference:T}),k=x===c&&I===u&&f.x%x==0&&f.y%I==0,_=new A({x:(t.xmax-t.xmin)/e,y:(t.ymax-t.ymin)/r,spatialReference:t.spatialReference}),P=!t.spatialReference.equals(T),F=T.isGeographic?1e-9:1e-4,{datumTransformation:M}=i;if(!P&&k&&p.pixelBlocks.length===1&&x===e&&I===r&&Xi(l,_,F))return{extent:t,srcExtent:o,srcTilePixelSize:v,pixelBlock:p.pixelBlocks[0]};const O=g&&de(o.spatialReference)!=null&&this._hasNoneOrGCSShiftTransform,N=i.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");N&&!this.rasterJobHandler&&await De();const D=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:t,srcBufferExtent:p.extent,pixelSize:_.toJSON(),datumTransformation:M,rasterTransform:m,hasWrapAround:s>0||O,isAdaptive:this.ioConfig.optimizeProjectionAccuracy!==!1,includeGCSGrid:N},i):Ei({projectedExtent:t,srcBufferExtent:p.extent,pixelSize:_,datumTransformation:M,rasterTransform:m,hasWrapAround:s>0||O,isAdaptive:!1,includeGCSGrid:N});let B;const z=!i.requestRawData,j={rows:D.spacing[0],cols:D.spacing[1]},G=this._hasNoneOrGCSShiftTransform?this._getRasterTileAlignmentInfo(n,p.extent.xmin):void 0,{pixelBlocks:$,mosaicSize:X,isPartiallyFilled:te}=p;let V=null;if(this.rasterJobHandler)({pixelBlock:B,localNorthDirections:V}=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:$,srcMosaicSize:X,destDimension:z?{width:e,height:r}:null,coefs:z?D.coefficients:null,sampleSpacing:z?j:null,projectDirections:N,gcsGrid:N?D.gcsGrid:null,isUV:this.rasterInfo.dataType==="vector-uv",interpolation:i.interpolation,alignmentInfo:G,blockWidths:null},i));else{const Q=Te($,X,{alignmentInfo:G});B=z?ft(Q,{width:e,height:r},D.coefficients,j,i.interpolation):Q,N&&D.gcsGrid&&(V=Si({width:e,height:r},D.gcsGrid),B=Ti(B,this.rasterInfo.dataType,V))}return i.requestRawData||N?{extent:t,srcExtent:o,srcTilePixelSize:v,pixelBlock:B,transformGrid:D,localNorthDirections:V,isPartiallyFilled:te}:{extent:t,srcExtent:o,srcTilePixelSize:v,pixelBlock:B}}async _fetchRawTiles(t,e,r,i){const{origin:s,blockBoundary:a}=this.rasterInfo.storageInfo,{blockWidth:n,blockHeight:l}=this.getBlockWidthHeight(t);let{x:o,y:c}=e,{width:u,height:f,wrapCount:h}=r;const m=this._getRasterTileAlignmentInfo(t,0);i.buffer&&(o-=i.buffer.cols,c-=i.buffer.rows,u+=2*i.buffer.cols,f+=2*i.buffer.rows);let y=0,g=0,p=0;h&&m!=null&&({worldColumnCountFromOrigin:g,originColumnOffset:p,rightPadding:y}=m,g*m.blockWidth-y>=o+u&&(y=0));const d=Math.floor(o/n),x=Math.floor(c/l),I=Math.floor((o+u+y-1)/n),R=Math.floor((c+f+y-1)/l),S=a[t];if(!S)return null;const{minRow:T,minCol:v,maxCol:k,maxRow:_}=S;if(h===0&&(R<T||I<v||x>_||d>k))return null;const P=new Array;let F=!1;const M=this.ioConfig.allowPartialFill==null?i.allowPartialFill:this.ioConfig.allowPartialFill;for(let G=x;G<=R;G++)for(let $=d;$<=I;$++){let X=$;if(!i.disableWrapAround&&h&&m!=null&&g<=$&&(X=$-g-p),G>=T&&X>=v&&_>=G&&k>=X){const te=this._tileFetchQueue.push({pyramidLevel:t,row:G,col:X,options:i},{signal:i.signal});M?P.push(new Promise(V=>{te.then(Q=>V(Q)).catch(()=>{F=!0,V(null)})})):P.push(te)}else P.push(Promise.resolve(null))}if(P.length===0)return null;const O=await Promise.all(P),N={height:(R-x+1)*l,width:(I-d+1)*n},{spatialReference:D}=this.rasterInfo,B=this.getPyramidPixelSize(t),{x:z,y:j}=B;return{extent:new W({xmin:s.x+d*n*z,xmax:s.x+(I+1)*n*z,ymin:s.y-(R+1)*l*j,ymax:s.y-x*l*j,spatialReference:D}),pixelBlocks:O,mosaicSize:N,isPartiallyFilled:F}}_fetchRawTile(t,e,r,i){const s=this.rasterInfo.storageInfo.blockBoundary[t];if(!s)return Promise.resolve(null);const{minRow:a,minCol:n,maxCol:l,maxRow:o}=s;if(e<a||r<n||e>o||r>l)return Promise.resolve(null);const c=Ze(this.rasterId,i.sliceId),u=`${t}/${e}/${r}`;let f=et(c,i.registryId,u);if(f==null){const h=new AbortController;f=this.fetchRawTile(t,e,r,{...i,signal:h.signal}),tt(c,i.registryId,u,f,h),f.catch(()=>Ri(c,i.registryId,u))}return i.signal&&Tt(i,()=>{vi(c,i.registryId,u)}),f}_computeMagDirValues(t){const{bandCount:e,dataType:r}=this.rasterInfo;if(!(e===2&&r==="vector-magdir"||r==="vector-uv")||t?.length!==2||!t[0]?.length)return null;const i=t[0].length;if(r==="vector-magdir"){const o=t[1].map(c=>(c+360)%360);return[t[0],o]}const[s,a]=t,n=[],l=[];for(let o=0;o<i;o++){const[c,u]=_i([s[o],a[o]]);n.push(c),l.push(u)}return[n,l]}_getRasterTileAlignmentInfo(t,e){return this._rasterTileAlignmentInfo==null&&(this._rasterTileAlignmentInfo=Ji(this.rasterInfo)),this._rasterTileAlignmentInfo.pyramidsInfo==null?null:{startX:e,halfWorldWidth:this._rasterTileAlignmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlignmentInfo.hasGCSSShiftTransform,...this._rasterTileAlignmentInfo.pyramidsInfo[t]}}_getSourceDataInfo(t,e,r,i={}){const s={datumTransformation:i.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0,ul:{x:0,y:0}};i.srcResolution&&(s.srcResolution=i.srcResolution,this._updateSourceDataInfo(t,s));const a=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:n,srcHeight:l,pyramidLevel:o}=s,c=n/e,u=l/r,f=o<a&&c*u>=16,h=o===a&&this._requireTooManySrcTiles(n,l,e,r);if(f||h||n===0||l===0){const m=new A({x:(t.xmax-t.xmin)/e,y:(t.ymax-t.ymin)/r,spatialReference:t.spatialReference});let y=Bi(m,this.rasterInfo.spatialReference,t,s.datumTransformation);const g=!y||i.srcResolution&&y.x+y.y<i.srcResolution.x+i.srcResolution.y;if(f&&i.srcResolution&&g){const p=Math.round(Math.log(Math.max(c,u))/Math.LN2)-1;if(a-o+3>=p){const d=2**p;y={x:i.srcResolution.x*d,y:i.srcResolution.y*d}}}y&&(s.srcResolution=y,this._updateSourceDataInfo(t,s))}return this._requireTooManySrcTiles(s.srcWidth,s.srcHeight,e,r)&&(s.srcWidth=0,s.srcHeight=0),s}_requireTooManySrcTiles(t,e,r,i){const{tileInfo:s}=this.rasterInfo.storageInfo,a=Math.ceil(t/s.size[0])*Math.ceil(e/s.size[1]),n=t/r,l=e/i,o=Math.max(1,(r+i)/1024);return a>=Yi*o||n>rt||l>rt}_updateSourceDataInfo(t,e){e.srcWidth=0,e.srcHeight=0;const{rasterInfo:r}=this,i=r.spatialReference,{srcResolution:s,datumTransformation:a}=e,{pyramidLevel:n,pyramidResolution:l,excessiveReading:o}=st(s,r,this.ioConfig.sampling);if(o)return;let c=e.srcExtent||Ie(t,i,a);if(c==null)return;const u=r.transform;u&&(c=u.inverseTransform(c)),e.srcExtent=c;const{x:f,y:h}=r.storageInfo.origin,m=Math.floor((c.xmin-f)/l.x+.1),y=Math.floor((h-c.ymax)/l.y+.1),g=Math.floor((c.xmax-f)/l.x-.1),p=Math.floor((h-c.ymin)/l.y-.1),d=c.width<.1*l.x?0:g-m+1,x=c.height<.1*l.y?0:p-y+1;e.pyramidLevel=n,e.pyramidResolution=l,e.srcWidth=d,e.srcHeight=x,e.ul={x:m,y}}_getRequestOptionsWithSliceId(t){return this.rasterInfo.multidimensionalInfo!=null&&t.sliceId==null&&(t={...t,sliceId:this.getSliceIndex(t.multidimensionalDefinition)}),t}_processIdentifyResult(t,e){const{srcLocation:r,position:i,pyramidLevel:s,useTransposedTile:a}=e,n=t.pixels[0].length/t.width/t.height;if(!(!t.mask||t.mask[i]))return{location:r,value:null};const{multidimensionalInfo:l}=this.rasterInfo;if(l==null||!a){const p=t.pixels.map(I=>I[i]),d={location:r,value:p,pyramidLevel:s},x=this._computeMagDirValues(p.map(I=>[I]));return x?.length&&(d.magdirValue=x.map(I=>I[0])),d}let o=t.pixels.map(p=>p.slice(i*n,i*n+n)),c=this._computeMagDirValues(o);const{requestSomeSlices:u,identifyOptions:f}=e;let h=ni(l,f.transposedVariableName);if(u){const p=ai(h,f.multidimensionalDefinition,f.timeExtent);o=o.map(d=>p.map(x=>d[x])),c=c?.map(d=>p.map(x=>d[x])),h=p.map(d=>h[d])}const m=t.noDataValues||this.rasterInfo.noDataValue,y={pixels:o,pixelType:t.pixelType};let g;return m!=null&&(Fi(y,m),g=y.mask),{location:r,value:null,dataSeries:h.map((p,d)=>{const x={value:g?.[d]===0?null:o.map(I=>I[d]),multidimensionalDefinition:p.multidimensionalDefinition.map(I=>new Le({...I,isSlice:!0}))};return c?.length&&(x.magdirValue=[c[0][d],c[1][d]]),x}),pyramidLevel:s}}};function Xi(t,e,r){return Math.abs(t.x-e.x)<r&&Math.abs(t.y-e.y)<r}w([b()],J.prototype,"_rasterTileAlignmentInfo",void 0),w([b()],J.prototype,"_tileFetchQueue",void 0),w([b({readOnly:!0})],J.prototype,"_isGlobalWrappableSource",null),w([b({readOnly:!0})],J.prototype,"_hasNoneOrGCSShiftTransform",null),w([b()],J.prototype,"_openPromise",void 0),w([b()],J.prototype,"rasterJobHandler",null),w([b({readOnly:!0})],J.prototype,"rasterId",null),w([b(ut)],J.prototype,"url",null),w([b({type:String,json:{write:!0}})],J.prototype,"datasetName",void 0),w([b({type:String,json:{write:!0}})],J.prototype,"datasetFormat",void 0),w([b()],J.prototype,"hasUniqueSourceStorageInfo",void 0),w([b()],J.prototype,"rasterInfo",void 0),w([b()],J.prototype,"ioConfig",void 0),w([b()],J.prototype,"sourceJSON",void 0),J=w([K("esri.layers.support.rasterDatasets.BaseRaster")],J);const ae=J,Qi=40;let ie=class extends ae{constructor(){super(...arguments),this.datasetFormat="Function",this.tileType="Raster",this.rasterFunction=null,this._clippingGeometry=new Map}async fetchPixels(t,e,r,i={}){const{rasters:s,rasterIds:a}=this.primaryRasters;let n=!1;const{interpolation:l}=i,o=this.rasterFunction.flatWebGLFunctionChain?.hasFocalFunction;!i.requestRawData&&o&&(n=s.length===1&&!i.skipRasterFunction,i={...i,interpolation:"bilinear",requestRawData:n});const c=s.map(I=>I.fetchPixels(t,e,r,i)),u=await Promise.all(c),f=u.map(I=>I.pixelBlock),h=n||i.requestRawData?u.map(I=>I.srcTilePixelSize):null;if(i.skipRasterFunction||f.every(I=>I==null))return u[0];const m=u.find(I=>I.pixelBlock!=null)?.extent??t;let y=this.rasterJobHandler?await this.rasterJobHandler.process({extent:m,primaryPixelBlocks:f,primaryPixelSizes:h,primaryRasterIds:a}):this.rasterFunction.process({extent:m,primaryPixelBlocks:f,primaryPixelSizes:h,primaryRasterIds:a});const{transformGrid:g}=u[0];if(!n||y==null||g==null){const I=i.noClip?null:this.getClippingGeometry(m.spatialReference);return i.noClip||i.requestRawData||y==null||!I||(y=await Je(y,m,I)),{...u[0],pixelBlock:y}}const p={rows:g.spacing[0],cols:g.spacing[1]};let d;this.rasterJobHandler?d=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:[y],srcMosaicSize:{width:y.width,height:y.height},destDimension:{width:e,height:r},coefs:g.coefficients,sampleSpacing:p,projectDirections:!1,gcsGrid:null,isUV:!1,interpolation:l,alignmentInfo:void 0,blockWidths:null},i)).pixelBlock:d=ft(y,{width:e,height:r},g.coefficients,p,l);const x=i.noClip?null:this.getClippingGeometry(t.spatialReference);return i.noClip||i.requestRawData||d==null||x==null||(d=await Je(d,t,x)),{extent:t,srcExtent:u[0].srcExtent,pixelBlock:d}}getClippingGeometry(t){const e=this._clippingGeometry.get("0");if(!t||!e)return e;const r=es(t);let i=this._clippingGeometry.get(r);return i!=null||(i=t.equals(e.spatialReference)?e:Ee(e,t),this._clippingGeometry.set(r,i)),i}async _open(t){const{rasterFunction:e}=this;this.primaryRasters?.rasters?.length?e.sourceRasters=this.primaryRasters.rasters:(this.primaryRasters=e.getPrimaryRasters(),this.rasterJobHandler&&this.primaryRasters.rasters?.forEach(c=>c.rasterJobHandler=this.rasterJobHandler));const{rasters:r,rasterIds:i}=this.primaryRasters,s=r.map(c=>c.rasterInfo?void 0:c.open(t));await Promise.all(s);const a=r.map(({rasterInfo:c})=>c),n=e.bind({rasterInfos:a,rasterIds:i});if(e.rawSourceRasterInfos=a,!n.success||a.length===0)throw new C("raster-function:open",`cannot bind the function: ${n.error??""}`);const l=e.functionName==="Table"?e:e.functionArguments?.raster;l?.functionName==="Table"&&(e.rasterInfo.attributeTable=Ge.fromJSON(l.functionArguments.attributeTableAsRecordSet)),await this.syncJobHandler();const o=a[0];this.hasUniqueSourceStorageInfo=a.length===1||a.slice(1).every(c=>Zi(c,o)),this.set("sourceJSON",r[0].sourceJSON),this.set("rasterInfo",e.rasterInfo),await this._updateClipGeometry()}async syncJobHandler(){return this.rasterJobHandler?.updateRasterFunction(this.rasterFunction)}async _updateClipGeometry(){const t=this.rasterFunction.getClippingGeometries()[0];let e=t?.clippingGeometry;if(e&&t.clippingType==="inside"){const{extent:r}=this.rasterInfo,{difference:i,densify:s}=await ot(async()=>{const{difference:n,densify:l}=await import("./geometryEngine-CdPoFSE4-oYwBbCAG.js");return{difference:n,densify:l}},__vite__mapDeps([0,1,2,3,4,5]),import.meta.url);let a=s(_t.fromExtent(r),2*(r.width+r.height)/Qi);a=Ee(a,e.spatialReference),e=i(a,e)}this._clippingGeometry.clear(),e&&this._clippingGeometry.set("0",e)}};w([b({type:String,json:{write:!0}})],ie.prototype,"datasetFormat",void 0),w([b()],ie.prototype,"tileType",void 0),w([b()],ie.prototype,"rasterFunction",void 0),w([b()],ie.prototype,"primaryRasters",void 0),ie=w([K("esri.layers.support.rasterDatasets.FunctionRaster")],ie);const dt=ie;function Zi(t,e){const{storageInfo:r,pixelSize:i,spatialReference:s,extent:a}=t,{storageInfo:n,pixelSize:l,spatialReference:o,extent:c}=e;return i.x===l.x&&i.y===l.y&&s.equals(o)&&a.equals(c)&&r.blockHeight===n.blockHeight&&r.blockWidth===n.blockWidth&&r.maximumPyramidLevel===n.maximumPyramidLevel}function es(t){return String(t.wkid??t.wkt??t.wkt2)}const ts=t=>{let e=class extends t{constructor(...i){super(...i),this._isConstructedFromFunctionRaster=!1,this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation=null,this.multidimensionalSubset=null,this.raster=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.symbolizer=null,this._isConstructedFromFunctionRaster=i[0]?.raster?.datasetFormat==="Function"}get fullExtent(){return this.serviceRasterInfo?.extent}set multidimensionalDefinition(i){this._set("multidimensionalDefinition",i),this.updateRenderer()}set rasterFunction(i){i?.functionName?.toLowerCase()==="none"&&(i=void 0),this._set("rasterFunction",i),this.updateRasterFunction()}get rasterInfo(){return Dt(ne.getLogger(this),"rasterInfo",{replacement:"serviceRasterInfo",version:"4.29",warnOnce:!0}),this._get("serviceRasterInfo")}set url(i){this._set("url",ct(i,ne.getLogger(this)))}get renderer(){if(this.type!=="imagery-tile")return this.internalRenderer;const{activePresetRendererName:i,presetRenderers:s}=this;return i?s?.find(({name:a})=>a===i)?.renderer.clone():this.internalRenderer}set renderer(i){this.type==="imagery-tile"&&(this.activePresetRendererName=null),this.internalRenderer=i}set internalRenderer(i){i==null&&this.rasterFunction==null?this._configDefaultRenderer("override"):(this._set("internalRenderer",i),this.updateRenderer())}readRenderer(i,s,a){const n=s?.layerDefinition?.drawingInfo?.renderer;return Xt(n,a)||void 0}async convertVectorFieldData(i,s){const{serviceRasterInfo:a}=this;if(i==null||!a)return null;const n=this._rasterJobHandler.instance,l=a.dataType;return n?n.convertVectorFieldData({pixelBlock:i,dataType:l},s):Pi(i,l)}async computeStatisticsHistograms(i,s){await this.load(s),i=Ae(Qt,i).clone();const{serviceRasterInfo:a}=this;if(a==null)throw new C("imagery-tile-mixin:compute-statistics-histograms","serviceRasterInfo must be specified");const{geometry:n}=i;if(n==null)throw new C("imagery-tile-mixin:compute-statistics-histograms","geometry must be specified");let l=n;const{spatialReference:o}=a;n.spatialReference.equals(o)||(await De(),l=n.type==="extent"?Ie(n,o):Ee(n,o));const c=i.pixelSize??new A({x:a.pixelSize.x,y:a.pixelSize.y,spatialReference:o}),{extent:u,width:f,height:h}=zi(a,l,c),m=await this.fetchPixels(u,f,h,{...s,interpolation:"nearest"});if(m.pixelBlock==null)throw new C("imagery-tile-mixin:compute-statistics-histograms","failed to fetch pixels");const y=await Je(m.pixelBlock,u,l),g=this._rasterJobHandler.instance;return g?g.computeStatisticsHistograms({pixelBlock:y},s):He(y)}async createFlowMesh(i,s){const a=this._rasterJobHandler.instance;return a?a.createFlowMesh(i,s):Mi(i.meshType,i.simulationSettings,i.flowData,s.signal!=null?s.signal:new AbortController().signal)}normalizeRasterFetchOptions(i){const{multidimensionalInfo:s}=this.serviceRasterInfo??{};if(s==null)return i;let a=i.multidimensionalDefinition||this.multidimensionalDefinition;a?.length||(a=Ke(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const n=i.timeExtent||this.timeExtent;if(a!=null&&n!=null&&(n.start!=null||n.end!=null)){a=a.map(g=>g.clone());const l=s.variables.find(({name:g})=>g===a[0].variableName)?.dimensions?.find(({name:g})=>g==="StdTime"),o=a.find(({dimensionName:g})=>g==="StdTime");if(!l||!o)return{...i,multidimensionalDefinition:null};const{start:c,end:u}=n,f=c==null?null:c.getTime(),h=u==null?null:u.getTime(),m=f??h,y=h??f;if(l.values!=null){const g=l.values.filter(p=>{if(Array.isArray(p)){if(m===y)return p[0]<=m&&p[1]>=m;const d=p[0]<=m&&p[1]>m||p[0]<y&&p[1]>=y,x=p[0]>=m&&p[1]<=y||p[0]<m&&p[1]>y;return d||x}return m===y?p===m:p>=m&&p<=y});if(g.length){const p=g.sort((d,x)=>{const I=Array.isArray(d)?d[0]:d,R=Array.isArray(d)?d[1]:d,S=Array.isArray(x)?x[0]:x,T=Array.isArray(x)?x[1]:x;return m===y?I-S:Math.abs(R-y)-Math.abs(T-y)})[0];o.values=[p]}else a=null}else if(l.hasRegularIntervals&&l.extent){const[g,p]=l.extent;m>p||y<g?a=null:o.values=m===y?[m]:[Math.max(g,m),Math.min(p,y)]}}return a!=null&&oi(a,this.multidimensionalSubset)?{...i,multidimensionalDefinition:null}:{...i,multidimensionalDefinition:a}}async updateRasterFunction(){if(!this.loaded||this.type!=="imagery-tile"||!this.rasterFunction&&!this._cachedRasterFunctionJson||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;if(this._isConstructedFromFunctionRaster&&this.raster.datasetFormat==="Function"){const u=this.raster.rasterFunction.toJSON();return!this.rasterFunction&&u&&this._set("rasterFunction",Ne.fromJSON(u)),void(this._cachedRasterFunctionJson=this.rasterFunction?.toJSON())}let i,s=this.raster,a=!1;s.datasetFormat==="Function"?(i=s.primaryRasters.rasters,s=i[0],a=!0):i=[s];const{rasterFunction:n}=this;if(n){const u={raster:s};i.length>1&&i.forEach(m=>u[m.url]=m);const f=pt(n.functionDefinition?.toJSON()??n.toJSON(),u),h=new dt({rasterFunction:f});h.rasterJobHandler=this._rasterJobHandler.instance,await h.open(),this._cachedRasterFunctionJson=this.rasterFunction?.toJSON(),this.raster=h}else this.raster=s,this._cachedRasterFunctionJson=null,await s.open();if(this._cachedRendererJson=null,!a&&!n)return;const{bandIds:l}=this,{bandCount:o}=this.raster.rasterInfo,c=l?.length?l.some(u=>u>=o):o>=3;l&&(c||this.renderer&&this.renderer.type!=="raster-stretch")&&this._set("bandIds",null),this._configDefaultRenderer("auto")}async updateRenderer(){const{loaded:i,symbolizer:s}=this;if(!i||!s||!this.renderer)return;const{rasterInfo:a}=this.raster,n=Xe(a,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),l=n?.name,o=je({...this.renderer.toJSON(),variableName:l});if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(o))return;const c=this._rasterJobHandler.instance;c&&(s.rasterInfo=Ue(a,l),s.rendererJSON=o,s.bind(),await c.updateSymbolizer(s),this._cachedRendererJson=o)}async applyRenderer(i,s){const a=i?.pixelBlock;if(!(a!=null&&a.pixels&&a.pixels.length>0))return null;let n;await this.updateRenderer();const l=this._rasterJobHandler.instance,o=this.bandIds??[];return n=l?await l.symbolize({...i,simpleStretchParams:s,bandIds:o}):this.symbolizer.symbolize({...i,simpleStretchParams:s,bandIds:o}),n}getTileUrl(i,s,a){return this.raster.datasetFormat==="RasterTileServer"?`${this.url}/tile/${i}/${s}/${a}`:""}getCompatibleTileInfo(i,s,a=!1){if(!this.loaded||s==null)return null;if(a&&i.equals(this.spatialReference))return this.tileInfo;const n=Et(i);return ee.create({size:256,spatialReference:i,origin:n?{x:n.origin[0],y:n.origin[1]}:{x:s.xmin,y:s.ymax}})}getCompatibleFullExtent(i){return this.loaded?(this._compatibleFullExtent?.spatialReference.equals(i)||(this._compatibleFullExtent=this.raster.computeExtent(i)),this._compatibleFullExtent):null}async fetchTile(i,s,a,n={}){if(r(this),n.requestAsImageElement){const o=this.getTileUrl(i,s,a);return at(o,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:n.signal}).then(c=>c.data)}const{serviceRasterInfo:l}=this;if(l.multidimensionalInfo!=null&&(n=this.normalizeRasterFetchOptions(n)).multidimensionalDefinition==null){const o=n.tileInfo||l.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(i,s,a,o),pixelBlock:null}}return await this._initJobHandler(),await this.updateRasterFunction(),this.renderer?.type==="raster-shaded-relief"&&(n={...n,buffer:{cols:1,rows:1}}),this.raster.fetchTile(i,s,a,n)}async fetchPixels(i,s,a,n={}){return this.serviceRasterInfo.multidimensionalInfo!=null&&(n=this.normalizeRasterFetchOptions(n)).multidimensionalDefinition==null?{extent:i,pixelBlock:null}:(await this._initJobHandler(),await this.updateRasterFunction(),s=Math.round(s),a=Math.round(a),this.raster.fetchPixels(i,s,a,n))}async identify(i,s={}){await this.load();const{raster:a,serviceRasterInfo:n}=this;if(n?.multidimensionalInfo!=null&&!(n.hasMultidimensionalTranspose&&(ht(s.multidimensionalDefinition)||s.transposedVariableName||s.timeExtent))&&(s=this.normalizeRasterFetchOptions(s)).multidimensionalDefinition==null)return{location:i,value:null};const l=this.multidimensionalSubset?.areaOfInterest;if(l&&!l.contains(i))throw new C("imagery-tile-mixin:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");return a.identify(i,s)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){const i=this.serviceRasterInfo?.multidimensionalInfo;if(i==null||this.serviceRasterInfo?.dataType!=="standard-time")return!1;const s=this.multidimensionalDefinition,a=s?.[0]?.variableName;return i.variables.some(n=>n.name===a&&(!s?.[0].dimensionName||n.dimensions.some(l=>l.name==="StdTime")))}getStandardTimeValue(i){return new Date(24*(i-25569)*3600*1e3).toString()}getMultidimensionalSubsetVariables(i){const s=i??this.serviceRasterInfo?.multidimensionalInfo;return li(this.multidimensionalSubset,s)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=Ke(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this.rasterFunction&&this.raster.datasetFormat==="Function"&&(this._cachedRasterFunctionJson=this.rasterFunction.toJSON()),this._configDefaultRenderer()}_initJobHandler(){if(this._rasterJobHandler.connectionPromise!=null)return this._rasterJobHandler.connectionPromise;const i=new si;return this._rasterJobHandler.connectionPromise=i.initialize().then(async()=>{r(this),this._rasterJobHandler.instance=i,this.raster.rasterJobHandler=i,this.raster.datasetFormat==="Function"&&this.raster.syncJobHandler(),this.rasterFunction&&await this.updateRasterFunction().catch(()=>{}),this.renderer&&this.updateRenderer()}).catch(()=>{}),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null)}_configDefaultInterpolation(){if(this.interpolation==null){r(this);const{raster:i}=this,s=Zt(i.rasterInfo,i.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",s)}}_configDefaultRenderer(i="no"){r(this);const{rasterInfo:s}=this.raster,a=Xe(s,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),n=a?.name,l=ei({variableName:n,rasterFunctionName:this.rasterFunction?.functionName,presetRenderers:this.presetRenderers});if(!this.bandIds&&s.bandCount>1&&(this.bandIds=l?.bandIds??ti(s)),!this.renderer||i==="override"){const f=ii(this.raster),h=l?.renderer??Ye(s,{bandIds:this.bandIds,variableName:n,rasterFunctionColorRamp:f}),m=s.statistics,y=m&&m.length>0?m[0]:null,g=y?.max??0,p=y?.min??0;this.raster.datasetFormat==="WCSServer"&&h.type==="raster-stretch"&&(g>1e24||p<-1e24)&&(h.dynamicRangeAdjustment=!0,h.customStatistics=null,h.stretchType==="none"&&(h.stretchType="min-max")),this.renderer=h}const o=je({...this.renderer.toJSON(),variableName:n}),c=Ue(s,n);this.symbolizer?(this.symbolizer.rendererJSON=o,this.symbolizer.rasterInfo=c):this.symbolizer=new bi({rendererJSON:o,rasterInfo:c});const u=this.symbolizer.bind();if(u.success){if(i==="auto"){const{colormap:f}=this.raster.rasterInfo,h=this.renderer;if(f!=null&&h.type==="raster-colormap"){const m=Ye(this.raster.rasterInfo);JSON.stringify(m)!==JSON.stringify(h)&&this._configDefaultRenderer("override")}else if(h.type==="raster-stretch"){const m=this.bandIds?.length,y=h.customStatistics?.length;!h.dynamicRangeAdjustment&&y&&m&&y!==m&&this._configDefaultRenderer("override")}}}else ne.getLogger(this).warn("imagery-tile-mixin",u.error||"The given renderer is not supported by the layer."),i==="auto"&&this._configDefaultRenderer("override")}};function r(i){if(!i.raster||!i.serviceRasterInfo)throw new C("imagery-tile","no raster")}return w([b({clonable:!1})],e.prototype,"_cachedRendererJson",void 0),w([b({clonable:!1})],e.prototype,"_cachedRasterFunctionJson",void 0),w([b({clonable:!1})],e.prototype,"_compatibleFullExtent",void 0),w([b({clonable:!1})],e.prototype,"_isConstructedFromFunctionRaster",void 0),w([b({clonable:!1})],e.prototype,"_rasterJobHandler",void 0),w([b({type:[Ft],json:{write:{overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"||this.bandIds?.join(",")!=="0,1,2"}}}}})],e.prototype,"bandIds",void 0),w([b({json:{origins:{service:{read:{source:"copyrightText"}}}}})],e.prototype,"copyright",void 0),w([b({json:{read:!1}})],e.prototype,"fullExtent",null),w([b({json:{write:{overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"||this.interpolation!=="bilinear"}}}}}),kt(qt)],e.prototype,"interpolation",void 0),w([b()],e.prototype,"ioConfig",void 0),w([b({type:[Le],json:{write:!0}})],e.prototype,"multidimensionalDefinition",null),w([b({type:Vt,json:{write:!0}})],e.prototype,"multidimensionalSubset",void 0),w([b()],e.prototype,"raster",void 0),w([b({type:Ne,json:{name:"renderingRule",write:!0}})],e.prototype,"rasterFunction",null),w([b({readOnly:!0})],e.prototype,"rasterInfo",null),w([b()],e.prototype,"serviceRasterInfo",void 0),w([b()],e.prototype,"sourceJSON",void 0),w([b({readOnly:!0,type:L,json:{read:!1}})],e.prototype,"spatialReference",void 0),w([b({type:ee})],e.prototype,"tileInfo",void 0),w([b(ut)],e.prototype,"url",null),w([b()],e.prototype,"renderer",null),w([b({types:jt,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const i=this.renderer?.type==="raster-stretch"&&this.renderer.stretchType==="none"&&!this.renderer.useGamma;return{enabled:!this.loaded||this.raster.tileType==="Raster"||!i}}},origins:{"web-scene":{types:Ut,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:i=>({enabled:i&&i.type!=="vector-field"&&i.type!=="flow"})}}}}})],e.prototype,"internalRenderer",null),w([Ct("internalRenderer")],e.prototype,"readRenderer",null),w([b({clonable:!1})],e.prototype,"symbolizer",void 0),e=w([K("esri.layers.mixins.ImageryTileMixin")],e),e};function yt(t){return["x","e","east","long","longitude"].includes(t.toLowerCase())}function gt(t){return["y","n","west","lat","latitude"].includes(t.toLowerCase())}function is(t){const{axes:e}=t.domain,r=Object.keys(e),i=[],s=[];let a=-1,n=-1,l=[];for(let x=0;x<r.length;x++){const I=r[x];yt(I)?a=x:gt(I)&&(n=x);const R=e[I],S=[];if("values"in R){R.values.forEach(v=>S.push(typeof v=="string"?new Date(v).getTime():v));const T=S[1]-S[0];i.push([S[0]-.5*T,S[S.length-1]+.5*T]),s.push(T)}else{const{start:T,stop:v,num:k}=R,_=(v-T)/(k-1);i.push([T-.5*_,v+.5*_]),s.push(_);for(let P=0;P<k;P++)S.push(T+_*P)}l.push({name:I,values:S,extent:[S[0],S[S.length-1]]})}a>-1&&n===-1?n=a===0?1:0:n>-1&&a===-1?a=n===0?1:0:n===-1&&a===-1&&(a=0,n=1),l=l.filter((x,I)=>!(I===a||I===n));const{referencing:o}=t.domain,c=o.find(x=>x.coordinates.includes(r[a])).system.id,u=c?.slice(c.lastIndexOf("/")+1),f=u==null||u==="CRS84"?4326:Number(u),h=new L({wkid:f}),[m,y]=i[a],[g,p]=i[n],d=new W({xmin:m,xmax:y,ymin:g,ymax:p,spatialReference:h});return{width:Math.round(d.width/s[a]),height:Math.round(d.height/s[n]),extent:d,dimensions:l}}function Fe(t){const e=At();return e?t[e]??Object.values(t)[0]:Object.values(t)[0]}function ke(){return Math.round(255*Math.random())}function ss(t){const e={},{parameters:r}=t;if(!r)return e;for(const[i,s]of Object.entries(r)){const{type:a,description:n,unit:l,categoryEncoding:o,observedProperty:c}=s;if(a==="Parameter"&&(e[i]={},n&&(e[i].description=Fe(n)),l&&(e[i].unit=l.label?Fe(l.label):null,e[i].symbol=l.symbol?.value),o)){const u=Object.entries(o).map((m,y)=>({OID:y,Value:Number(m[1]),ClassName:m[0].slice(m[0].lastIndexOf("/")+1),Count:1}));let f=!1;c?.categories?.length&&(c.categories.forEach(m=>{if(!m.id)return;const y=m.id.slice(m.id.lastIndexOf("/")+1),g=u.find(d=>d.ClassName===y);if(!g)return;const p=m.label?Fe(m.label):null;if(g.Label=p,m.preferredColor){const d=Bt.fromHex(m.preferredColor);d&&(f=!0,g.Red=d.r,g.Green=d.g,g.Blue=d.b)}}),f&&u.forEach(m=>{m.Red==null&&(m.Red=ke(),m.Green=ke(),m.Blue=ke())}));const h={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:u.map(m=>({attributes:m}))};f&&h.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),e[i].attributeTable=h}}return e}function rs(t){let e=Number.MAX_VALUE,r=-Number.MAX_VALUE;for(let i=0;i<t.length;i++){const s=t[i];s!=null&&(s<e&&(e=s),s>r&&(r=s))}return Ni(e,r)}function ns(t,e,r){const i=t.map((o,c)=>({name:o,count:e[c]})).sort((o,c)=>o.name>c.name?-1:1),s=(a=1,o=>a*=o.count);var a;const n=[...i.slice(1),{name:"",count:1}].reverse().map(s).reverse();let l=0;for(let o=t.length-1;o>=0;o--)l+=n[i.findIndex(({name:c})=>c===t[o])]*(r%e[o]),r=Math.floor(r/e[o]);return l}function as(t){const{width:e,height:r,extent:i,dimensions:s}=is(t),{ranges:a}=t,n=Object.keys(a).sort((h,m)=>h<m?-1:1),l=[];for(let h=0;h<n.length;h++){const m=n[h];s?.length&&l.push({name:m,dimensions:s})}const o=ss(t);l.forEach(h=>o[h.name]&&Object.assign(h,o[h.name]));const c=l.length?{variables:l}:void 0,u=[];for(let h=0;h<n.length;h++){const m=n[h],{values:y,dataType:g,axisNames:p,shape:d}=a[m],x=d.length>2?h*d.slice(0,-2).reduce((k,_)=>k*_):0,I=p.slice(0,-2),R=d.slice(0,-2),S=g==="float"?"f32":rs(y),T=e*r,v=y.length/T;for(let k=0;k<v;k++){const _=we.createEmptyBand(S,T),P=new Uint8Array(T).fill(255);let F=!1;const M=k*T;for(let O=0;O<T;O++){const N=y[M+O];N==null?(P[O]=0,F=!0):_[O]=N}if(h===0||s?.length){const O=new we({width:e,height:r,mask:F?P:null,pixels:[_],pixelType:S});O.updateStatistics(),s?.length?u[ns(I,R,k)+x]=O:u.push(O)}else{const O=u[k];O.pixels.push(_),F?O.mask&&(O.mask=we.combineBandMasks([O.mask,P])):O.mask=F?P:null}}}const f=Object.values(o).find(h=>h.attributeTable)?.attributeTable;return{extent:i,pixelBlocks:u,multidimensionalInfo:c,attributeTable:f,bandNames:c?void 0:n}}let oe=class extends ae{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}fetchRawTile(t,e,r,i={}){if(!this._pixelBlockTiles){const{rasterInfo:a}=this,[n,l]=a.storageInfo.tileInfo.size,{sliceId:o}=i,{pixelBlocks:c}=this.source,u={pixelBlock:o==null?c[0]:c[o],useBilinear:a.dataType!=="thematic",tileSize:{width:n,height:l},level:t,row:e,col:r},f=this.rasterJobHandler?this.rasterJobHandler.clipTile(u,i):ki(u);return Promise.resolve(f)}const s=this._pixelBlockTiles.get(`${t}/${e}/${r}`);return Promise.resolve(s)}async _open(t){const e=this.source,{pixelBlocks:r,attributeTable:i,statistics:s,histograms:a,name:n,nativeExtent:l,transform:o}=e,c=r[0],{width:u,height:f,pixelType:h}=c,m=e.extent??new W({xmin:-.5,ymin:.5,xmax:u-.5,ymax:f-.5,spatialReference:new L({wkid:3857})}),y=e.isPseudoSpatialReference??!e.extent,g={x:m.width/u,y:m.height/f},p={...e.keyProperties};i&&(p.DataType="Thematic");const d=new ve({width:u,height:f,pixelType:h,extent:m,nativeExtent:l,attributeTable:i,transform:o,pixelSize:g,spatialReference:m.spatialReference,bandCount:c.pixels.length,keyProperties:p,multidimensionalInfo:e.multidimensionalInfo,statistics:s,isPseudoSpatialReference:y,histograms:a});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(d),this.createRemoteDatasetStorageInfo(d,512,512),this._set("rasterInfo",d),this.updateTileInfo(),d.multidimensionalInfo?await this._buildMDimStats(e.pixelBlocks,d.multidimensionalInfo):await this._buildInMemoryRaster(c,{width:512,height:512},t),d.multidimensionalInfo||(this.source=null),this.datasetName=n}async _buildInMemoryRaster(t,e,r){const{rasterInfo:i}=this,s=i.storageInfo.maximumPyramidLevel??0,a=i.dataType!=="thematic",n=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:e,maximumPyramidLevel:s,useBilinear:a},r):Promise.resolve(Ci(t,e,s,a)),l=i.statistics!=null,o=i.histograms!=null,c=this.ioConfig.skipStatistics||l?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},r):Promise.resolve(hi(t)),u=await lt([n,c]);if(!u[0].value&&u[1].value)throw new C("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=u[0].value,l||(i.statistics=u[1].value?.statistics),o||(i.histograms=u[1].value?.histograms)}async _buildMDimStats(t,e,r){for(let i=0;i<e.variables.length;i++){const s=e.variables[i];if(s.statistics)continue;const a=s.dimensions.map(c=>new Le({variableName:s.name,dimensionName:c.name,values:[c.values?.[0]??c.extent?.[0]],isSlice:!0})),n=mt(a,e),l=n==null?null:t[n];if(l==null)continue;const o=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:l},r):He(l);s.statistics=o.statistics,s.histograms||(s.histograms=o.histograms)}}};w([b({type:String,json:{write:!0}})],oe.prototype,"datasetFormat",void 0),w([b()],oe.prototype,"source",void 0),w([b()],oe.prototype,"url",null),oe=w([K("esri.layers.support.rasterDatasets.InMemoryRaster")],oe);const $e=oe;let he=class extends ae{constructor(){super(...arguments),this.datasetFormat="CovJSON"}fetchRawTile(t,e,r,i={}){return this._inMemoryRaster.fetchRawTile(t,e,r,i)}async _open(t){const{extent:e,pixelBlocks:r,multidimensionalInfo:i,attributeTable:s,bandNames:a}=await this._fetchData(t),{statistics:n,histograms:l}=He(r[0]),o=a?.map(h=>({BandName:h})),c={DataType:s?"Thematic":i?"Scientific":"Generic",BandProperties:o},u=new $e({source:{extent:e,pixelBlocks:r,attributeTable:s?Ge.fromJSON(s):null,multidimensionalInfo:i,statistics:n,histograms:l,keyProperties:c,isPseudoSpatialReference:!1}});await u.open(),this._inMemoryRaster=u;const f=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",f.slice(0,f.indexOf("."))),this._set("rasterInfo",u.rasterInfo)}async _fetchData(t){const e=this.source??(await this.request(this.url,{signal:t?.signal})).data,r="imagery-tile-layer:open-coverage-json";if(e.type?.toLowerCase()!=="coverage"||e.domain?.domainType?.toLowerCase()!=="grid")throw new C(r,"Only coverage with Grid domain type is supported");if(!e.ranges)throw new C(r,"Missing ranges in the grid coverage data");if(!e.domain.referencing?.length)throw new C(r,"Missing domain referencing in the grid coverage data");const i=Object.values(e.ranges);for(let s=0;s<i.length;s++){const{axisNames:a,shape:n,type:l,values:o}=i[s];if(!(l.toLowerCase()==="ndarray"&&o?.length&&a?.length&&n?.length))throw new C(r,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!(yt(a[a.length-1])&&gt(a[a.length-2])))throw new C(r,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return as(e)}};w([b({type:String,json:{write:!0}})],he.prototype,"datasetFormat",void 0),w([b({constructOnly:!0})],he.prototype,"source",void 0),he=w([K("esri.layers.support.rasterDatasets.CovJSONRaster")],he);const os=he;function ue(t,e){if(!t||!e)return[];let r=e;e.includes("/")?(r=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const i=[];if(e){const a=ue(t,r);for(let n=0;n<a.length;n++)ue(a[n],e).forEach(l=>i.push(l));return i}const s=t.getElementsByTagNameNS("*",r);if(!s||s.length===0)return[];for(let a=0;a<s.length;a++)i.push(s[a]||s.item(a));return i}function q(t,e){if(!t||!e)return null;let r=e;e.includes("/")?(r=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const i=ue(t,r);return i.length>0?e?q(i[0],e):i[0]:null}function Y(t,e=null){const r=e?q(t,e):t;let i;return r?(i=r.textContent||r.nodeValue,i?i.trim():null):null}function ls(t,e){const r=ue(t,e),i=[];let s;for(let a=0;a<r.length;a++)s=r[a].textContent||r[a].nodeValue,s&&(s=s.trim(),s!==""&&i.push(s));return i}function ge(t,e){return ls(t,e).map(r=>Number(r))}function re(t,e){const r=Y(t,e);return Number(r)}function Ce(t,e){const r=t?.nodeName?.toLowerCase(),i=e.toLowerCase();return r.slice(r.lastIndexOf(":")+1)===i}function nt(t,e){if(!t||!e)return null;const r=[];for(let i=0;i<t.length;i++)r.push(t[i]),r.push(e[i]);return r}function cs(t){const e=q(t,"GeodataXform"),r=Se(re(e,"SpatialReference/WKID")||Y(e,"SpatialReference/WKT"));if(e.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:r,transform:null};const i=re(e,"PolynomialOrder")??1,s=ge(e,"CoeffX/Double"),a=ge(e,"CoeffY/Double"),n=ge(e,"InverseCoeffX/Double"),l=ge(e,"InverseCoeffY/Double"),o=nt(s,a),c=nt(n,l);return{spatialReference:r,transform:o&&c&&o.length&&c.length?new We({spatialReference:r,polynomialOrder:i,forwardCoefficients:o,inverseCoefficients:c}):null}}function us(t){const e=re(t,"NoDataValue"),r=q(t,"Histograms/HistItem"),i=re(r,"HistMin"),s=re(r,"HistMax"),a=re(r,"BucketCount"),n=Y(r,"HistCounts")?.split("|").map(h=>Number(h));let l,o,c,u;ue(t,"Metadata/MDI").forEach(h=>{const m=Number(h.textContent??h.nodeValue);switch(h.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":l=m;break;case"STATISTICS_MAXIMUM":o=m;break;case"STATISTICS_MEAN":c=m;break;case"STATISTICS_STDDEV":u=m}});const f=re(t,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:n?.length&&i!=null&&s!=null?{min:i,max:s,size:a||n.length,counts:n}:null,sourceBandIndex:f,statistics:l!=null&&o!=null?{min:l,max:o,avg:c,stddev:u}:null}}function Se(t){if(!t)return null;let e=Number(t);if(!isNaN(e)&&e!==0)return new L({wkid:e});if(t=String(t).trim(),Jt(t))return new L({wkt2:t});const r=t.toUpperCase();if(r.startsWith("COMPD_CS")){if(!r.includes("VERTCS")||!r.includes("GEOGCS")&&!r.startsWith("PROJCS"))return null;const i=r.indexOf("VERTCS"),s=r.indexOf("PROJCS"),a=s>-1?s:r.indexOf("GEOGCS");if(a===-1)return null;const n=t.slice(a,t.lastIndexOf("]",i)+1).trim(),l=t.slice(i,t.lastIndexOf("]")).trim();e=Oe(n);const o=new L(e?{wkid:e}:{wkt:n}),c=Oe(l);return c&&(o.vcsWkid=c),o}return r.startsWith("GEOGCS")||r.startsWith("PROJCS")?(e=Oe(t),new L(e!==0?{wkid:e}:{wkt:t})):null}function Oe(t){const e=t.replaceAll("]","[").replaceAll('"',"").split("[").map(s=>s.trim()).filter(s=>s!==""),r=e[e.length-1].split(","),i=r[0]?.toLowerCase();if((i==="epsg"||i==="esri")&&t.endsWith('"]]')){const s=Number(r[1]);if(!isNaN(s)&&s!==0)return s}return 0}function qe(t){if(t?.documentElement.tagName?.toLowerCase()!=="pamdataset")return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};t.documentElement.childNodes.forEach(i=>{if(i.nodeType===1){if(Ce(i,"SRS")){if(!e.spatialReference){const s=Y(i);e.spatialReference=Se(s)}}else if(Ce(i,"Metadata"))if(i.getAttribute("domain")==="xml:ESRI"){const{spatialReference:s,transform:a}=cs(i);e.transform=a,e.spatialReference||(e.spatialReference=s)}else ue(i,"MDI").forEach(s=>e.metadata[s.getAttribute("key")]=Y(s));else if(Ce(i,"PAMRasterBand")){const s=us(i);s.sourceBandIndex!=null&&e.rasterBands[s.sourceBandIndex]==null?e.rasterBands[s.sourceBandIndex]=s:e.rasterBands.push(s)}}});const r=e.rasterBands;if(r.length){const i=!!r[0].statistics;e.statistics=i?r.map(a=>a.statistics).filter(Me):null;const s=!!r[0].histogram;e.histograms=s?r.map(a=>a.histogram).filter(Me):null}return e}let be=class extends ae{fetchRawTile(t,e,r,i={}){return this._inMemoryRaster.fetchRawTile(t,e,r,i)}async _open(t){const e=await this._fetchData(t);let{spatialReference:r,statistics:i,histograms:s,transform:a}=await this._fetchAuxiliaryData(t);const n=!r;n&&(r=new L({wkid:3857})),s?.length&&i==null&&(i=ze(s));const{width:l,height:o}=e;let c=new W({xmin:-.5,ymin:.5-o,xmax:l-.5,ymax:.5,spatialReference:r});const u=a?a.forwardTransform(c):c;let f=!0;if(a){const m=a.forwardCoefficients;f=m&&m[1]===0&&m[2]===0,f&&(a=null,c=u)}const h=new $e({source:{extent:u,nativeExtent:c,transform:a,pixelBlocks:[e],statistics:i,histograms:s,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:n},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(h.ioConfig.skipMapInfo=!0),await h.open(),h.source=null,this._set("rasterInfo",h.rasterInfo),this._inMemoryRaster=h}async _fetchData(t){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:t?.signal}),r=mi(e).toUpperCase();if(r!=="JPG"&&r!=="PNG"&&r!=="GIF"&&r!=="BMP")throw new C("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",r);const i=r.toLowerCase(),s=i==="gif"||i==="bmp"||!Ot("ios"),a=await this.decodePixelBlock(e,{format:i,useCanvas:s,hasNoZlibMask:!0});if(a==null)throw new C("image-aux-raster:open","the data cannot be decoded");return a}async _fetchAuxiliaryData(t){const e=t?.signal,{skipExtensions:r=[],skipMapInfo:i}=this.ioConfig,s=i||r.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),a=this.datasetFormat,n=a==="JPG"?"jgw":a==="PNG"?"pgw":a==="BMP"?"bpw":null,l=n&&r.includes(n)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+n,{responseType:"text",signal:e}),o=await lt([s,l]);if(e?.aborted)throw Pt();const c=qe(o[0].value?.data);if(!c.transform){const u=o[1].value?o[1].value.data.split(`
`).slice(0,6).map(f=>Number(f)):null;c.transform=u?.length===6?new We({forwardCoefficients:[u[4],u[5],u[0],-u[1],u[2],-u[3]]}):null}return c}};w([b({type:String,json:{write:!0}})],be.prototype,"datasetFormat",void 0),be=w([K("esri.layers.support.rasterDatasets.ImageAuxRaster")],be);const xe=be;let me=class extends ae{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async fetchRawTile(t,e,r,i={}){const{storageInfo:s,extent:a}=this.rasterInfo,{transposeInfo:n}=s,l=n!=null&&!!i.transposedVariableName;if(this._slices&&!l&&i.sliceId==null)return null;const o=l?0:s.maximumPyramidLevel-t+this._levelOffset,c=`${this.url}/tile/${o}/${e}/${r}`,u=this._slices?l?{variable:i.transposedVariableName}:{sliceId:i.sliceId||0}:null,{data:f}=await this.request(c,{query:u,responseType:"array-buffer",signal:i.signal});if(!f)return null;const h=l?n.tileSize:s.tileInfo.size,m=await this.decodePixelBlock(f,{width:h[0],height:h[1],planes:null,pixelType:null,isPoint:this.tileType==="Elevation",returnInterleaved:l,noDataValue:this.rasterInfo.noDataValue});if(m==null)return null;const y=s.blockBoundary[t];if(s.compression!=="jpg"||r>y.minCol&&r<y.maxCol&&e>y.minRow&&e<y.maxRow)return m;const{origin:g,blockWidth:p,blockHeight:d}=s,{x,y:I}=this.getPyramidPixelSize(t),R=Math.round((a.xmin-g.x)/x)%p,S=Math.round((a.xmax-g.x)/x)%p||p,T=Math.round((g.y-a.ymax)/I)%d,v=Math.round((g.y-a.ymin)/I)%d||d,k=r===y.minCol?R:0,_=e===y.minRow?T:0,P=r===y.maxCol?S:p,F=e===y.maxRow?v:d;return Oi(m,{x:k,y:_},{width:P-k,height:F-_}),m}getSliceIndex(t){if(!this._slices||t==null||t.length===0)return null;const e=t;for(let r=0;r<this._slices.length;r++){const i=this._slices[r].multidimensionalDefinition;if(i.length===e.length&&!i.some(s=>{const a=e.find(n=>s.variableName===n.variableName&&n.dimensionName===s.dimensionName);return a?(Array.isArray(s.values[0])?`${s.values[0][0]}-${s.values[0][1]}`:s.values[0])!==(Array.isArray(a.values[0])?`${a.values[0][0]}-${a.values[0][1]}`:a.values[0]):!0}))return r}return null}async fetchVariableStatisticsHistograms(t,e){const r=this.request(this.url+"/statistics",{query:{variable:t,f:"json"},signal:e}).then(a=>a.data?.statistics),i=this.request(this.url+"/histograms",{query:{variable:t,f:"json"},signal:e}).then(a=>a.data?.histograms),s=await Promise.all([r,i]);return s[0]&&s[0].forEach(a=>{a.avg=a.mean,a.stddev=a.standardDeviation}),s[1]?.[0]?.counts?.length||(s[1]=null),{statistics:s[0]||null,histograms:s[1]||null}}async computeBestPyramidLevelForLocation(t,e={}){if(!this._tilemapCache)return 0;let r=this.identifyPixelLocation(t,0,e.datumTransformation);if(r===null)return null;let i=0;const{maximumPyramidLevel:s}=this.rasterInfo.storageInfo;let a=s-i+this._levelOffset;const n=r.srcLocation;for(;a>=0;){try{if(await this._tilemapCache.fetchAvailability(a,r.row,r.col,e)==="available")break}catch{}if(a--,i++,r=this.identifyPixelLocation(n,i,e.datumTransformation),r===null)return null}return a===-1||r==null?null:i}async _open(t){const e=t?.signal,r=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});r.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const i=r.data;if(this.sourceJSON=i,!i)throw new C("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!i.tileInfo)throw new C("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const s=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=i.cacheType,this.tileType==null&&(s.includes(i.tileInfo.format.toLowerCase())?this.tileType="Map":i.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=i.name?.slice(i.name.indexOf("/")+1)??"";const a=await this._fetchRasterInfo({signal:e});if(a==null)throw new C("image-server-raster:open","cannot initialize image service");Yt(a,i);const n=this.tileType==="Map"?hs(i.tileInfo,i):ee.fromJSON(i.tileInfo);Mt(n);const[l,o]=this._computeMinMaxLOD(a,n),{extent:c,pixelSize:u}=a,f=.5/a.width*u.x,h=Math.max(u.x,u.y),{lods:m}=n;(this.tileType!=="Map"&&i.maxScale!==0||Math.abs(u.x-u.y)>f||!m.some(v=>Math.abs(v.resolution-h)<f))&&(u.x=u.y=l.resolution,a.width=Math.ceil((c.xmax-c.xmin)/u.x-.1),a.height=Math.ceil((c.ymax-c.ymin)/u.y-.1));const y=l.level-o.level,[g,p]=n.size,d=[],x=[];m.forEach((v,k)=>{v.level>=o.level&&v.level<=l.level&&d.push({x:v.resolution,y:v.resolution}),k<m.length-1&&x.push(Math.round(10*v.resolution/m[k+1].resolution)/10)}),d.sort((v,k)=>v.x-k.x);const I=this.computeBlockBoundary(c,g,p,n.origin,d,y),R=d.length>1?d.slice(1):null;let S;i.transposeInfo&&(S={tileSize:[i.transposeInfo.rows,i.transposeInfo.cols],packetSize:a.keyProperties?._yxs.PacketSize??0});const T=x.length<=1||x.length>=3&&x.slice(0,-1).every(v=>v===x[0])?x[0]??2:Math.round(10/(o.resolution/l.resolution)**(-1/y))/10;if(a.storageInfo=new Re({blockWidth:n.size[0],blockHeight:n.size[1],pyramidBlockWidth:n.size[0],pyramidBlockHeight:n.size[1],pyramidResolutions:R,pyramidScalingFactor:T,compression:n.format,origin:n.origin,firstPyramidLevel:1,maximumPyramidLevel:y,tileInfo:n,transposeInfo:S,blockBoundary:I}),ms(a),this._set("rasterInfo",a),i.capabilities.toLowerCase().includes("tilemap")){const v={tileInfo:a.storageInfo.tileInfo,parsedUrl:Nt(this.url),url:this.url,tileServers:[]};this._tilemapCache=new ji({layer:v})}}async _fetchRasterInfo(t){const e=this.sourceJSON;if(this.tileType==="Map"){const n=e.fullExtent||e.extent,l=Math.ceil((n.xmax-n.xmin)/e.pixelSizeX-.1),o=Math.ceil((n.ymax-n.ymin)/e.pixelSizeY-.1),c=L.fromJSON(e.spatialReference||n.spatialReference),u=new A({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:c});return new ve({width:l,height:o,bandCount:3,extent:W.fromJSON(n),spatialReference:c,pixelSize:u,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:r}=t,i=Kt(this.url,this.sourceJSON,{signal:r,query:this.ioConfig.customFetchParameters}),s=e.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:r}).then(n=>n.data?.slices).catch(()=>null):null,a=await Promise.all([i,s]);return this._slices=a[1],a[0]}_fixScaleInServiceInfo(){const{sourceJSON:t}=this;t.minScale&&t.minScale<0&&(t.minScale=0),t.maxScale&&t.maxScale<0&&(t.maxScale=0)}_computeMinMaxLOD(t,e){const{pixelSize:r}=t,i=.5/t.width*r.x,{lods:s}=e,a=e.lodAt(Math.max.apply(null,s.map(h=>h.level))),n=e.lodAt(Math.min.apply(null,s.map(h=>h.level))),{tileType:l}=this;if(l==="Map")return this._levelOffset=s[0].level,[a,n];if(l==="Raster")return[s.find(h=>h.resolution===r.x)??a,n];const{minScale:o,maxScale:c}=this.sourceJSON;let u=a;c>0&&(u=s.find(h=>Math.abs(h.scale-c)<i),u||(u=s.filter(h=>h.scale>c).sort((h,m)=>h.scale>m.scale?1:-1)[0]??a));let f=n;return o>0&&(f=s.find(h=>Math.abs(h.scale-o)<i)??n,this._levelOffset=f.level-n.level),[u,f]}};function hs(t,e){if(!t)return null;const{minScale:r,maxScale:i,minLOD:s,maxLOD:a}=e;if(s!=null&&a!=null)return ee.fromJSON({...t,lods:t.lods.filter(({level:n})=>n!=null&&n>=s&&n<=a)});if(r!==0&&i!==0){const n=c=>Math.round(1e4*c)/1e4,l=r?n(r):1/0,o=i?n(i):-1/0;return ee.fromJSON({...t,lods:t.lods.filter(c=>{const u=n(c.scale);return u<=l&&u>=o})})}return ee.fromJSON(t)}function ms(t){const{extent:e,spatialReference:r}=t;e.xmin>-1&&e.xmax>181&&r?.wkid&&r.isGeographic&&(t.nativeExtent=t.extent,t.transform=new Hi,t.extent=t.transform.forwardTransform(e))}w([b({type:String,json:{write:!0}})],me.prototype,"datasetFormat",void 0),w([b()],me.prototype,"tileType",void 0),me=w([K("esri.layers.support.rasterDatasets.ImageServerRaster")],me);const fs=me,U=new Map;U.set("Int8","s8"),U.set("UInt8","u8"),U.set("Int16","s16"),U.set("UInt16","u16"),U.set("Int32","s32"),U.set("UInt32","u32"),U.set("Float32","f32"),U.set("Float64","f32"),U.set("Double64","f32");const Z=new Map;Z.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),Z.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),Z.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),Z.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let le=class extends ae{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async fetchRawTile(t,e,r,i={}){const{blockWidth:s,blockHeight:a,blockBoundary:n}=this.rasterInfo.storageInfo,l=n[t];if(!l||l.maxRow<e||l.maxCol<r||l.minRow>e||l.minCol>r)return null;const{bandCount:o,pixelType:c}=this.rasterInfo,{ranges:u,actualTileWidth:f,actualTileHeight:h}=this._getTileLocation(t,e,r);if(!u||u.length===0)return null;if(u[0].from===0&&u[0].to===0){const F=new Uint8Array(s*a);return new we({width:s,height:a,pixels:void 0,mask:F,validPixelCount:0})}const{bandIds:m}=this.ioConfig,y=this._getBandSegmentCount(),g=[];let p=0;for(p=0;p<y;p++)m&&!m.includes(p)||g.push(this.request(this._files.data,{range:{from:u[p].from,to:u[p].to},responseType:"array-buffer",signal:i.signal}));const d=await Promise.all(g),x=d.map(F=>F.data.byteLength).reduce((F,M)=>F+M),I=new Uint8Array(x),R=[];let S=0;for(p=0;p<y;p++)R.push(S),I.set(new Uint8Array(d[p].data),S),S+=d[p].data.byteLength;const T=Z.get(this.rasterInfo.storageInfo.compression).decoderFormat,v=await this.decodePixelBlock(I.buffer,{width:s,height:a,format:T,planes:m?.length||o,offsets:R,pixelType:c});if(v==null)return null;let{noDataValue:k}=this.rasterInfo;if(k!=null&&T!=="lerc"&&!v.mask&&(k=k[0],k!=null)){const F=v.width*v.height,M=new Uint8Array(F);if(Math.abs(k)>1e24)for(p=0;p<F;p++)Math.abs((v.pixels[0][p]-k)/k)>1e-6&&(M[p]=1);else for(p=0;p<F;p++)v.pixels[0][p]!==k&&(M[p]=1);v.mask=M}let _=0,P=0;if(f!==s||h!==a){let F=v.mask;if(F)for(p=0;p<a;p++)if(P=p*s,p<h)for(_=f;_<s;_++)F[P+_]=0;else for(_=0;_<s;_++)F[P+_]=0;else for(F=new Uint8Array(s*a),v.mask=F,p=0;p<h;p++)for(P=p*s,_=0;_<f;_++)F[P+_]=1}return v}async _open(t){this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=t?t.signal:null,r=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:i,files:s}=this._parseHeader(r.data),{skipMapInfo:a,skipExtensions:n=[]}=this.ioConfig;if(!n.includes("aux.xml")&&!a){const d=await this._fetchAuxiliaryData(t);d!=null&&(i.statistics=d.statistics??i.statistics,i.histograms=d.histograms,d.histograms&&i.statistics==null&&(i.statistics=ze(d.histograms)))}a&&this.updateImageSpaceRasterInfo(i),this._set("rasterInfo",i),this._files=s;const l=await this.request(s.index,{responseType:"array-buffer",signal:e});this._storageIndex=ps(l.data);const{blockWidth:o,blockHeight:c}=this.rasterInfo.storageInfo,u=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:f,height:h}=this.rasterInfo,m=[],y=this._getBandSegmentCount();let g=0,p=-1;for(;g<this._storageIndex.length;){p++;const d=Math.ceil(f/o/u**p)-1,x=Math.ceil(h/c/u**p)-1;g+=(d+1)*(x+1)*y*4,m.push({maxRow:x,maxCol:d,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=m,p>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=p),this.updateTileInfo()}_getBandSegmentCount(){return Z.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,r){const{blockWidth:i,blockHeight:s,pyramidScalingFactor:a}=this.rasterInfo.storageInfo,{width:n,height:l}=this.rasterInfo,o=this._getBandSegmentCount();let c,u,f,h=0,m=0;for(f=0;f<t;f++)m=a**f,c=Math.ceil(n/i/m),u=Math.ceil(l/s/m),h+=c*u;m=a**t,c=Math.ceil(n/i/m),u=Math.ceil(l/s/m),h+=e*c+r,h*=4*o;const y=this._storageIndex.subarray(h,h+4*o);let g=0,p=0;const d=[];for(let x=0;x<o;x++)g=y[4*x]*2**32+y[4*x+1],p=g+y[4*x+2]*2**32+y[4*x+3],d.push({from:g,to:p});return{ranges:d,actualTileWidth:r<c-1?i:Math.ceil(n/m)-i*(c-1),actualTileHeight:e<u-1?s:Math.ceil(l/m)-s*(u-1)}}_parseHeader(t){const e=q(t,"MRF_META/Raster");if(!e)throw new C("mrf:open","not a valid MRF format");const r=q(e,"Size"),i=parseInt(r.getAttribute("x"),10),s=parseInt(r.getAttribute("y"),10),a=parseInt(r.getAttribute("c"),10),n=(Y(e,"Compression")||"none").toLowerCase();if(!Z.has(n))throw new C("mrf:open","currently does not support compression "+n);const l=Y(e,"DataType")||"UInt8",o=U.get(l);if(o==null)throw new C("mrf:open","currently does not support pixel type "+l);const c=q(e,"PageSize"),u=parseInt(c.getAttribute("x"),10),f=parseInt(c.getAttribute("y"),10),h=q(e,"DataValues");let m,y;if(h&&(y=h.getAttribute("NoData"),y!=null&&(m=y.trim().split(" ").map(F=>parseFloat(F)))),q(t,"MRF_META/CachedSource"))throw new C("mrf:open","currently does not support MRF referencing other data files");const g=q(t,"MRF_META/GeoTags"),p=q(g,"BoundingBox");let d,x=!1;if(p!=null){const F=parseFloat(p.getAttribute("minx")),M=parseFloat(p.getAttribute("miny")),O=parseFloat(p.getAttribute("maxx")),N=parseFloat(p.getAttribute("maxy")),D=Y(g,"Projection")||"";let B=L.WGS84;if(D!=="LOCAL_CS[]")if(D.toLowerCase().startsWith("epsg:")){const z=Number(D.slice(5));isNaN(z)||z===0||(B=new L({wkid:z}))}else B=Se(D)??L.WGS84;else x=!0,B=new L({wkid:3857});d=new W(F,M,O,N),d.spatialReference=B}else x=!0,d=new W({xmin:-.5,ymin:.5-s,xmax:i-.5,ymax:.5,spatialReference:new L({wkid:3857})});const I=q(t,"MRF_META/Rsets"),R=parseInt(I?.getAttribute("scale")||"2",10),S=d.spatialReference,T=new Re({origin:new A({x:d.xmin,y:d.ymax,spatialReference:S}),blockWidth:u,blockHeight:f,pyramidBlockWidth:u,pyramidBlockHeight:f,compression:n,pyramidScalingFactor:R}),v=new A({x:d.width/i,y:d.height/s,spatialReference:S}),k=new ve({width:i,height:s,extent:d,isPseudoSpatialReference:x,spatialReference:S,bandCount:a,pixelType:o,pixelSize:v,noDataValue:m,storageInfo:T}),_=Y(t,"datafile"),P=Y(t,"IndexFile");return{rasterInfo:k,files:{mrf:this.url,index:P||this.url.replace(".mrf",".idx"),data:_||this.url.replace(".mrf",Z.get(n).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return qe(e)}catch{return null}}};function ps(t){if(t.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,r,i,s,a,n;if(fi){for(r=new Uint8Array(t),s=new ArrayBuffer(t.byteLength),i=new Uint8Array(s),a=0;a<t.byteLength/4;a++)for(n=0;n<4;n++)i[4*a+n]=r[4*a+3-n];e=new Uint32Array(s)}else e=new Uint32Array(t);return e}w([b()],le.prototype,"_files",void 0),w([b()],le.prototype,"_storageIndex",void 0),w([b({type:String,json:{write:!0}})],le.prototype,"datasetFormat",void 0),le=w([K("esri.layers.support.rasterDatasets.MRFRaster")],le);const ds=le;function ys(t){const e=t.fields,r=t.records,i=e.some(c=>c.name.toLowerCase()==="oid")?"OBJECTID":"OID",s=[{name:i,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map(c=>({name:c.name,type:"esriFieldType"+c.typeName,alias:c.name}))),a=s.map(c=>c.name),n=[];let l=0,o=0;return r.forEach(c=>{const u={};for(u[i]=l++,o=1;o<a.length;o++)u[a[o]]=c[o-1];n.push({attributes:u})}),{displayFieldName:"",fields:s,features:n}}class gs{static get supportedVersions(){return[5]}static parse(e){const r=new DataView(e),i=3&r.getUint8(0);if(i!==3)return{header:{version:i},recordSet:null};const s=r.getUint32(4,!0),a=r.getUint16(8,!0),n=r.getUint16(10,!0),l={version:i,recordCount:s,headerByteCount:a,recordByteCount:n};let o=32;const c=[],u=[];let f;if(i===3){for(;r.getUint8(o)!==13;)f=String.fromCharCode(r.getUint8(o+11)).trim(),c.push({name:Qe(new Uint8Array(e,o,11)),type:f,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(f)],length:r.getUint8(o+16)}),o+=32;if(o+=1,c.length>0)for(;u.length<s&&e.byteLength-o>n;){const h=[];r.getUint8(o)===32?(o+=1,c.forEach(m=>{if(m.type==="C")h.push(Qe(new Uint8Array(e,o,m.length)).trim());else if(m.type==="N")h.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,m.length)).trim(),10));else if(m.type==="F")h.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,m.length)).trim()));else if(m.type==="D"){const y=String.fromCharCode.apply(null,new Uint8Array(e,o,m.length)).trim();h.push(new Date(parseInt(y.slice(0,4),10),parseInt(y.slice(4,6),10)-1,parseInt(y.slice(6,8),10)))}o+=m.length}),u.push(h)):o+=n}}return{header:l,fields:c,records:u,recordSet:ys({fields:c,records:u})}}}const Be=(t,e)=>t.get(e)?.values,fe=(t,e)=>t.get(e)?.values?.[0];let se=class extends ae{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async fetchRawTile(t,e,r,i={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(t,e,r))return null;const s=await this._fetchRawTiffTile(t,e,r,!1,i);if(s!=null&&this._headerInfo.hasMaskBand){const a=await this._fetchRawTiffTile(t,e,r,!0,i);a!=null&&a.pixels[0]instanceof Uint8Array&&(s.mask=a.pixels[0])}return s}async _open(t){const e=t?t.signal:null,{data:r}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:e});if(!r)throw new C("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:i,firstIFDPos:s,isBigTiff:a}=pi(r),n=[];await this._readIFDs(n,r,i,s,0,a?8:4,e);const{imageInfo:l,rasterInfo:o}=xs(n),c=di(n),u=yi(n);if(this._headerInfo={littleEndian:i,isBigTiff:a,ifds:n,pyramidIFDs:c,maskIFDs:u,...l},this._set("rasterInfo",o),!l.isSupported)throw new C("tiffraster:open","this tiff is not supported: "+l.message);if(!l.tileWidth)throw new C("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");o.isPseudoSpatialReference&&ne.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const f=n[0].get("PREDICTOR")?.values?.[0];if(n[0].get("SAMPLEFORMAT")?.values?.[0]===3&&f===2)throw new C("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:h,skipExtensions:m=[]}=this.ioConfig;if(!m.includes("aux.xml")&&!h){const y=await this._fetchAuxiliaryMetaData(t);y!=null&&ws(y,o)}m.includes("vat.dbf")||o.bandCount!==1||o.pixelType!=="u8"||h||(o.attributeTable=await this._fetchAuxiliaryTable(t),o.attributeTable!=null&&(o.keyProperties.DataType="thematic")),h&&this.updateImageSpaceRasterInfo(o),this.updateTileInfo()}async _readIFDs(t,e,r,i,s,a=4,n){if(!i)return null;(i>=e.byteLength||i<0)&&(e=(await this.request(this.url,{range:{from:i+s,to:i+s+this._bufferSize},responseType:"array-buffer",signal:n})).data,s=i+s,i=0);const l=await this._readIFD(e,r,i,s,pe.tiffTags,a,n);if(t.push(l.ifd),!l.nextIFD)return null;await this._readIFDs(t,e,r,l.nextIFD-s,s,a,n)}async _readIFD(t,e,r,i,s=pe.tiffTags,a=4,n){if(!t)return null;const l=gi(t,e,r,i,s,a);if(l.success){const o=[];if(l.ifd?.forEach(c=>{c.values||o.push(c)}),o.length>0){const c=o.map(f=>f.offlineOffsetSize).filter(Me),u=Math.min.apply(null,c.map(f=>f[0]));if(Math.min.apply(null,c.map(f=>f[0]+f[1]))-u<=this._bufferSize){const{data:f}=await this.request(this.url,{range:{from:u,to:u+this._bufferSize},responseType:"array-buffer",signal:n});t=f,i=u,o.forEach(h=>xi(t,e,h,i))}}if(l.ifd?.has("GEOKEYDIRECTORY")){const c=l.ifd.get("GEOKEYDIRECTORY"),u=c?.values;if(u&&u.length>4){const f=u[0]+"."+u[1]+"."+u[2],h=await this._readIFD(t,e,c.valueOffset+6-i,i,pe.geoKeys,2,n);c.data=h.ifd,c.data&&c.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[f]})}}return l}if(l.requiredBufferSize&&l.requiredBufferSize!==t.byteLength)return(t=(await this.request(this.url,{range:{from:i,to:i+l.requiredBufferSize+4},responseType:"array-buffer",signal:n})).data).byteLength<l.requiredBufferSize?null:this._readIFD(t,e,0,i,pe.tiffTags,4,n)}async _fetchRawTiffTile(t,e,r,i,s={}){const a=this._getTileLocation(t,e,r,i);if(!a)return null;const{ranges:n,actualTileWidth:l,actualTileHeight:o,ifd:c}=a,u=n.map(T=>this.request(this.url,{range:T,responseType:"array-buffer",signal:s.signal})),f=await Promise.all(u),h=f.map(T=>T.data.byteLength).reduce((T,v)=>T+v),m=f.length===1?f[0].data:new ArrayBuffer(h),y=[0],g=[0];if(f.length>1){const T=new Uint8Array(m);for(let v=0,k=0;v<f.length;v++){const _=f[v].data;T.set(new Uint8Array(_),k),y[v]=k,k+=_.byteLength,g[v]=_.byteLength}}const{blockWidth:p,blockHeight:d}=this.getBlockWidthHeight(t),x=await this.decodePixelBlock(m,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offsets:y,sizes:g},width:p,height:d,planes:null,pixelType:null});if(x==null)return null;let I,R,S;if(l!==p||o!==d){let T=x.mask;if(T)for(I=0;I<d;I++)if(S=I*p,I<o)for(R=l;R<p;R++)T[S+R]=0;else for(R=0;R<p;R++)T[S+R]=0;else for(T=new Uint8Array(p*d),x.mask=T,I=0;I<o;I++)for(S=I*p,R=0;R<l;R++)T[S+R]=1}return x}_getTileLocation(t,e,r,i=!1){const{firstPyramidLevel:s,blockBoundary:a}=this.rasterInfo.storageInfo,n=t===0?0:t-(s-1),{_headerInfo:l}=this;if(!l)return null;const o=i?l.maskIFDs[n]:n===0?l?.ifds[0]:l?.pyramidIFDs[n-1];if(!o)return null;const c=wi(o,l),u=Be(o,"TILEOFFSETS");if(u===void 0)return null;const f=Be(o,"TILEBYTECOUNTS"),{minRow:h,minCol:m,maxRow:y,maxCol:g}=a[n];if(e>y||r>g||e<h||r<m)return null;const p=fe(o,"IMAGEWIDTH"),d=fe(o,"IMAGELENGTH"),x=fe(o,"TILEWIDTH"),I=fe(o,"TILELENGTH"),R=[];if(c){const{bandCount:S}=this.rasterInfo;for(let T=0;T<S;T++){const v=T*(y+1)*(g+1)+e*(g+1)+r;R[T]={from:u[v],to:u[v]+f[v]-1}}}else{const S=e*(g+1)+r;R.push({from:u[S],to:u[S]+f[S]-1})}for(let S=0;S<R.length;S++)if(R[S].from==null||!R[S].to||R[S].to<0)return null;return{ranges:R,ifd:o,actualTileWidth:r===g&&p%x||x,actualTileHeight:e===y&&d%I||I}}async _fetchAuxiliaryMetaData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return qe(e)}catch{return null}}async _fetchAuxiliaryTable(t){try{const{data:e}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:t?.signal}),r=gs.parse(e);return r?.recordSet?Ge.fromJSON(r.recordSet):null}catch{return null}}};function xs(t){const e=Ii(t),{width:r,height:i,tileWidth:s,tileHeight:a,planes:n,pixelType:l,compression:o,firstPyramidLevel:c,maximumPyramidLevel:u,pyramidBlockWidth:f,pyramidBlockHeight:h,pyramidResolutions:m,tileBoundary:y,affine:g,metadata:p}=e,d=e.extent.spatialReference?.wkt||e.extent.spatialReference?.wkid;let x=Se(d),I=!!e.isPseudoGeographic;x==null&&(I=!0,x=new L({wkid:3857}));const R=new W({...e.extent,spatialReference:x}),S=new A(R?{x:R.xmin,y:R.ymax,spatialReference:x}:{x:0,y:0}),T=new Re({blockWidth:s,blockHeight:a,pyramidBlockWidth:f,pyramidBlockHeight:h,compression:o,origin:S,firstPyramidLevel:c,maximumPyramidLevel:u,pyramidResolutions:m,blockBoundary:y}),v=new A({x:(R.xmax-R.xmin)/r,y:(R.ymax-R.ymin)/i,spatialReference:x}),k=p?{BandProperties:p.bandProperties,DataType:p.dataType}:{};let _=null;const P=fe(t[0],"PHOTOMETRICINTERPRETATION"),F=Be(t[0],"COLORMAP");if(P<=3&&F?.length>3&&F.length%3==0){_=[];const O=F.length/3;for(let N=0;N<O;N++)_.push([N,F[N]>>>8,F[N+O]>>>8,F[N+2*O]>>>8])}const M=new ve({width:r,height:i,bandCount:n,pixelType:l,pixelSize:v,storageInfo:T,spatialReference:x,isPseudoSpatialReference:I,keyProperties:k,extent:R,colormap:_,statistics:p?p.statistics:null});if(g?.length&&(M.nativeExtent=new W({xmin:-.5,ymin:.5-i,xmax:r-.5,ymax:.5,spatialReference:x}),M.transform=new We({polynomialOrder:1,forwardCoefficients:[g[2]+g[0]/2,g[5]-g[3]/2,g[0],g[3],-g[1],-g[4]]}),M.extent=M.transform.forwardTransform(M.nativeExtent),M.pixelSize=new A({x:(R.xmax-R.xmin)/r,y:(R.ymax-R.ymin)/i,spatialReference:x}),T.origin.x=-.5,T.origin.y=.5),m){const{x:O,y:N}=M.pixelSize;m.forEach(D=>{D.x*=O,D.y*=N})}return{imageInfo:e,rasterInfo:M}}function ws(t,e){if(e.statistics=t.statistics??e.statistics,e.histograms=t.histograms,t.histograms&&e.statistics==null&&(e.statistics=ze(t.histograms)),t.transform&&e.transform==null){e.transform=t.transform,e.nativeExtent=e.extent;const r=e.transform.forwardTransform(e.nativeExtent);e.pixelSize=new A({x:(r.xmax-r.xmin)/e.width,y:(r.ymax-r.ymin)/e.height,spatialReference:e.spatialReference}),e.extent=r}e.isPseudoSpatialReference&&t.spatialReference&&(e.spatialReference=t.spatialReference,e.extent.spatialReference=e.nativeExtent.spatialReference=e.storageInfo.origin.spatialReference=e.spatialReference)}w([b()],se.prototype,"_files",void 0),w([b()],se.prototype,"_headerInfo",void 0),w([b()],se.prototype,"_bufferSize",void 0),w([b({type:String,json:{write:!0}})],se.prototype,"datasetFormat",void 0),se=w([K("esri.layers.support.rasterDatasets.TIFFRaster")],se);const Is=se,H=new Map;H.set("MRF",{desc:"Meta Raster Format",constructor:ds}),H.set("TIFF",{desc:"GeoTIFF",constructor:Is}),H.set("RasterTileServer",{desc:"Raster Tile Server",constructor:fs}),H.set("JPG",{desc:"JPG Raster Format",constructor:xe}),H.set("PNG",{desc:"PNG Raster Format",constructor:xe}),H.set("GIF",{desc:"GIF Raster Format",constructor:xe}),H.set("BMP",{desc:"BMP Raster Format",constructor:xe}),H.set("CovJSON",{desc:"COVJSON Raster Format",constructor:os}),H.set("MEMORY",{desc:"In Memory Raster Format",constructor:$e});class Pe{static get supportedFormats(){const e=new Set;return H.forEach((r,i)=>e.add(i)),e}static async open(e){const{url:r,ioConfig:i,source:s,sourceJSON:a}=e;let n=e.datasetFormat??i?.datasetFormat;n==null&&(r.includes(".")?n=r.slice(r.lastIndexOf(".")+1).toUpperCase():s?.type?.toLowerCase()==="coverage"?n="CovJSON":s?.extent&&s.pixelblocks&&(n="MEMORY")),n==="OVR"||n==="TIF"?n="TIFF":n==="JPG"||n==="JPEG"||n==="JFIF"?n="JPG":n==="COVJSON"&&(n="CovJSON"),r.toLowerCase().includes("/imageserver")&&!r.toLowerCase().includes("/wcsserver")&&(n="RasterTileServer");const l={url:r,source:s,sourceJSON:a,datasetFormat:n,ioConfig:i??{bandIds:null,sampling:null}};if(Object.keys(l).forEach(f=>{l[f]==null&&delete l[f]}),n){if(!this.supportedFormats.has(n))throw new C("rasterfactory:open","not a supported format "+n);if(n==="CRF")throw new C("rasterfactory:open",`cannot open raster: ${r}`);const f=new(H.get(n)).constructor(l);return await f.open({signal:e.signal}),f}const o=Array.from(H.keys()).filter(f=>f!=="CovJSON"&&f!=="Memory");let c=0;const u=()=>{if(n=o[c++],!n||n==="CRF")return null;const f=new(H.get(n)).constructor(l);return f.open({signal:e.signal}).then(()=>f).catch(()=>u())};return u()}static register(e,r,i){H.has(e.toUpperCase())||H.set(e.toUpperCase(),{desc:r,constructor:i})}}let E=class extends Wt(qi(Wi(Gi($t(Gt(ts(Vi(zt($i(Lt(wt(Ht)))))))))))){constructor(...t){super(...t),this._primaryRasters=[],this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=It(async(e,r,i)=>{const{save:s,saveAs:a}=await ot(()=>import("./imageryUtils-6MVSqijr-8FXWHvzM.js"),__vite__mapDeps([6,7,1,2,8,9,10,11,12,13,14,15]),import.meta.url);switch(e){case ye.SAVE:return s(this,r);case ye.SAVE_AS:return a(this,i,r)}})}normalizeCtorArgs(t,e){return typeof t=="string"?{url:t,...e}:t}load(t){const e=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},t).catch(bt).then(()=>this._openRaster(e))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const t=[new ce({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"}),new ce({name:"Raster.ServicePixelValue.Raw",alias:"Raw Pixel Value",domain:null,editable:!1,length:50,type:"string"})],e=this.raster?.rasterInfo??this.serviceRasterInfo,r=e?.attributeTable,i=r!=null?r.fields:null,s="Raster.";if(i){const l=i.filter(o=>o.type!=="oid"&&o.name.toLowerCase()!=="value").map(o=>{const c=o.clone();return c.name=s+o.name,c});t.push(...l)}const a=e?.dataType,n=e?.multidimensionalInfo;if((a==="vector-magdir"||a==="vector-uv")&&n!=null){const l=n.variables[0].unit?.trim(),o="Magnitude"+(l?` (${l})`:"");t.push(new ce({name:"Raster.Magnitude",alias:o,domain:null,editable:!1,type:"double"})),t.push(new ce({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}))}return t}createPopupTemplate(t){const{rasterFields:e}=this,r=t?.visibleFieldNames??new Set(e.map(({name:a})=>a).filter(a=>a.toLowerCase()!=="raster.servicepixelvalue.raw")),i=Ui({fields:e,title:this.title},{...t,visibleFieldNames:r}),{rasterInfo:s}=this.raster;return i?.fieldInfos&&s?.pixelType.startsWith("f")&&i.fieldInfos.forEach(({format:a,fieldName:n})=>{a&&n&&/^raster\.(item|service)pixelvalue/i.test(n)&&(a.places=2)}),i}async generateRasterInfo(t,e){if(t=Ae(Ne,t),await this.load(),!t||t.functionName?.toLowerCase()==="none")return this.serviceRasterInfo;try{const{rasterInfo:r}=await this._openFunctionRaster(t,e);return r}catch(r){throw r instanceof C?r:new C("imagery-tile-layer","the given raster function is not supported")}}async save(t){return this._debouncedSaveOperations(ye.SAVE,t)}async saveAs(t,e){return this._debouncedSaveOperations(ye.SAVE_AS,e,t)}write(t,e){const r=this._primaryRasters[0]??this.raster;if(this.loaded?r.datasetFormat==="RasterTileServer"&&(r.tileType==="Raster"||r.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(t,e);if(e?.messages){const i=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new C("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${i}'`,{layer:this}))}return null}async _openRaster(t){let e=!1;if(this.raster)await this._openFromRaster(this.raster,t),e=this.raster.datasetFormat==="Function",!e&&this.rasterFunction&&(this._primaryRasters=[this.raster],await this._initializeWithFunctionRaster(this.rasterFunction));else{const{url:i,rasterFunction:s,source:a}=this;if(!i&&!a)throw new C("imagery-tile-layer:open","missing url or source parameter");a?await this._openFromSource(a,t):s?await this._openFromUrlWithRasterFunction(i,s,t):await this._openFromUrl(i,t)}const r=this.raster.rasterInfo;if(!r)throw new C("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",e?r:this._primaryRasters[0].rasterInfo),this._set("spatialReference",r.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const i=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(i,{origin:"service"})}else this.read({tileInfo:this.serviceRasterInfo?.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(Rt(()=>this.customParameters,i=>{this.raster&&(this.raster.ioConfig.customFetchParameters=i)}))}async _openFromRaster(t,e){t.rasterInfo||await t.open({signal:e}),this._primaryRasters=t.datasetFormat==="Function"?t.primaryRasters.rasters:[t],this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(t,e,r){const i=[t];e&&Li(e.toJSON(),i);const s=await Promise.all(i.map(n=>Pe.open({url:n,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:r}))),a=s.findIndex(n=>n==null);if(a>-1)throw new C("imagery-tile-layer:open",`cannot open raster: ${i[a]}`);return this._primaryRasters=s,this._initializeWithFunctionRaster(e)}async _openFromUrl(t,e){const r=await Pe.open({url:t,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(r==null)throw new C("imagery-tile-layer:open",`cannot open raster: ${t}`);this._primaryRasters=[r],this.raster=r}async _openFromSource(t,e){const r="the tiled imagery data source is not supported",i=t.type?.toLowerCase()==="coverage"?"CovJSON":t.extent&&t.pixelBlock?"MEMORY":null;if(!i)throw new C("imagery-tile-layer:open",r);i==="MEMORY"&&(t={...t,pixelBlock:void 0,pixelBlocks:[t.pixelBlock]});const s=await Pe.open({url:"",source:t,datasetFormat:i,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(s==null)throw new C("imagery-tile-layer:open",r);this._primaryRasters=[s],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=s}async _openFunctionRaster(t,e){const r={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(a=>r[a.url]=a);const i=pt(t.functionDefinition?.toJSON()??t.toJSON(),r),s=new dt({rasterFunction:i});return await s.open(e),s}async _initializeWithFunctionRaster(t,e){try{this.raster=await this._openFunctionRaster(t,e)}catch(r){r instanceof C&&ne.getLogger(this).error("imagery-tile-layer:open",r.message),ne.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}};w([b({clonable:!1})],E.prototype,"_primaryRasters",void 0),w([b(ri)],E.prototype,"legendEnabled",void 0),w([b({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],E.prototype,"isReference",void 0),w([b({type:["show","hide"]})],E.prototype,"listMode",void 0),w([b({json:{read:!0,write:!0}})],E.prototype,"blendMode",void 0),w([b()],E.prototype,"sourceJSON",void 0),w([b({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],E.prototype,"version",void 0),w([b({readOnly:!0,json:{read:!1}})],E.prototype,"type",void 0),w([b({type:["ArcGISTiledImageServiceLayer"]})],E.prototype,"operationalLayerType",void 0),w([b({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(t,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(t,e,r){e[r]=!t}}}})],E.prototype,"popupEnabled",void 0),w([b({type:vt,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],E.prototype,"popupTemplate",void 0),w([b({readOnly:!0})],E.prototype,"defaultPopupTemplate",null),w([b({readOnly:!0,type:[ce]})],E.prototype,"fields",void 0),w([b({readOnly:!0,type:[ce]})],E.prototype,"rasterFields",null),w([b({constructOnly:!0})],E.prototype,"source",void 0),E=w([K("esri.layers.ImageryTileLayer")],E);const Er=E;export{Er as default};
