import{_ as g,at as D}from"./main-D7vwjMDX.js";import{B as y}from"./TextureFormat-Cl0ugX3E-DD0Aw8RG.js";import{t as d}from"./enums-DBi1-Mm2-CUS1pvQe.js";function S(){return C??=(async()=>{const t=await g(()=>import("./basis_encoder-QK0wY8EP-B4fUGqC0.js"),[],import.meta.url),r=await t.default({locateFile:e=>D(`esri/libs/basisu/${e}`)});return r.initializeBasis(),r})(),C}let C;function R(){return A??=(async()=>await(await g(async()=>{const{default:t}=await import("./dxt_encoder-DXgFKsFV-CnY5C0MH.js");return{default:t}},[],import.meta.url)).default({locateFile:t=>D(`esri/libs/dxtEncoder/${t}`)}))(),A}let A,B,X,c=null,T=null;class w{constructor(r,e){this.internalFormat=r,this.compressedTexture=e}}async function j(t){const r=v(t.data,t.flipped);if(t.hasS3TC){T||await b();const e=new Uint8Array(r.length);T?.encode(new Uint8Array(r),t.width,t.height,e);const a=H(e,!0),i=[e.buffer];return{result:new w(a?.internalFormat??null,a?.textureData??null),transferList:i}}if(t.hasETC){c||await x();const e=await F(r,t.width,t.height,t.hasMipmap),a=e?await O(e):null,i=a?.compressedTexture?.levels.map(o=>o.buffer)||[];return{result:new w(a?.internalFormat??null,a?.compressedTexture??null),transferList:i}}return{result:new w(null,null)}}async function x(){c||(c=await(B??=S()))}async function b(){T||(T=await(X??=R()))}async function F(t,r,e,a,i=255,o=0,s=!1,l=!1){if(!c)return null;const n=new c.BasisEncoder;n.setPerceptual(!l),n.setCheckForAlpha(!0),n.setForceAlpha(!1),n.setRenormalize(l),n.setMipGen(a),n.setMipSRGB(!l),n.setCreateKTX2File(!0),n.setKTX2SRGBTransferFunc(!l),n.setQualityLevel(i),n.setCompressionLevel(o);const m=new Uint8Array(t.byteLength);n.setSliceSourceImage(0,new Uint8Array(t),r,e,s);const h=n.encode(m),u=new Uint8Array(m.buffer,0,h),f=new c.KTX2File(new Uint8Array(u));return f.isValid()?(n.delete(),u):(f.close(),f.delete(),n.delete(),null)}async function O(t){if(!c)return new w(null,null);const r=new c.KTX2File(new Uint8Array(t));r.startTranscoding();const[e,a]=r.getHasAlpha()?[y.ETC2_RGBA,d.COMPRESSED_RGBA8_ETC2_EAC]:[y.ETC1_RGB,d.COMPRESSED_RGB8_ETC2],i=r.getLevels(),o=[];for(let s=0;s<i;s++)o.push(new Uint8Array(r.getImageTranscodedSizeInBytes(s,0,0,e))),r.transcodeImage(o[s],s,0,0,e,0,-1,-1);return r.close(),r.delete(),{internalFormat:a,compressedTexture:{type:"compressed",levels:o}}}function v(t,r=!1){const e=new OffscreenCanvas(t.width,t.height),a=e.getContext("2d");return r&&a.scale(1,-1),a.drawImage(t,0,r?-t.height:0),a.getImageData(0,0,e.width,e.height).data}const G=31,M=1,I=2,P=3,U=4,L=7,K=21,k=131072;function _(t){return t.charCodeAt(0)+(t.charCodeAt(1)<<8)+(t.charCodeAt(2)<<16)+(t.charCodeAt(3)<<24)}const z=_("DXT1"),$=_("DXT3"),V=_("DXT5");function H(t,r){const e=new Int32Array(t.buffer,t.byteOffset,G);let a,i;switch(e[K]){case z:a=8,i=d.COMPRESSED_RGB_S3TC_DXT1_EXT;break;case $:a=16,i=d.COMPRESSED_RGBA_S3TC_DXT3_EXT;break;case V:a=16,i=d.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;default:return null}let o=1,s=e[U],l=e[P];(3&s||3&l)&&(s=s+3&-4,l=l+3&-4);const n=s,m=l;let h,u;e[I]&k&&r!==!1&&(o=Math.max(1,e[L]));let f=t.byteOffset+e[M]+4;const p=[];for(let E=0;E<o;++E)u=(s+3>>2)*(l+3>>2)*a,h=new Uint8Array(t.buffer,f,u),p.push(h),f+=u,s=Math.max(1,s>>1),l=Math.max(1,l>>1);return{textureData:{type:"compressed",levels:p},internalFormat:i,width:n,height:m}}export{w as TextureCompressionWorkerOutput,j as compress,F as compressRGBADataToKTX2,O as createTextureDataKTX2,x as initializeBasisEncoder,b as initializeDXTEncoder};
