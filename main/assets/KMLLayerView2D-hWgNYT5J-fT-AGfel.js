import{ag as B,ah as W,aW as $,aA as S,n as k,J as U,cL as z,u as A,X as O,v,S as C,i as N,w as E,f as X}from"./main-HjhJfS1t.js";import{W as H,K as T}from"./projection-BA9M1R7d-MdL79yQO.js";import{L as D,j as K,T as J}from"./kmlUtils-C5oIEoOy-BB6AAXKF.js";import{y as Y}from"./utils-9sQxfkoa-CpqzcjFI.js";import{o as P}from"./GraphicsCollection-CWTXNZOX-BRpqFm40.js";import{I as Q,p as Z,x as tt}from"./Bitmap-CcqmzvfR-CnhkUaxo.js";import{d as it}from"./BitmapContainer-BC8fvmFc-B-SsaQEU.js";import{X as et,Y as rt}from"./LayerView-Bish-E63-C1rGcHvW.js";import{d as M}from"./GraphicContainer-DuOHUciE-CGgJRM7p.js";import{X as R}from"./GraphicsView2D-C4wYE2ut-Cr10Z-oQ.js";import{W as at,K as st}from"./rasterProjectionHelper-Calp0o_1-ZmhLXt_A.js";import{F as ot}from"./WGLContainer-LxgEo4I_-CXOgLqNr.js";import{U as nt,p as lt}from"./RenderingContext-DbCVbtGZ-Km29UKtG.js";import{G as L,U as pt,F as mt,X as q}from"./enums-DBi1-Mm2-CUS1pvQe.js";import{G as ht}from"./Program-DLVwTiPA-DyMdkBK9.js";import{M as ct}from"./rasterUtils-DqAu9qES-CsEKPzOX.js";import{H as j,V as dt}from"./Texture-BCt2hphT-KQCvDaIm.js";import"./projectBuffer-CvCBvJ6W-DgEe7XTN.js";import"./jsonUtils-C64Zfu7c-DZXdMoHk.js";import"./UniqueValueRenderer-fS5V0Ej1-DBwZhO0i.js";import"./RendererLegendOptions-K3md58-X-DfZXL09N.js";import"./diffUtils-Cz3Fi8Xb-DuWjXXFl.js";import"./colorRamps-q0bZVhs2-CCGyN-IX.js";import"./sizeVariableUtils-t52KcLLi-D0hbQF8b.js";import"./visualVariableUtils-D3kZJRyn-CCH69LRd.js";import"./compilerUtils-CV1QYWI8-DzybxtAt.js";import"./lengthUtils-DKpMe5qR-CydOq06P.js";import"./styleUtils-BtpNqZyT-B9ffi6jz.js";import"./LRUCache-C3erQTWv-CF9hRRn4.js";import"./Version-CoKzbupV-BOmXepPh.js";import"./FieldsIndex-HmzMbJQG-xuATDj32.js";import"./UnknownTimeZone-C--TOcPG-DDTOsG7u.js";import"./OverrideHelper-DWRbVlj1-BX9AY_U4.js";import"./colorUtils-Cthpxcks-D2797w_t.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./vec4f64-hf2nxvhQ-CaAr8PTM.js";import"./utils-SPbpQbmm-hHwKrvKR.js";import"./enums-CpSG_SL3-BMD3Tb1v.js";import"./quantizationUtils-bJy1cRwp-DM_8NTRo.js";import"./heatmapUtils-seiMkkkR-DlwSWD2k.js";import"./FeatureSet-BkVNthuN-CUQ1JQHY.js";import"./Field-C6hA1tZj-8GIdjsMu.js";import"./fieldType-CD2CL2hr-CsZrkvIv.js";import"./mat3-CC4Foazl-BWjyqE2v.js";import"./MapView-BGOJJ8ch-Pn9Gud24.js";import"./Cyclical-C_9rKUUQ-DJYTyGwf.js";import"./CollectionFlattener-DkHuHn5E-Ob7a4psH.js";import"./workers-PiCjreoO-7fA9ZdTV.js";import"./TileInfo-CWIRDhZl-DU8cUEwZ.js";import"./TileKey-B_6qmYK--BtZdR-Xy.js";import"./themeUtils-YjM7iIiX-9TzVnqWZ.js";import"./uuid-Dj9mdEVg-BaKSCiyT.js";import"./UpdatingHandles-CUu3u1ms-BfeG9J6a.js";import"./signal-CETehA7D-wgqetV9r.js";import"./Map-1zd11DKO-DHPcQy9F.js";import"./Basemap-BEqqSTw9-BzsL1QnS.js";import"./loadAll-e978YItg-Ds9Gbc5Y.js";import"./PortalItem-CctGdnxF-DStVe_aK.js";import"./writeUtils-D5qlLkwk-DlnbHry9.js";import"./mat4f32-CiZjBg9k-CUm34GoR.js";import"./mat4-DX7gBViE-BCUiNVio.js";import"./TablesMixin-C8RojhYs-DJeaCwvs.js";import"./Layer-ChoECxvZ-BpZob3Zy.js";import"./TimeExtent-Cn0Jofqr-C5lrc1nl.js";import"./HeightModelInfo-C5vFqzyF-2QhmkHp1.js";import"./ReactiveMap-CFk6jPfN-DVplxOZV.js";import"./Query-BrwMGK8U-DfGCVsUH.js";import"./arcgisLayerUrl-HNYh8jvG-BoQCuTgJ.js";import"./ViewingMode-CyR_b1T8-_s7_Gbsk.js";import"./vec2f64-CeODonrJ-CkkJCdRC.js";import"./vec2-tHZ6OaOy-xCj1obDt.js";import"./Tile-D75RMC64-CkGi4tAS.js";import"./TileKey-C5IL-JBr-qPCZVe7u.js";import"./QueueProcessor-DbfV9fLy-DkhvBWYS.js";import"./quickselect-DHTstthl-Ds_Aj0x5.js";import"./normalizeUtils-Bxmy9MNI-BBOdkrl7.js";import"./normalizeUtilsCommon-CRJlkfEA-DeWCWLts.js";import"./utils-Bq23Xwmj-CIF4099l.js";import"./vec2f32-CVhmN3Me-DxoqVD7C.js";import"./unitBezier-CGtWxaCq-BRwEDigF.js";import"./Scheduler-B7UX7Wr5-D93u05vS.js";import"./vec32-D9GsKZ1t-Bnta7emV.js";import"./definitions-DJSdSb77-DkoRHaVx.js";import"./imageUtils-BA2D6Uf1-Dt0ll5Hn.js";import"./capabilities-agoTWNzb-CtsNgRyk.js";import"./ColorBackground-gVZldRLm-tWNQoISZ.js";import"./Container-BcuL1ZEG-7SBu-djm.js";import"./parser-DyDJ-rlI-CZQ4uMI9.js";import"./layerViewUtils-DURAPenP-DO5hEIB4.js";import"./AGraphicContainer-LUCT6Gle-BQFhc7nw.js";import"./TechniqueInstance-DGTKoOL6-vGUciV4m.js";import"./UpdateTracking2D-Du_WIf4G-DbJ37KKH.js";import"./BidiEngine-Bdqv5H5j-Dyqh9XG-.js";import"./OptimizedFeature-EIithYlr-Cq64mIT3.js";import"./GeometryUtils-NHgB9gGQ-BnpW4hKj.js";import"./Rect-DD6XS68q-D_hsV3ag.js";import"./LabelMetric-BeluzH3o--LUNTMdT.js";import"./VertexElementDescriptor-BAy1DPb3-BOhpDZGx.js";import"./BindType-9iOk18Ed-CRW1cdX4.js";import"./Util-BjGjeg6f-08Szkf4F.js";import"./TileContainer-D48pXXgL-D0r4IWYq.js";import"./FeatureCommandQueue-DzV-HBIG-CHc42aKf.js";import"./BufferObject-BM_7mcDb-BlXNXED4.js";import"./VertexArrayObject-M4iRGGoi-BSEHNge1.js";import"./constants-Bqe1QJ4u-F8oTIn7N.js";import"./vec3f32-BS0cezmI-B_madU1n.js";import"./AttributeStore-DjyP9U7y-CeabT9ls.js";import"./TimeOnly-DSMefxKy-Bm5JO0Ea.js";import"./timeSupport-jPViR5jn-D7l9kF5n.js";import"./featureConversionUtils-D6hFQ4Af-BphDB5if.js";import"./OptimizedFeatureSet-DfZGBuxJ-C08BOAgi.js";import"./queryUtils-Brxu6254-DuBOoAny.js";import"./json-BI97KiBB-Ce5cWfI2.js";import"./labelUtils-BW14kBqX-BPbeJjWN.js";import"./normalizeUtilsSync-CBU7m8rm-Da5rz6yx.js";import"./ProgramTemplate-DQOm6Omy-DLJrjqUQ.js";import"./StyleDefinition-Ct4HIk9T-B82pTf0h.js";import"./config-nuMERBvb-MDUrh2eL.js";import"./earcut-XDcq3zAf-BcwyrT7l.js";import"./webglDeps-Bgavuh0h-clXomTZY.js";import"./NestedMap-Ddo7BfvO-BpVPk8mz.js";import"./renderState-Dap0WV9P-D4IHxyei.js";import"./basicInterfaces-Dsf65ICa-DkQ9Rsnx.js";import"./interfaces-DN2-jsJC-DzMTiT5R.js";import"./testSVGPremultipliedAlpha-DoZe_f0d-BvOvxU9c.js";import"./floatRGBA-4pIJN00G-CZVe814a.js";import"./doublePrecisionUtils-BJbYwoii-kIP-tL_t.js";class m{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(m._instance)return m._instanceRefCount++,m._instance;m._instanceRefCount=1,m._instance=this,this._ownsRctx=!0;const e=document.createElement("canvas").getContext("webgl2");e.getExtension("OES_texture_float"),this._rctx=new nt(e,{})}const r={applyProjection:!0,bilinear:!1,bicubic:!1},s=lt("raster/reproject","raster/reproject",new Map([["a_position",0]]),r);this._program=this._rctx.programCache.acquire(s.shaders.vertexShader,s.shaders.fragmentShader,s.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new ot(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,r,s=!1){const e=T(t.extent,r),a=new E({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:l,y:p}=at(a,r,t.extent);let o=(l+p)/2;const n=Math.round((e.xmax-e.xmin)/o),u=Math.round((e.ymax-e.ymin)/o);o=(e.width/n+e.height/u)/2;const I=new E({x:o,y:o,spatialReference:e.spatialReference}),g=st({projectedExtent:e,srcBufferExtent:t.extent,pixelSize:I,hasWrapAround:!0,spacing:[16,16]}),w=ct(this._rctx,g),y=new j(n,u);y.wrapMode=L.CLAMP_TO_EDGE;const h=new ht(this._rctx,y);this._rctx.bindFramebuffer(h),this._rctx.setViewport(0,0,n,u),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(w,1),this._quad.bind();const{width:x=0,height:f=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",x,f),this._program.setUniform2fv("u_transformSpacing",g.spacing),this._program.setUniform2fv("u_transformGridSize",g.size),this._program.setUniform2f("u_targetImageSize",n,u),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),w.dispose(),s){const{width:c,height:V}=h,_=new ImageData(c??0,V??0);h.readPixels(0,0,c??0,V??0,pt.RGBA,mt.UNSIGNED_BYTE,_.data);const F=h.detachColorTexture(q.COLOR_ATTACHMENT0);return h.dispose(),{texture:F,extent:e,imageData:_}}const b=h.detachColorTexture(q.COLOR_ATTACHMENT0);return h.dispose(),{texture:b,extent:e}}reprojectBitmapData(t,r){const s=Z(t.bitmapData)?tt(t.bitmapData):t.bitmapData,e=new j;e.wrapMode=L.CLAMP_TO_EDGE,e.width=t.bitmapData.width,e.height=t.bitmapData.height;const a=new dt(this._rctx,e,s),l=this.reprojectTexture({texture:a,extent:t.extent},r,!0);l.texture.dispose();const p=document.createElement("canvas"),o=l.imageData;return p.width=o.width,p.height=o.height,p.getContext("2d").putImageData(o,0,0),{bitmapData:p,extent:l.extent}}async loadAndReprojectBitmapData(t,r,s){const e=(await X(t,{responseType:"image"})).data,a=document.createElement("canvas");a.width=e.width,a.height=e.height;const l=a.getContext("2d");l.drawImage(e,0,0);const p=l.getImageData(0,0,a.width,a.height);if(r.spatialReference.equals(s))return{bitmapData:p,extent:r};const o=this.reprojectBitmapData({bitmapData:p,extent:r},s);return{bitmapData:o.bitmapData,extent:o.extent}}destroy(){this._ownsRctx?(m._instanceRefCount--,m._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),m._instance=null)):(this._quad.dispose(),this._program.dispose())}}m._instanceRefCount=0;class G{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let d=class extends et(rt){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new it,this._kmlVisualData=new G,this._fetchController=null,this.allVisiblePoints=new P,this.allVisiblePolylines=new P,this.allVisiblePolygons=new P,this.allVisibleMapImages=new B}async hitTest(i,t){const r=this.layer;return[this._pointsView?.hitTest(i),this._polylinesView?.hitTest(i),this._polygonsView?.hitTest(i)].flat().filter(Boolean).map(s=>(s.layer=r,s.sourceLayer=r,{type:"graphic",graphic:s,layer:r,mapPoint:i}))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new R({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new R({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new R({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",i=>{i.added.forEach(t=>this._addMapImage(t)),i.removed.forEach(t=>this._removeMapImage(t))}),W(()=>this.layer.visibleSublayers,i=>{for(const t of this._kmlVisualData.allSublayers.values())t.visibility=0;for(const t of i){const r=this._kmlVisualData.allSublayers.get(t.id);r&&(r.visibility=1)}this._refreshCollections()})]),this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new m}detach(){this._fetchController=$(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=S(this._polygonsView),this._polylinesView=S(this._polylinesView),this._pointsView=S(this._pointsView),this._imageReprojector=S(this._imageReprojector)}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){(this.view.spatialReference?.isWGS84||this.view.spatialReference?.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(i.href,k.fromJSON(i.extent),this.view.spatialReference).then(t=>{const r=new Q(t.bitmapData);r.x=t.extent.xmin,r.y=t.extent.ymax,r.resolution=t.extent.width/t.bitmapData.width,r.rotation=i.rotation,this._mapImageContainer.addChild(r),this._bitmapIndex.set(i,r)})}async _getViewDependentUrl(i,t){const{viewFormat:r,viewBoundScale:s,httpQuery:e}=i;if(r!=null){if(t==null)throw new Error("Loading this network link requires a view state.");let a;if(await H(),s!=null&&s!==1){const c=new k(t.extent);c.expand(s),a=c}else a=t.extent;a=T(a,U.WGS84);const l=T(a,U.WebMercator),p=a.xmin,o=a.xmax,n=a.ymin,u=a.ymax,I=t.size[0]*t.pixelRatio,g=t.size[1]*t.pixelRatio,w=Math.max(l.width,l.height),y={"[bboxWest]":p.toString(),"[bboxEast]":o.toString(),"[bboxSouth]":n.toString(),"[bboxNorth]":u.toString(),"[lookatLon]":a.center.x.toString(),"[lookatLat]":a.center.y.toString(),"[lookatRange]":w.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":a.center.x.toString(),"[lookatTerrainLat]":a.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":a.center.x.toString(),"[cameraLat]":a.center.y.toString(),"[cameraAlt]":w.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":I.toString(),"[vertPixels]":g.toString(),"[terrainEnabled]":"0","[clientVersion]":z,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},h=c=>{for(const V in c){let _;for(_ in y)c[V]=c[V].replace(_,y[_])}},x=A(r);h(x);let f={};e!=null&&(f=A(e),h(f));const b=Y(i.href);return b.query={...b.query,...x,...f},`${b.path}?${O(x)}`}return i.href}async _fetchService(i){const t=new G;await this._loadVisualData(this.layer.url,t,i),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i))}_isSublayerVisible(i){const t=this._kmlVisualData.allSublayers.get(i);return!!t?.visibility&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(i,t,r){return this._fetchParsedKML(i,r).then(async s=>{for(const e of s.sublayers){t.allSublayers.set(e.id,e);const a=e.points?await D(e.points):[],l=e.polylines?await D(e.polylines):[],p=e.polygons?await D(e.polygons):[],o=e.mapImages||[];if(t.allPoints.push(...a.map(n=>({item:n,sublayerId:e.id}))),t.allPolylines.push(...l.map(n=>({item:n,sublayerId:e.id}))),t.allPolygons.push(...p.map(n=>({item:n,sublayerId:e.id}))),t.allMapImages.push(...o.map(n=>({item:n,sublayerId:e.id}))),e.networkLink){const n=await this._getViewDependentUrl(e.networkLink,this.view.state);await this._loadVisualData(n,t,r)}}})}_fetchParsedKML(i,t){return K(i,this.layer.spatialReference,this.layer.refreshInterval,t).then(r=>J(r.data))}_removeMapImage(i){const t=this._bitmapIndex.get(i);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(i))}};v([C()],d.prototype,"_pointsView",void 0),v([C()],d.prototype,"_polylinesView",void 0),v([C()],d.prototype,"_polygonsView",void 0),v([C()],d.prototype,"updating",void 0),d=v([N("esri.views.2d.layers.KMLLayerView2D")],d);const Ae=d;export{Ae as default};
