import{ac as T,N as A,a1 as q,aM as _,d6 as z,Y as S,d7 as L,h as m,p as x,Q as M,v as d,S as y,q as P,a2 as I,aD as C,s as U,n as N,d8 as k}from"./main-COUzu-Id.js";import{G as j}from"./ByteSizeUnit-DL8UhsB0-B2-AmVRx.js";import{i as E}from"./LRUCache-DPWdPNTF-Du_Z0yHt.js";import{e as H}from"./TileKey-B_6qmYK--BtZdR-Xy.js";import{c as J}from"./memoryEstimations-DeWfxwaV-CYfPq2ju.js";function R(e,t=!1){return e<=k?t?new Array(e).fill(0):new Array(e):new Uint32Array(e)}class w{constructor(t){G(t);const{location:a,data:i}=t;this.location=Object.freeze(P(a));const l=this.location.width,s=this.location.height;let o=!0,r=!0;const c=Math.ceil(l*s/32),n=R(c);let h=0;for(let f=0;f<i.length;f++){const p=f%32;i[f]?(r=!1,n[h]|=1<<p):o=!1,p===31&&++h}r?(this._availability="unavailable",this.byteSize=40):o?(this._availability="available",this.byteSize=40):(this._availability=n,this.byteSize=40+J(n))}getAvailability(t,a){if(this._availability==="unavailable"||this._availability==="available")return this._availability;const i=(t-this.location.top)*this.location.width+(a-this.location.left),l=i%32,s=i>>5,o=this._availability;return s<0||s>o.length?"unknown":o[s]&1<<l?"available":"unavailable"}static fromDefinition(t,a){const i=t.service.request||A,{row:l,col:s,width:o,height:r}=t,c={query:{f:"json"}};return a=a?{...c,...a}:c,i(F(t),a).then(n=>n.data).catch(n=>{if(n?.details?.httpStatus===422)return{location:{top:l,left:s,width:o,height:r},valid:!0,data:new Array(o*r).fill(0)};throw n}).then(n=>{if(n.location&&(n.location.top!==l||n.location.left!==s||n.location.width!==o||n.location.height!==r))throw new m("tilemap:location-mismatch","Tilemap response for different location than requested",{response:n,definition:{top:l,left:s,width:o,height:r}});return w.fromJSON(n)})}static fromJSON(t){return Object.freeze(new w(t))}}function $(e){return`${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`}function F(e){let t;if(e.service.tileServers?.length){const i=e.service.tileServers;t=`${i&&i.length?i[e.row%i.length]:e.service.url}/tilemap/${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`}else t=`${e.service.url}/tilemap/${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`;const a=e.service.query;return a&&(t=`${t}?${a}`),t}function G(e){if(!e?.location)throw new m("tilemap:missing-location","Location missing from tilemap response");if(e.valid===!1)throw new m("tilemap:invalid","Tilemap response was marked as invalid");if(!e.data)throw new m("tilemap:missing-data","Data missing from tilemap response");if(!Array.isArray(e.data))throw new m("tilemap:data-mismatch","Data must be an array of numbers");if(e.data.length!==e.location.width*e.location.height)throw new m("tilemap:data-mismatch","Number of data items does not match width/height of tilemap")}var v;function D(e,t,a){return new m("tile-map:tile-unavailable","Tile is not available",{level:e,row:t,col:a})}let u=class extends T{static{v=this}constructor(e){super(e),this._pendingTilemapRequests={},this.request=A,this.size=32,this._prefetchingEnabled=!0}initialize(){this._tilemapCache=new E(2*j.MEGABYTES),this.addHandles(q(()=>{const{layer:e}=this;return[e?.parsedUrl,e?.tileServers,e?.apiKey,e?.customParameters]},()=>this._initializeTilemapDefinition(),I))}get effectiveMinLOD(){return this.minLOD??this.layer.tileInfo.lods[0].level}get effectiveMaxLOD(){return this.maxLOD??this.layer.tileInfo.lods[this.layer.tileInfo.lods.length-1].level}getAvailability(e,t,a){if(!this.layer.tileInfo.lodAt(e)||e<this.effectiveMinLOD||e>this.effectiveMaxLOD)return"unavailable";const i=this._tilemapFromCache(e,t,a,this._tmpTilemapDefinition);return i?i.getAvailability(t,a):"unknown"}fetchAvailability(e,t,a,i){return!this.layer.tileInfo.lodAt(e)||e<this.effectiveMinLOD||e>this.effectiveMaxLOD?Promise.reject(D(e,t,a)):this._fetchTilemap(e,t,a,i).catch(l=>l).then(l=>{if(l instanceof w){const s=l.getAvailability(t,a);if(s==="unavailable")throw D(e,t,a);return s}if(_(l))throw l;return"unknown"})}fetchAvailabilityUpsample(e,t,a,i,l){i.level=e,i.row=t,i.col=a;const s=this.layer.tileInfo;s.updateTileInfo(i);const o=this.fetchAvailability(e,t,a,l).catch(r=>{if(_(r))throw r;if(s.upsampleTile(i))return this.fetchAvailabilityUpsample(i.level,i.row,i.col,i,l);throw r});return this._fetchAvailabilityUpsamplePrefetch(i.id,e,t,a,l,o),o}async _fetchAvailabilityUpsamplePrefetch(e,t,a,i,l,s){if(!this._prefetchingEnabled||e==null)return;const o=`prefetch-${e}`;if(this.hasHandles(o))return;const r=new AbortController;s.then(()=>r.abort(),()=>r.abort());let c=!1;const n=C(()=>{c||(c=!0,r.abort())});if(this.addHandles(n,o),await z(10,r.signal).catch(()=>{}),c||(c=!0,this.removeHandles(o)),S(r))return;const h=new H(e,t,a,i),f={...l,signal:r.signal},p=this.layer.tileInfo;for(let O=0;v._prefetches.length<v._maxPrefetch&&p.upsampleTile(h);++O){const b=this.fetchAvailability(h.level,h.row,h.col,f);v._prefetches.push(b);const g=()=>{v._prefetches.removeUnordered(b)};b.then(g,g)}}static{this._maxPrefetch=4}static{this._prefetches=new L({initialSize:v._maxPrefetch})}_fetchTilemap(e,t,a,i){if(!this.layer.tileInfo.lodAt(e)||e<this.effectiveMinLOD||e>this.effectiveMaxLOD)return Promise.reject(new m("tilemap-cache:level-unavailable",`Level ${e} is unavailable in the service`));const l=this._tmpTilemapDefinition,s=this._tilemapFromCache(e,t,a,l);if(s)return Promise.resolve(s);const o=i?.signal;return i={...i,signal:null},new Promise((r,c)=>{x(o,()=>c(U()));const n=$(l);let h=this._pendingTilemapRequests[n];if(!h){h=w.fromDefinition(l,i).then(p=>(this._tilemapCache.put(n,p,p.byteSize),p));const f=()=>{delete this._pendingTilemapRequests[n]};this._pendingTilemapRequests[n]=h,h.then(f,f)}h.then(r,c)})}_initializeTilemapDefinition(){if(!this.layer.parsedUrl)return;const{parsedUrl:e,apiKey:t,customParameters:a}=this.layer;this._tilemapCache.clear(),this._tmpTilemapDefinition={service:{url:e.path,query:M({...e.query,...a,token:t??e.query?.token}),tileServers:this.layer.tileServers,request:this.request},width:this.size,height:this.size,level:0,row:0,col:0}}_tilemapFromCache(e,t,a,i){i.level=e,i.row=t-t%this.size,i.col=a-a%this.size;const l=$(i);return this._tilemapCache.get(l)}get test(){}};d([y({constructOnly:!0})],u.prototype,"layer",void 0),d([y({constructOnly:!0})],u.prototype,"minLOD",void 0),d([y({constructOnly:!0})],u.prototype,"maxLOD",void 0),d([y({constructOnly:!0})],u.prototype,"request",void 0),d([y({constructOnly:!0})],u.prototype,"size",void 0),u=v=d([N("esri.layers.support.TilemapCache")],u);export{u};
