const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./imageryUtils-DHYzIRVX-wwtQJ-Ps.js","./utils-DyDDSDvN-CE3R339E.js","./main-EwgNzfuX.js","./main-CSt-K0uB.css","./originUtils-BLsWtgV9-B4sclfuf.js","./multiOriginJSONSupportUtils-DGETddQl-BrWaY9_8.js","./PortalItem-BP-IQXnZ-RIelpdBE.js","./jsonContext-C9WBVzLb-BuAAHdqZ.js","./portalItemUtils-BfWDJg-S-CZqzMV96.js","./projectionUtils-B-CplN3q-CjeB6JLP.js","./saveUtils-W0sSii7v-D7K2zjmq.js","./datasetUtils-DYlC2Qty-oy5A_XnQ.js","./Field-BIQ-quF4-DDZ7tud0.js","./fieldType-PhcL4ff8-Bty-lZyk.js"])))=>i.map(i=>d[i]);
import{v as S,S as C,n as Y,x as Be,bv as Ae,t as Le,aF as Je,h as F,a1 as $e,a6 as de,bw as ze,o as G,ar as B,cN as Ce,an as Ue,s as He,b0 as Ge,M as qe,l as V,_ as We,mc as je,a8 as ve,ad as Ve,bX as Ye}from"./main-EwgNzfuX.js";import{w as Xe}from"./MultiOriginJSONSupport-BqiFJbbt-QOjJcaKr.js";import{e as Ke}from"./Layer-DvVVmz9x-CvqvKev0.js";import{a as Ze}from"./ArcGISService-B6M5rzsr-BoRRhKo1.js";import{u as Qe}from"./BlendLayer-DjW_5k0v-DH567a6o.js";import{i as et}from"./CustomParametersMixin-CSMgHDaw-DwKO4brQ.js";import{P as tt,E as st,w as Z,a as L,l as $,J as ue,U as Fe,B as j,C as se}from"./xmlUtilities-Cc4C-gHm-B1ZHgHcN.js";import{u as it,a as at}from"./OperationalLayer-CbXUnTH0-C_A72Sf5.js";import{x as rt}from"./PortalLayer-B34ZUA2x-BTQniV7t.js";import{s as nt,g as Me}from"./RasterJobHandlerMixin-DESVihMQ-BDoryi9Q.js";import{n as ot,r as lt,i as ct}from"./RasterPresetRendererMixin-CdHfKJ2u-BORdbxPV.js";import{T as ut}from"./RefreshableLayer-Qpvyi8qY-CymQQgwM.js";import{S as ft}from"./ScaleRangeLayer-x42fwED3-lLwD-0FW.js";import{x as pt}from"./TemporalLayer-lQRje9wB-DNbrpaHe.js";import{m as Se}from"./Field-BIQ-quF4-DDZ7tud0.js";import{K as ht,X as mt,a as dt,n as yt,t as gt,i as wt,y as xt,l as It,j as bt,N as vt,b as St,p as Tt}from"./datasetUtils-DYlC2Qty-oy5A_XnQ.js";import{c as Rt,a as _t,q as Ot,V as re}from"./dataUtils-CfR0oe2x-BDgxCo8p.js";import{v as Ct}from"./pixelRangeUtils-DcEknavd-DdeXXJfY.js";import{Z as le,v as Ft,q as ke,A as ge,e as Mt,Q as we,C as kt,D as Pt,E as Nt,H as Dt,I as Te,L as Et,M as Bt,N as Re,O as At,R as Lt,W as _e}from"./RasterSymbolizer-BN6RVtx9-B-N1Fkos.js";import{c as Pe}from"./FeatureSet-BVGGhhH9-COyPXBPI.js";import{c as xe,d as Jt}from"./PolynomialTransform-XpKTtnAc-DsMqZCYr.js";import{a as ne}from"./TileInfo-U28GysF5-BGcBzjkp.js";import{u as $t}from"./TilemapCache-CzNXCGP3-IEZEwm5u.js";import{P as zt,q as Ut}from"./rasterFunctionHelper-ABMN-R6n-zbmgHzkS.js";import{y as Ht}from"./popupUtils-B99PyAFi-DSpRgwGC.js";import{E as ie}from"./interfaces-Cwm0pihk-Ptzy6gTd.js";import"./TimeExtent-Cf2Pienb-Bt9xgx6O.js";import"./layerContainerType-ChWdCT09-G5sdAsSy.js";import"./jsonUtils-BwLwuQj7-D85xbGpt.js";import"./parser-CWccHtwJ-IEgE4MtJ.js";import"./mat4f32-BdRMyjXW-CWt6U0BP.js";import"./mat4-OOmHNWi7-CcbP_pd3.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./QueueProcessor-BSpvDXZs-C3tWHvWv.js";import"./Queue-DV3gpSdl-B0KzLJCG.js";import"./ReactiveMap-iPeM8evD-Zv5O9_ua.js";import"./RawBlockCache-B-F6OWAv-BlTiUWoM.js";import"./rasterProjectionHelper-DGqzGF1m-DmWZ8FtD.js";import"./projectionUtils-B-CplN3q-CjeB6JLP.js";import"./clipUtils-fw7VCGXU-CYk5XWxt.js";import"./ElevationInfo-DE5to86a-Bd7O9rKi.js";import"./lengthUtils-C61nRlXw-DfKTA5YW.js";import"./asyncUtils-BPUlNCrX-CjDI9oxR.js";import"./PortalItem-BP-IQXnZ-RIelpdBE.js";import"./portalItemUtils-BfWDJg-S-CZqzMV96.js";import"./ClassBreaksRenderer-Bq2XGpfI-DuhUyV9b.js";import"./commonProperties-CJLeiNuA-DUk5wXFU.js";import"./colorRamps-trM-CPFS-CoOvLGEh.js";import"./ColorStop-CL7v3R-A-CtsfV5vw.js";import"./visualVariableUtils-BTS148WR-DS4Yk28J.js";import"./RendererLegendOptions-Bil_IDab-DPKvaXy4.js";import"./UniqueValueRenderer-CLXHFtg9-D5RpzXou.js";import"./diffUtils-BxG8DCnW-Co7JVQYJ.js";import"./styleUtils-DBPDLVBX-DM19uBCg.js";import"./workers-CeRXsnNJ-DK1h8WPT.js";import"./intl-BAA1onnp-wwTIA17f.js";import"./normalizeUtils-u00NGW3M-CK3zqnM1.js";import"./normalizeUtilsCommon-ClagynAA-jAnnDJTC.js";import"./utils-BO8hgPs3-BRZUhJ4h.js";import"./utils-DpLVEUvg-DK4kDnh0.js";import"./utils-Cb2uXNfG-8GzuPj0B.js";import"./cimSymbolUtils-DCedSSCN-DM0_zoXJ.js";import"./utils-BfXZnjCE-pSe9BWur.js";import"./defaultCIMValues-BcSaJjm--58G-soMN.js";import"./enums-a_LDTPYU-CBIcy3mM.js";import"./LRUCache-DPWdPNTF-Du_Z0yHt.js";import"./MemCache-qDGoejB7-9IozotvY.js";import"./ClassBreaksDefinition-BZ4FJdWb-DSymQH4k.js";import"./TimeInfo-COHxjenm-DkHmcQF-.js";import"./timeZoneUtils-d5p0Jda1-pE-nbOHA.js";import"./fieldType-PhcL4ff8-Bty-lZyk.js";import"./_commonjsHelpers-BITg13Vk-KnjfkSck.js";import"./colorUtils-Eg6lOlXm-BwQpEjRY.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./vec4f64-DD-nkcCV-CSNWKRqG.js";import"./TileKey-B_6qmYK--BtZdR-Xy.js";import"./ByteSizeUnit-DL8UhsB0-B2-AmVRx.js";import"./memoryEstimations-DeWfxwaV-DAekJD7p.js";function Ne(t){return["x","e","east","long","longitude"].includes(t.toLowerCase())}function De(t){return["y","n","west","lat","latitude"].includes(t.toLowerCase())}function Gt(t){const{axes:e}=t.domain,s=Object.keys(e),i=[],a=[];let r=-1,n=-1,u=[];for(let g=0;g<s.length;g++){const R=s[g];Ne(R)?r=g:De(R)&&(n=g);const I=e[R],b=[];if("values"in I){I.values.forEach(x=>b.push(typeof x=="string"?new Date(x).getTime():x));const v=b[1]-b[0];i.push([b[0]-.5*v,b[b.length-1]+.5*v]),a.push(v)}else{const{start:v,stop:x,num:_}=I,T=(x-v)/(_-1);i.push([v-.5*T,x+.5*T]),a.push(T);for(let k=0;k<_;k++)b.push(v+T*k)}u.push({name:R,values:b,extent:[b[0],b[b.length-1]]})}r>-1&&n===-1?n=r===0?1:0:n>-1&&r===-1?r=n===0?1:0:n===-1&&r===-1&&(r=0,n=1),u=u.filter((g,R)=>!(R===r||R===n));const{referencing:o}=t.domain,c=o.find(g=>g.coordinates.includes(s[r])).system.id,l=c?.slice(c.lastIndexOf("/")+1),f=l==null||l==="CRS84"?4326:Number(l),h=new B({wkid:f}),[p,w]=i[r],[y,m]=i[n],d=new G({xmin:p,xmax:w,ymin:y,ymax:m,spatialReference:h});return{width:Math.round(d.width/a[r]),height:Math.round(d.height/a[n]),extent:d,dimensions:u}}function fe(t){const e=Ye()?.language;return e?t[e]??Object.values(t)[0]:Object.values(t)[0]}function pe(){return Math.round(255*Math.random())}function qt(t){const e={},{parameters:s}=t;if(!s)return e;for(const[i,a]of Object.entries(s)){const{type:r,description:n,unit:u,categoryEncoding:o,observedProperty:c}=a;if(r==="Parameter"&&(e[i]={},n&&(e[i].description=fe(n)),u&&(e[i].unit=u.label?fe(u.label):null,e[i].symbol=u.symbol?.value),o)){const l=Object.entries(o).map((p,w)=>({OID:w,Value:Number(p[1]),ClassName:p[0].slice(p[0].lastIndexOf("/")+1),Count:1}));let f=!1;c?.categories?.length&&(c.categories.forEach(p=>{if(!p.id)return;const w=p.id.slice(p.id.lastIndexOf("/")+1),y=l.find(d=>d.ClassName===w);if(!y)return;const m=p.label?fe(p.label):null;if(y.Label=m,p.preferredColor){const d=Ve.fromHex(p.preferredColor);d&&(f=!0,y.Red=d.r,y.Green=d.g,y.Blue=d.b)}}),f&&l.forEach(p=>{p.Red==null&&(p.Red=pe(),p.Green=pe(),p.Blue=pe())}));const h={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:l.map(p=>({attributes:p}))};f&&h.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),e[i].attributeTable=h}}return e}function Wt(t){let e=Number.MAX_VALUE,s=-Number.MAX_VALUE;for(let i=0;i<t.length;i++){const a=t[i];a!=null&&(a<e&&(e=a),a>s&&(s=a))}return Ct(e,s)}function jt(t,e,s){const i=t.map((o,c)=>({name:o,count:e[c]})).sort((o,c)=>o.name>c.name?-1:1),a=(r=1,o=>r*=o.count);var r;const n=[...i.slice(1),{name:"",count:1}].reverse().map(a).reverse();let u=0;for(let o=t.length-1;o>=0;o--)u+=n[i.findIndex(({name:c})=>c===t[o])]*(s%e[o]),s=Math.floor(s/e[o]);return u}function Vt(t){const{width:e,height:s,extent:i,dimensions:a}=Gt(t),{ranges:r}=t,n=Object.keys(r).sort((h,p)=>h<p?-1:1),u=[];for(let h=0;h<n.length;h++){const p=n[h];a?.length&&u.push({name:p,dimensions:a})}const o=qt(t);u.forEach(h=>o[h.name]&&Object.assign(h,o[h.name]));const c=u.length?{variables:u}:void 0,l=[];for(let h=0;h<n.length;h++){const p=n[h],{values:w,dataType:y,axisNames:m,shape:d}=r[p],g=d.length>2?h*d.slice(0,-2).reduce((_,T)=>_*T):0,R=m.slice(0,-2),I=d.slice(0,-2),b=y==="float"?"f32":Wt(w),v=e*s,x=w.length/v;for(let _=0;_<x;_++){const T=re.createEmptyBand(b,v),k=new Uint8Array(v).fill(255);let O=!1;const P=_*v;for(let M=0;M<v;M++){const D=w[P+M];D==null?(k[M]=0,O=!0):T[M]=D}if(h===0||a?.length){const M=new re({width:e,height:s,mask:O?k:null,pixels:[T],pixelType:b});M.updateStatistics(),a?.length?l[jt(R,I,_)+g]=M:l.push(M)}else{const M=l[_];M.pixels.push(T),O?M.mask&&(M.mask=re.combineBandMasks([M.mask,k])):M.mask=O?k:null}}}const f=Object.values(o).find(h=>h.attributeTable)?.attributeTable;return{extent:i,pixelBlocks:l,multidimensionalInfo:c,attributeTable:f,bandNames:c?void 0:n}}let X=class extends Z{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}fetchRawTile(t,e,s,i={}){if(!this._pixelBlockTiles){const{rasterInfo:r}=this,[n,u]=r.storageInfo.tileInfo.size,{sliceId:o}=i,{pixelBlocks:c}=this.source,l={pixelBlock:o==null?c[0]:c[o],useBilinear:r.dataType!=="thematic",tileSize:{width:n,height:u},level:t,row:e,col:s},f=this.rasterJobHandler?this.rasterJobHandler.clipTile(l,i):Rt(l);return Promise.resolve(f)}const a=this._pixelBlockTiles.get(`${t}/${e}/${s}`);return Promise.resolve(a)}async _open(t){const e=this.source,{pixelBlocks:s,attributeTable:i,statistics:a,histograms:r,name:n,nativeExtent:u,transform:o}=e,c=s[0],{width:l,height:f,pixelType:h}=c,p=e.extent??new G({xmin:-.5,ymin:.5,xmax:l-.5,ymax:f-.5,spatialReference:new B({wkid:3857})}),w=e.isPseudoSpatialReference??!e.extent,y={x:p.width/l,y:p.height/f},m={...e.keyProperties};i&&(m.DataType="Thematic");const d=new le({width:l,height:f,pixelType:h,extent:p,nativeExtent:u,attributeTable:i,transform:o,pixelSize:y,spatialReference:p.spatialReference,bandCount:c.pixels.length,keyProperties:m,multidimensionalInfo:e.multidimensionalInfo,statistics:a,isPseudoSpatialReference:w,histograms:r});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(d),this.createRemoteDatasetStorageInfo(d,512,512),this._set("rasterInfo",d),this.updateTileInfo(),d.multidimensionalInfo?await this._buildMDimStats(e.pixelBlocks,d.multidimensionalInfo):await this._buildInMemoryRaster(c,{width:512,height:512},t),d.multidimensionalInfo||(this.source=null),this.datasetName=n}async _buildInMemoryRaster(t,e,s){const{rasterInfo:i}=this,a=i.storageInfo.maximumPyramidLevel??0,r=i.dataType!=="thematic",n=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:e,maximumPyramidLevel:a,useBilinear:r},s):Promise.resolve(_t(t,e,a,r)),u=i.statistics!=null,o=i.histograms!=null,c=this.ioConfig.skipStatistics||u?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},s):Promise.resolve(Ft(t)),l=await Ce([n,c]);if(!l[0].value&&l[1].value)throw new F("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=l[0].value,u||(i.statistics=l[1].value?.statistics),o||(i.histograms=l[1].value?.histograms)}async _buildMDimStats(t,e,s){for(let i=0;i<e.variables.length;i++){const a=e.variables[i];if(a.statistics)continue;const r=a.dimensions.map(c=>new St({variableName:a.name,dimensionName:c.name,values:[c.values?.[0]??c.extent?.[0]],isSlice:!0})),n=Tt(r,e),u=n==null?null:t[n];if(u==null)continue;const o=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:u},s):ke(u);a.statistics=o.statistics,a.histograms||(a.histograms=o.histograms)}}};S([C({type:String,json:{write:!0}})],X.prototype,"datasetFormat",void 0),S([C()],X.prototype,"source",void 0),S([C()],X.prototype,"url",null),X=S([Y("esri.layers.support.rasterDatasets.InMemoryRaster")],X);const Ie=X;let Q=class extends Z{constructor(){super(...arguments),this.datasetFormat="CovJSON"}fetchRawTile(t,e,s,i={}){return this._inMemoryRaster.fetchRawTile(t,e,s,i)}async _open(t){const{extent:e,pixelBlocks:s,multidimensionalInfo:i,attributeTable:a,bandNames:r}=await this._fetchData(t),{statistics:n,histograms:u}=ke(s[0]),o=r?.map(h=>({BandName:h})),c={DataType:a?"Thematic":i?"Scientific":"Generic",BandProperties:o},l=new Ie({source:{extent:e,pixelBlocks:s,attributeTable:a?Pe.fromJSON(a):null,multidimensionalInfo:i,statistics:n,histograms:u,keyProperties:c,isPseudoSpatialReference:!1}});await l.open(),this._inMemoryRaster=l;const f=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",f.slice(0,f.indexOf("."))),this._set("rasterInfo",l.rasterInfo)}async _fetchData(t){const e=this.source??(await this.request(this.url,{signal:t?.signal})).data,s="imagery-tile-layer:open-coverage-json";if(e.type?.toLowerCase()!=="coverage"||e.domain?.domainType?.toLowerCase()!=="grid")throw new F(s,"Only coverage with Grid domain type is supported");if(!e.ranges)throw new F(s,"Missing ranges in the grid coverage data");if(!e.domain.referencing?.length)throw new F(s,"Missing domain referencing in the grid coverage data");const i=Object.values(e.ranges);for(let a=0;a<i.length;a++){const{axisNames:r,shape:n,type:u,values:o}=i[a];if(!(u.toLowerCase()==="ndarray"&&o?.length&&r?.length&&n?.length))throw new F(s,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!(Ne(r[r.length-1])&&De(r[r.length-2])))throw new F(s,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return Vt(e)}};S([C({type:String,json:{write:!0}})],Q.prototype,"datasetFormat",void 0),S([C({constructOnly:!0})],Q.prototype,"source",void 0),Q=S([Y("esri.layers.support.rasterDatasets.CovJSONRaster")],Q);const Yt=Q;function Oe(t,e){if(!t||!e)return null;const s=[];for(let i=0;i<t.length;i++)s.push(t[i]),s.push(e[i]);return s}function Xt(t){const e=L(t,"GeodataXform"),s=ce(j(e,"SpatialReference/WKID")||$(e,"SpatialReference/WKT"));if(e.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:s,transform:null};const i=j(e,"PolynomialOrder")??1,a=se(e,"CoeffX/Double"),r=se(e,"CoeffY/Double"),n=se(e,"InverseCoeffX/Double"),u=se(e,"InverseCoeffY/Double"),o=Oe(a,r),c=Oe(n,u);return{spatialReference:s,transform:o&&c&&o.length&&c.length?new xe({spatialReference:s,polynomialOrder:i,forwardCoefficients:o,inverseCoefficients:c}):null}}function Kt(t){const e=j(t,"NoDataValue"),s=L(t,"Histograms/HistItem"),i=j(s,"HistMin"),a=j(s,"HistMax"),r=j(s,"BucketCount"),n=$(s,"HistCounts")?.split("|").map(h=>Number(h));let u,o,c,l;Fe(t,"Metadata/MDI").forEach(h=>{const p=Number(h.textContent??h.nodeValue);switch(h.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":u=p;break;case"STATISTICS_MAXIMUM":o=p;break;case"STATISTICS_MEAN":c=p;break;case"STATISTICS_STDDEV":l=p}});const f=j(t,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:n?.length&&i!=null&&a!=null?{min:i,max:a,size:r||n.length,counts:n}:null,sourceBandIndex:f,statistics:u!=null&&o!=null?{min:u,max:o,avg:c,stddev:l}:null}}function ce(t){if(!t)return null;let e=Number(t);if(!isNaN(e)&&e!==0)return new B({wkid:e});if(t=String(t).trim(),je(t))return new B({wkt2:t});const s=t.toUpperCase();if(s.startsWith("COMPD_CS")){if(!s.includes("VERTCS")||!s.includes("GEOGCS")&&!s.startsWith("PROJCS"))return null;const i=s.indexOf("VERTCS"),a=s.indexOf("PROJCS"),r=a>-1?a:s.indexOf("GEOGCS");if(r===-1)return null;const n=t.slice(r,t.lastIndexOf("]",i)+1).trim(),u=t.slice(i,t.lastIndexOf("]")).trim();e=he(n);const o=new B(e?{wkid:e}:{wkt:n}),c=he(u);return c&&(o.vcsWkid=c),o}return s.startsWith("GEOGCS")||s.startsWith("PROJCS")?(e=he(t),new B(e!==0?{wkid:e}:{wkt:t})):null}function he(t){const e=t.replaceAll("]","[").replaceAll('"',"").split("[").map(a=>a.trim()).filter(a=>a!==""),s=e[e.length-1].split(","),i=s[0]?.toLowerCase();if((i==="epsg"||i==="esri")&&t.endsWith('"]]')){const a=Number(s[1]);if(!isNaN(a)&&a!==0)return a}return 0}function be(t){if(t?.documentElement.tagName?.toLowerCase()!=="pamdataset")return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};t.documentElement.childNodes.forEach(i=>{if(i.nodeType===1){if(ue(i,"SRS")){if(!e.spatialReference){const a=$(i);e.spatialReference=ce(a)}}else if(ue(i,"Metadata"))if(i.getAttribute("domain")==="xml:ESRI"){const{spatialReference:a,transform:r}=Xt(i);e.transform=r,e.spatialReference||(e.spatialReference=a)}else Fe(i,"MDI").forEach(a=>e.metadata[a.getAttribute("key")]=$(a));else if(ue(i,"PAMRasterBand")){const a=Kt(i);a.sourceBandIndex!=null&&e.rasterBands[a.sourceBandIndex]==null?e.rasterBands[a.sourceBandIndex]=a:e.rasterBands.push(a)}}});const s=e.rasterBands;if(s.length){const i=!!s[0].statistics;e.statistics=i?s.map(r=>r.statistics).filter(ve):null;const a=!!s[0].histogram;e.histograms=a?s.map(r=>r.histogram).filter(ve):null}return e}let oe=class extends Z{fetchRawTile(t,e,s,i={}){return this._inMemoryRaster.fetchRawTile(t,e,s,i)}async _open(t){const e=await this._fetchData(t);let{spatialReference:s,statistics:i,histograms:a,transform:r}=await this._fetchAuxiliaryData(t);const n=!s;n&&(s=new B({wkid:3857})),a?.length&&i==null&&(i=ge(a));const{width:u,height:o}=e;let c=new G({xmin:-.5,ymin:.5-o,xmax:u-.5,ymax:.5,spatialReference:s});const l=r?r.forwardTransform(c):c;let f=!0;if(r){const p=r.forwardCoefficients;f=p&&p[1]===0&&p[2]===0,f&&(r=null,c=l)}const h=new Ie({source:{extent:l,nativeExtent:c,transform:r,pixelBlocks:[e],statistics:i,histograms:a,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:n},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(h.ioConfig.skipMapInfo=!0),await h.open(),h.source=null,this._set("rasterInfo",h.rasterInfo),this._inMemoryRaster=h}async _fetchData(t){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:t?.signal}),s=Mt(e).toUpperCase();if(s!=="JPG"&&s!=="PNG"&&s!=="GIF"&&s!=="BMP")throw new F("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",s);const i=s.toLowerCase(),a=i==="gif"||i==="bmp"||!Ue("ios"),r=await this.decodePixelBlock(e,{format:i,useCanvas:a,hasNoZlibMask:!0});if(r==null)throw new F("image-aux-raster:open","the data cannot be decoded");return r}async _fetchAuxiliaryData(t){const e=t?.signal,{skipExtensions:s=[],skipMapInfo:i}=this.ioConfig,a=i||s.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),r=this.datasetFormat,n=r==="JPG"?"jgw":r==="PNG"?"pgw":r==="BMP"?"bpw":null,u=n&&s.includes(n)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+n,{responseType:"text",signal:e}),o=await Ce([a,u]);if(e?.aborted)throw He();const c=be(o[0].value?.data);if(!c.transform){const l=o[1].value?o[1].value.data.split(`
`).slice(0,6).map(f=>Number(f)):null;c.transform=l?.length===6?new xe({forwardCoefficients:[l[4],l[5],l[0],-l[1],l[2],-l[3]]}):null}return c}};S([C({type:String,json:{write:!0}})],oe.prototype,"datasetFormat",void 0),oe=S([Y("esri.layers.support.rasterDatasets.ImageAuxRaster")],oe);const ae=oe;let ee=class extends Z{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async fetchRawTile(t,e,s,i={}){const{storageInfo:a,extent:r}=this.rasterInfo,{transposeInfo:n}=a,u=n!=null&&!!i.transposedVariableName;if(this._slices&&!u&&i.sliceId==null)return null;const o=u?0:a.maximumPyramidLevel-t+this._levelOffset,c=`${this.url}/tile/${o}/${e}/${s}`,l=this._slices?u?{variable:i.transposedVariableName}:{sliceId:i.sliceId||0}:null;let f,h;if(a.isBsqTile){const M=(i.bandIds?.length?i.bandIds:[0,1,2]).map(z=>this.request(c,{query:{...l,bandId:z},responseType:"array-buffer",signal:i.signal})),D=await Promise.all(M),J=D.map(z=>z.data.byteLength).reduce((z,Ee)=>z+Ee),q=new Uint8Array(J);h=[];let W=0;for(const{data:z}of D)h.push(W),q.set(new Uint8Array(z),W),W+=z.byteLength;f=q.buffer}else f=(await this.request(c,{query:l,responseType:"array-buffer",signal:i.signal})).data;if(!f)return null;const p=u?n.tileSize:a.tileInfo.size,w=await this.decodePixelBlock(f,{width:p[0],height:p[1],planes:h?.length,offsets:h,pixelType:null,isPoint:this.tileType==="Elevation",returnInterleaved:u,noDataValue:this.rasterInfo.noDataValue});if(w==null)return null;const y=a.blockBoundary[t];if(a.compression!=="jpg"||s>y.minCol&&s<y.maxCol&&e>y.minRow&&e<y.maxRow)return w;const{origin:m,blockWidth:d,blockHeight:g}=a,{x:R,y:I}=this.getPyramidPixelSize(t),b=Math.round((r.xmin-m.x)/R)%d,v=Math.round((r.xmax-m.x)/R)%d||d,x=Math.round((m.y-r.ymax)/I)%g,_=Math.round((m.y-r.ymin)/I)%g||g,T=s===y.minCol?b:0,k=e===y.minRow?x:0,O=s===y.maxCol?v:d,P=e===y.maxRow?_:g;return Ot(w,{x:T,y:k},{width:O-T,height:P-k}),w}getSliceIndex(t){if(!this._slices||t==null||t.length===0)return null;const e=t;for(let s=0;s<this._slices.length;s++){const i=this._slices[s].multidimensionalDefinition;if(i.length===e.length&&!i.some(a=>{const r=e.find(n=>a.variableName===n.variableName&&n.dimensionName===a.dimensionName);return r?(Array.isArray(a.values[0])?`${a.values[0][0]}-${a.values[0][1]}`:a.values[0])!==(Array.isArray(r.values[0])?`${r.values[0][0]}-${r.values[0][1]}`:r.values[0]):!0}))return s}return null}async fetchVariableStatisticsHistograms(t,e){const s=this.request(this.url+"/statistics",{query:{variable:t,f:"json"},signal:e}).then(r=>r.data?.statistics),i=this.request(this.url+"/histograms",{query:{variable:t,f:"json"},signal:e}).then(r=>r.data?.histograms),a=await Promise.all([s,i]);return a[0]&&a[0].forEach(r=>{r.avg=r.mean,r.stddev=r.standardDeviation}),a[1]?.[0]?.counts?.length||(a[1]=null),{statistics:a[0]||null,histograms:a[1]||null}}async computeBestPyramidLevelForLocation(t,e={}){if(!this._tilemapCache)return 0;let s=this.identifyPixelLocation(t,0,e.datumTransformation);if(s===null)return null;let i=0;const{maximumPyramidLevel:a}=this.rasterInfo.storageInfo;let r=a-i+this._levelOffset;const n=s.srcLocation;for(;r>=0;){try{if(await this._tilemapCache.fetchAvailability(r,s.row,s.col,e)==="available")break}catch{}if(r--,i++,s=this.identifyPixelLocation(n,i,e.datumTransformation),s===null)return null}return r===-1||s==null?null:i}async _open(t){const e=t?.signal,s=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});s.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const i=s.data;if(this.sourceJSON=i,!i)throw new F("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!i.tileInfo)throw new F("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const a=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=i.cacheType,this.tileType==null&&(a.includes(i.tileInfo.format.toLowerCase())?this.tileType="Map":i.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=i.name?.slice(i.name.indexOf("/")+1)??"";const r=await this._fetchRasterInfo({signal:e});if(r==null)throw new F("image-server-raster:open","cannot initialize image service");lt(r,i);const n=this.tileType==="Map"?Zt(i.tileInfo,i):ne.fromJSON(i.tileInfo);Ge(n);const[u,o]=this._computeMinMaxLOD(r,n),{extent:c,pixelSize:l}=r,f=.5/r.width*l.x,h=Math.max(l.x,l.y),{lods:p}=n;(this.tileType!=="Map"&&i.maxScale!==0||Math.abs(l.x-l.y)>f||!p.some(x=>Math.abs(x.resolution-h)<f))&&(l.x=l.y=u.resolution,r.width=Math.ceil((c.xmax-c.xmin)/l.x-.1),r.height=Math.ceil((c.ymax-c.ymin)/l.y-.1));const w=u.level-o.level,[y,m]=n.size,d=[],g=[];p.forEach((x,_)=>{x.level>=o.level&&x.level<=u.level&&d.push({x:x.resolution,y:x.resolution}),_<p.length-1&&g.push(Math.round(10*x.resolution/p[_+1].resolution)/10)}),d.sort((x,_)=>x.x-_.x);const R=this.computeBlockBoundary(c,y,m,n.origin,d,w),I=d.length>1?d.slice(1):null;let b;i.transposeInfo&&(b={tileSize:[i.transposeInfo.rows,i.transposeInfo.cols],packetSize:r.keyProperties?._yxs.PacketSize??0});const v=g.length<=1||g.length>=3&&g.slice(0,-1).every(x=>x===g[0])?g[0]??2:Math.round(10/(o.resolution/u.resolution)**(-1/w))/10;if(r.storageInfo=new we({blockWidth:n.size[0],blockHeight:n.size[1],pyramidBlockWidth:n.size[0],pyramidBlockHeight:n.size[1],pyramidResolutions:I,pyramidScalingFactor:v,compression:n.format,origin:n.origin,firstPyramidLevel:1,maximumPyramidLevel:w,tileInfo:n,isBsqTile:!!i.bsq,transposeInfo:b,blockBoundary:R}),Qt(r),this._set("rasterInfo",r),i.capabilities.toLowerCase().includes("tilemap")){const x={tileInfo:r.storageInfo.tileInfo,parsedUrl:qe(this.url),url:this.url,tileServers:[]};this._tilemapCache=new $t({layer:x})}}async _fetchRasterInfo(t){const e=this.sourceJSON;if(this.tileType==="Map"){const n=e.fullExtent||e.extent,u=Math.ceil((n.xmax-n.xmin)/e.pixelSizeX-.1),o=Math.ceil((n.ymax-n.ymin)/e.pixelSizeY-.1),c=B.fromJSON(e.spatialReference||n.spatialReference),l=new V({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:c});return new le({width:u,height:o,bandCount:3,extent:G.fromJSON(n),spatialReference:c,pixelSize:l,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:s}=t,i=ct(this.url,this.sourceJSON,{signal:s,query:this.ioConfig.customFetchParameters}),a=e.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:s}).then(n=>n.data?.slices).catch(()=>null):null,r=await Promise.all([i,a]);return this._slices=r[1],r[0]}_fixScaleInServiceInfo(){const{sourceJSON:t}=this;t.minScale&&t.minScale<0&&(t.minScale=0),t.maxScale&&t.maxScale<0&&(t.maxScale=0)}_computeMinMaxLOD(t,e){const{pixelSize:s}=t,i=.5/t.width*s.x,{lods:a}=e,r=e.lodAt(Math.max.apply(null,a.map(h=>h.level))),n=e.lodAt(Math.min.apply(null,a.map(h=>h.level))),{tileType:u}=this;if(u==="Map")return this._levelOffset=a[0].level,[r,n];if(u==="Raster")return[a.find(h=>h.resolution===s.x)??r,n];const{minScale:o,maxScale:c}=this.sourceJSON;let l=r;c>0&&(l=a.find(h=>Math.abs(h.scale-c)<i),l||(l=a.filter(h=>h.scale>c).sort((h,p)=>h.scale>p.scale?1:-1)[0]??r));let f=n;return o>0&&(f=a.find(h=>Math.abs(h.scale-o)<i)??n,this._levelOffset=f.level-n.level),[l,f]}};function Zt(t,e){if(!t)return null;const{minScale:s,maxScale:i,minLOD:a,maxLOD:r}=e;if(a!=null&&r!=null)return ne.fromJSON({...t,lods:t.lods.filter(({level:n})=>n!=null&&n>=a&&n<=r)});if(s!==0&&i!==0){const n=c=>Math.round(1e4*c)/1e4,u=s?n(s):1/0,o=i?n(i):-1/0;return ne.fromJSON({...t,lods:t.lods.filter(c=>{const l=n(c.scale);return l<=u&&l>=o})})}return ne.fromJSON(t)}function Qt(t){const{extent:e,spatialReference:s}=t;e.xmin>-1&&e.xmax>181&&s?.wkid&&s.isGeographic&&(t.nativeExtent=t.extent,t.transform=new Jt,t.extent=t.transform.forwardTransform(e))}S([C({type:String,json:{write:!0}})],ee.prototype,"datasetFormat",void 0),S([C()],ee.prototype,"tileType",void 0),ee=S([Y("esri.layers.support.rasterDatasets.ImageServerRaster")],ee);const es=ee,A=new Map;A.set("Int8","s8"),A.set("UInt8","u8"),A.set("Int16","s16"),A.set("UInt16","u16"),A.set("Int32","s32"),A.set("UInt32","u32"),A.set("Float32","f32"),A.set("Float64","f32"),A.set("Double64","f32");const H=new Map;H.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),H.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),H.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),H.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let K=class extends Z{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async fetchRawTile(t,e,s,i={}){const{blockWidth:a,blockHeight:r,blockBoundary:n}=this.rasterInfo.storageInfo,u=n[t];if(!u||u.maxRow<e||u.maxCol<s||u.minRow>e||u.minCol>s)return null;const{bandCount:o,pixelType:c}=this.rasterInfo,{ranges:l,actualTileWidth:f,actualTileHeight:h}=this._getTileLocation(t,e,s);if(!l||l.length===0)return null;if(l[0].from===0&&l[0].to===0){const O=new Uint8Array(a*r);return new re({width:a,height:r,pixels:void 0,mask:O,validPixelCount:0})}const{bandIds:p}=this.ioConfig,w=this._getBandSegmentCount(),y=[];let m=0;for(m=0;m<w;m++)p&&!p.includes(m)||y.push(this.request(this._files.data,{range:{from:l[m].from,to:l[m].to},responseType:"array-buffer",signal:i.signal}));const d=await Promise.all(y),g=d.map(O=>O.data.byteLength).reduce((O,P)=>O+P),R=new Uint8Array(g),I=[];let b=0;for(m=0;m<w;m++)I.push(b),R.set(new Uint8Array(d[m].data),b),b+=d[m].data.byteLength;const v=H.get(this.rasterInfo.storageInfo.compression).decoderFormat,x=await this.decodePixelBlock(R.buffer,{width:a,height:r,format:v,planes:p?.length||o,offsets:I,pixelType:c});if(x==null)return null;let{noDataValue:_}=this.rasterInfo;if(_!=null&&v!=="lerc"&&!x.mask&&(_=_[0],_!=null)){const O=x.width*x.height,P=new Uint8Array(O);if(Math.abs(_)>1e24)for(m=0;m<O;m++)Math.abs((x.pixels[0][m]-_)/_)>1e-6&&(P[m]=1);else for(m=0;m<O;m++)x.pixels[0][m]!==_&&(P[m]=1);x.mask=P}let T=0,k=0;if(f!==a||h!==r){let O=x.mask;if(O)for(m=0;m<r;m++)if(k=m*a,m<h)for(T=f;T<a;T++)O[k+T]=0;else for(T=0;T<a;T++)O[k+T]=0;else for(O=new Uint8Array(a*r),x.mask=O,m=0;m<h;m++)for(k=m*a,T=0;T<f;T++)O[k+T]=1}return x}async _open(t){this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=t?t.signal:null,s=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:i,files:a}=this._parseHeader(s.data),{skipMapInfo:r,skipExtensions:n=[]}=this.ioConfig;if(!n.includes("aux.xml")&&!r){const d=await this._fetchAuxiliaryData(t);d!=null&&(i.statistics=d.statistics??i.statistics,i.histograms=d.histograms,d.histograms&&i.statistics==null&&(i.statistics=ge(d.histograms)))}r&&this.updateImageSpaceRasterInfo(i),this._set("rasterInfo",i),this._files=a;const u=await this.request(a.index,{responseType:"array-buffer",signal:e});this._storageIndex=ts(u.data);const{blockWidth:o,blockHeight:c}=this.rasterInfo.storageInfo,l=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:f,height:h}=this.rasterInfo,p=[],w=this._getBandSegmentCount();let y=0,m=-1;for(;y<this._storageIndex.length;){m++;const d=Math.ceil(f/o/l**m)-1,g=Math.ceil(h/c/l**m)-1;y+=(d+1)*(g+1)*w*4,p.push({maxRow:g,maxCol:d,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=p,m>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=m),this.updateTileInfo()}_getBandSegmentCount(){return H.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,s){const{blockWidth:i,blockHeight:a,pyramidScalingFactor:r}=this.rasterInfo.storageInfo,{width:n,height:u}=this.rasterInfo,o=this._getBandSegmentCount();let c,l,f,h=0,p=0;for(f=0;f<t;f++)p=r**f,c=Math.ceil(n/i/p),l=Math.ceil(u/a/p),h+=c*l;p=r**t,c=Math.ceil(n/i/p),l=Math.ceil(u/a/p),h+=e*c+s,h*=4*o;const w=this._storageIndex.subarray(h,h+4*o);let y=0,m=0;const d=[];for(let g=0;g<o;g++)y=w[4*g]*2**32+w[4*g+1],m=y+w[4*g+2]*2**32+w[4*g+3],d.push({from:y,to:m});return{ranges:d,actualTileWidth:s<c-1?i:Math.ceil(n/p)-i*(c-1),actualTileHeight:e<l-1?a:Math.ceil(u/p)-a*(l-1)}}_parseHeader(t){const e=L(t,"MRF_META/Raster");if(!e)throw new F("mrf:open","not a valid MRF format");const s=L(e,"Size"),i=parseInt(s.getAttribute("x"),10),a=parseInt(s.getAttribute("y"),10),r=parseInt(s.getAttribute("c"),10),n=($(e,"Compression")||"none").toLowerCase();if(!H.has(n))throw new F("mrf:open","currently does not support compression "+n);const u=$(e,"DataType")||"UInt8",o=A.get(u);if(o==null)throw new F("mrf:open","currently does not support pixel type "+u);const c=L(e,"PageSize"),l=parseInt(c.getAttribute("x"),10),f=parseInt(c.getAttribute("y"),10),h=L(e,"DataValues");let p,w;if(h&&(w=h.getAttribute("NoData"),w!=null&&(p=w.trim().split(" ").map(O=>parseFloat(O)))),L(t,"MRF_META/CachedSource"))throw new F("mrf:open","currently does not support MRF referencing other data files");const y=L(t,"MRF_META/GeoTags"),m=L(y,"BoundingBox");let d,g=!1;if(m!=null){const O=parseFloat(m.getAttribute("minx")),P=parseFloat(m.getAttribute("miny")),M=parseFloat(m.getAttribute("maxx")),D=parseFloat(m.getAttribute("maxy")),J=$(y,"Projection")||"";let q=B.WGS84;if(J!=="LOCAL_CS[]")if(J.toLowerCase().startsWith("epsg:")){const W=Number(J.slice(5));isNaN(W)||W===0||(q=new B({wkid:W}))}else q=ce(J)??B.WGS84;else g=!0,q=new B({wkid:3857});d=new G(O,P,M,D),d.spatialReference=q}else g=!0,d=new G({xmin:-.5,ymin:.5-a,xmax:i-.5,ymax:.5,spatialReference:new B({wkid:3857})});const R=L(t,"MRF_META/Rsets"),I=parseInt(R?.getAttribute("scale")||"2",10),b=d.spatialReference,v=new we({origin:new V({x:d.xmin,y:d.ymax,spatialReference:b}),blockWidth:l,blockHeight:f,pyramidBlockWidth:l,pyramidBlockHeight:f,compression:n,pyramidScalingFactor:I}),x=new V({x:d.width/i,y:d.height/a,spatialReference:b}),_=new le({width:i,height:a,extent:d,isPseudoSpatialReference:g,spatialReference:b,bandCount:r,pixelType:o,pixelSize:x,noDataValue:p,storageInfo:v}),T=$(t,"datafile"),k=$(t,"IndexFile");return{rasterInfo:_,files:{mrf:this.url,index:k||this.url.replace(".mrf",".idx"),data:T||this.url.replace(".mrf",H.get(n).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return be(e)}catch{return null}}};function ts(t){if(t.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,s,i,a,r,n;if(kt){for(s=new Uint8Array(t),a=new ArrayBuffer(t.byteLength),i=new Uint8Array(a),r=0;r<t.byteLength/4;r++)for(n=0;n<4;n++)i[4*r+n]=s[4*r+3-n];e=new Uint32Array(a)}else e=new Uint32Array(t);return e}S([C()],K.prototype,"_files",void 0),S([C()],K.prototype,"_storageIndex",void 0),S([C({type:String,json:{write:!0}})],K.prototype,"datasetFormat",void 0),K=S([Y("esri.layers.support.rasterDatasets.MRFRaster")],K);const ss=K;function is(t){const e=t.fields,s=t.records,i=e.some(c=>c.name.toLowerCase()==="oid")?"OBJECTID":"OID",a=[{name:i,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map(c=>({name:c.name,type:"esriFieldType"+c.typeName,alias:c.name}))),r=a.map(c=>c.name),n=[];let u=0,o=0;return s.forEach(c=>{const l={};for(l[i]=u++,o=1;o<r.length;o++)l[r[o]]=c[o-1];n.push({attributes:l})}),{displayFieldName:"",fields:a,features:n}}class as{static get supportedVersions(){return[5]}static parse(e){const s=new DataView(e),i=3&s.getUint8(0);if(i!==3)return{header:{version:i},recordSet:null};const a=s.getUint32(4,!0),r=s.getUint16(8,!0),n=s.getUint16(10,!0),u={version:i,recordCount:a,headerByteCount:r,recordByteCount:n};let o=32;const c=[],l=[];let f;if(i===3){for(;s.getUint8(o)!==13;)f=String.fromCharCode(s.getUint8(o+11)).trim(),c.push({name:_e(new Uint8Array(e,o,11)),type:f,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(f)],length:s.getUint8(o+16)}),o+=32;if(o+=1,c.length>0)for(;l.length<a&&e.byteLength-o>n;){const h=[];s.getUint8(o)===32?(o+=1,c.forEach(p=>{if(p.type==="C")h.push(_e(new Uint8Array(e,o,p.length)).trim());else if(p.type==="N")h.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,p.length)).trim(),10));else if(p.type==="F")h.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,p.length)).trim()));else if(p.type==="D"){const w=String.fromCharCode.apply(null,new Uint8Array(e,o,p.length)).trim();h.push(new Date(parseInt(w.slice(0,4),10),parseInt(w.slice(4,6),10)-1,parseInt(w.slice(6,8),10)))}o+=p.length}),l.push(h)):o+=n}}return{header:u,fields:c,records:l,recordSet:is({fields:c,records:l})}}}const ye=(t,e)=>t.get(e)?.values,te=(t,e)=>t.get(e)?.values?.[0];let U=class extends Z{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this._chunkSize=10485760,this.datasetFormat="TIFF"}async fetchRawTile(t,e,s,i={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(t,e,s))return null;const a=await this._fetchRawTiffTile(t,e,s,!1,i);if(a!=null&&this._headerInfo.hasMaskBand){const r=await this._fetchRawTiffTile(t,e,s,!0,i);r!=null&&r.pixels[0]instanceof Uint8Array&&(a.mask=r.pixels[0])}return a}async _open(t){const e=t?t.signal:null,{data:s}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:e});if(!s)throw new F("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:i,firstIFDPos:a,isBigTiff:r}=Pt(s),n=[],u={fileChunk:s,posIFD:a,fileOffset:0};await this._readIFDs(n,u,i,r?8:4,e);const{imageInfo:o,rasterInfo:c}=rs(n),l=Nt(n),f=Dt(n);if(this._headerInfo={littleEndian:i,isBigTiff:r,ifds:n,pyramidIFDs:l,maskIFDs:f,...o},this._set("rasterInfo",c),!o.isSupported)throw new F("tiffraster:open","this tiff is not supported: "+o.message);if(!o.tileWidth)throw new F("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");c.isPseudoSpatialReference&&de.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const h=n[0].get("PREDICTOR")?.values?.[0];if(n[0].get("SAMPLEFORMAT")?.values?.[0]===3&&h===2)throw new F("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:p,skipExtensions:w=[]}=this.ioConfig;if(!w.includes("aux.xml")&&!p){const y=await this._fetchAuxiliaryMetaData(t);y!=null&&ns(y,c)}w.includes("vat.dbf")||c.bandCount!==1||c.pixelType!=="u8"||p||(c.attributeTable=await this._fetchAuxiliaryTable(t),c.attributeTable!=null&&(c.keyProperties.DataType="thematic")),p&&this.updateImageSpaceRasterInfo(c),this.updateTileInfo()}async _validateOrFetchHeaderBuffer(t,e){let{fileChunk:s,fileOffset:i,posIFD:a}=t;return(a+8>=s.byteLength||a<0)&&(i=a+i,s=(await this.request(this.url,{range:{from:i,to:i+this._bufferSize},responseType:"array-buffer",signal:e})).data,a=0),{fileChunk:s,fileOffset:i,posIFD:a}}async _readIFDs(t,e,s,i=4,a){if(!e.posIFD)return null;e=await this._validateOrFetchHeaderBuffer(e,a);const r=await this._readIFD(e,s,Te,i,a);if(!r?.ifd)throw new F("tiffraster:open","cannot parse tiff header. failed to open url "+this.url);if(t.push(r.ifd),!r.nextIFD)return null;e.posIFD=r.nextIFD-e.fileOffset,await this._readIFDs(t,e,s,i,a)}async _readIFD(t,e,s=Te,i=4,a){let{fileChunk:r,posIFD:n,fileOffset:u}=t;if(!t.fileChunk)return null;const o=Et(r,e,n,u,s,i);if(o.success){const c=[];if(o.ifd?.forEach(l=>{l.values||c.push(l)}),c.length>0&&await this._fillOffsets(c,e,o.nextIFD,a),o.ifd?.has("GEOKEYDIRECTORY")){const l=o.ifd.get("GEOKEYDIRECTORY"),f=l?.values;if(f&&f.length>4){const h=f[0]+"."+f[1]+"."+f[2];n=l.valueOffset+6-u;const p=await this._validateOrFetchHeaderBuffer({fileChunk:r,posIFD:n,fileOffset:u},a),w=await this._readIFD(p,e,Bt,2,a);l.data=w?.ifd,l.data&&l.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[h]})}}return o}return o.requiredBufferSize?(r=(await this.request(this.url,{range:{from:u,to:u+n+o.requiredBufferSize+8},responseType:"array-buffer",signal:a})).data,r.byteLength<n+o.requiredBufferSize?null:(t.fileChunk=r,t.fileOffset=u,this._readIFD(t,e,s,i,a))):null}async _fillOffsets(t,e,s,i){const a=t.filter(l=>l.offlineOffsetSize!=null);if(a.length===0)return;const r=a.map(l=>l.offlineOffsetSize),n=Math.min.apply(null,r.map(l=>l[0])),u=Math.max.apply(null,r.map(l=>l[0]+l[1]));let o=r.length===1||u-n<=this._bufferSize;if(!o&&r.length>1&&(r.sort((l,f)=>l[0]-f[0]),o=r.reduce((l,f)=>l===f[0]?f[0]+f[1]:0,r[0][0])===u),o){const l=await this._fetchOffsets(n,Math.max(u,n+this._bufferSize),i);return void a.forEach(f=>Re(l,e,f,n))}const c=a.map(async l=>{const f=l.offlineOffsetSize,h=await this._fetchOffsets(f[0],f[1]+f[0],i);Re(h,e,l,f[0])});await Promise.all(c)}async _fetchOffsets(t,e,s){const i=[],a=this._chunkSize,r=Math.ceil((e-t)/a);let n=t;for(let c=0;c<r;c++)i.push(this.request(this.url,{range:{from:n,to:c===r-1?e:n+a-1},responseType:"array-buffer",signal:s})),n+=a;const u=await Promise.all(i);if(r===1)return u[0].data;const o=new Uint8Array(e-t+1);for(let c=0;c<r;c++)o.set(new Uint8Array(u[c].data),c*a);return o.buffer}async _fetchRawTiffTile(t,e,s,i,a={}){const r=this._getTileLocation(t,e,s,i);if(!r)return null;const{ranges:n,actualTileWidth:u,actualTileHeight:o,ifd:c}=r,l=n.map(v=>this.request(this.url,{range:v,responseType:"array-buffer",signal:a.signal})),f=await Promise.all(l),h=f.map(v=>v.data.byteLength).reduce((v,x)=>v+x),p=f.length===1?f[0].data:new ArrayBuffer(h),w=[0],y=[0];if(f.length>1){const v=new Uint8Array(p);for(let x=0,_=0;x<f.length;x++){const T=f[x].data;v.set(new Uint8Array(T),_),w[x]=_,_+=T.byteLength,y[x]=T.byteLength}}const{blockWidth:m,blockHeight:d}=this.getBlockWidthHeight(t),g=await this.decodePixelBlock(p,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offsets:w,sizes:y},width:m,height:d,planes:null,pixelType:null});if(g==null)return null;let R,I,b;if(u!==m||o!==d){let v=g.mask;if(v)for(R=0;R<d;R++)if(b=R*m,R<o)for(I=u;I<m;I++)v[b+I]=0;else for(I=0;I<m;I++)v[b+I]=0;else for(v=new Uint8Array(m*d),g.mask=v,R=0;R<o;R++)for(b=R*m,I=0;I<u;I++)v[b+I]=1}return g}_getTileLocation(t,e,s,i=!1){const{firstPyramidLevel:a,blockBoundary:r}=this.rasterInfo.storageInfo,n=t===0?0:t-(a-1),{_headerInfo:u}=this;if(!u)return null;const o=i?u.maskIFDs[n]:n===0?u?.ifds[0]:u?.pyramidIFDs[n-1];if(!o)return null;const c=At(o,u),l=ye(o,"TILEOFFSETS");if(l===void 0)return null;const f=ye(o,"TILEBYTECOUNTS"),{minRow:h,minCol:p,maxRow:w,maxCol:y}=r[n];if(e>w||s>y||e<h||s<p)return null;const m=te(o,"IMAGEWIDTH"),d=te(o,"IMAGELENGTH"),g=te(o,"TILEWIDTH"),R=te(o,"TILELENGTH"),I=[];if(c){const{bandCount:b}=this.rasterInfo;for(let v=0;v<b;v++){const x=v*(w+1)*(y+1)+e*(y+1)+s;I[v]={from:l[x],to:l[x]+f[x]-1}}}else{const b=e*(y+1)+s;I.push({from:l[b],to:l[b]+f[b]-1})}for(let b=0;b<I.length;b++)if(I[b].from==null||!I[b].to||I[b].to<0)return null;return{ranges:I,ifd:o,actualTileWidth:s===y&&m%g||g,actualTileHeight:e===w&&d%R||R}}async _fetchAuxiliaryMetaData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return be(e)}catch{return null}}async _fetchAuxiliaryTable(t){try{const{data:e}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:t?.signal}),s=as.parse(e);return s?.recordSet?Pe.fromJSON(s.recordSet):null}catch{return null}}};function rs(t){const e=Lt(t),{width:s,height:i,tileWidth:a,tileHeight:r,planes:n,pixelType:u,compression:o,firstPyramidLevel:c,maximumPyramidLevel:l,pyramidBlockWidth:f,pyramidBlockHeight:h,pyramidResolutions:p,tileBoundary:w,affine:y,metadata:m}=e,d=e.extent.spatialReference?.wkt||e.extent.spatialReference?.wkid;let g=ce(d),R=!!e.isPseudoGeographic;g==null&&(R=!0,g=new B({wkid:3857}));const I=new G({...e.extent,spatialReference:g}),b=new V(I?{x:I.xmin,y:I.ymax,spatialReference:g}:{x:0,y:0}),v=new we({blockWidth:a,blockHeight:r,pyramidBlockWidth:f,pyramidBlockHeight:h,compression:o,origin:b,firstPyramidLevel:c,maximumPyramidLevel:l,pyramidResolutions:p,blockBoundary:w}),x=new V({x:(I.xmax-I.xmin)/s,y:(I.ymax-I.ymin)/i,spatialReference:g}),_=m?{BandProperties:m.bandProperties,DataType:m.dataType}:{};let T=null;const k=te(t[0],"PHOTOMETRICINTERPRETATION"),O=ye(t[0],"COLORMAP");if(k<=3&&O?.length>3&&O.length%3==0){T=[];const M=O.length/3;for(let D=0;D<M;D++)T.push([D,O[D]>>>8,O[D+M]>>>8,O[D+2*M]>>>8])}const P=new le({width:s,height:i,bandCount:n,pixelType:u,pixelSize:x,storageInfo:v,spatialReference:g,isPseudoSpatialReference:R,keyProperties:_,extent:I,colormap:T,statistics:m?m.statistics:null});if(y?.length&&(P.nativeExtent=new G({xmin:-.5,ymin:.5-i,xmax:s-.5,ymax:.5,spatialReference:g}),P.transform=new xe({polynomialOrder:1,forwardCoefficients:[y[2]+y[0]/2,y[5]-y[3]/2,y[0],y[3],-y[1],-y[4]]}),P.extent=P.transform.forwardTransform(P.nativeExtent),P.pixelSize=new V({x:(I.xmax-I.xmin)/s,y:(I.ymax-I.ymin)/i,spatialReference:g}),v.origin.x=-.5,v.origin.y=.5),p){const{x:M,y:D}=P.pixelSize;p.forEach(J=>{J.x*=M,J.y*=D})}return{imageInfo:e,rasterInfo:P}}function ns(t,e){if(e.statistics=t.statistics??e.statistics,e.histograms=t.histograms,t.histograms&&e.statistics==null&&(e.statistics=ge(t.histograms)),t.transform&&e.transform==null){e.transform=t.transform,e.nativeExtent=e.extent;const s=e.transform.forwardTransform(e.nativeExtent);e.pixelSize=new V({x:(s.xmax-s.xmin)/e.width,y:(s.ymax-s.ymin)/e.height,spatialReference:e.spatialReference}),e.extent=s}e.isPseudoSpatialReference&&t.spatialReference&&(e.spatialReference=t.spatialReference,e.extent.spatialReference=e.nativeExtent.spatialReference=e.storageInfo.origin.spatialReference=e.spatialReference)}S([C()],U.prototype,"_files",void 0),S([C()],U.prototype,"_headerInfo",void 0),S([C()],U.prototype,"_bufferSize",void 0),S([C()],U.prototype,"_chunkSize",void 0),S([C({type:String,json:{write:!0}})],U.prototype,"datasetFormat",void 0),U=S([Y("esri.layers.support.rasterDatasets.TIFFRaster")],U);const os=U,E=new Map;E.set("MRF",{desc:"Meta Raster Format",constructor:ss}),E.set("TIFF",{desc:"GeoTIFF",constructor:os}),E.set("RasterTileServer",{desc:"Raster Tile Server",constructor:es}),E.set("JPG",{desc:"JPG Raster Format",constructor:ae}),E.set("PNG",{desc:"PNG Raster Format",constructor:ae}),E.set("GIF",{desc:"GIF Raster Format",constructor:ae}),E.set("BMP",{desc:"BMP Raster Format",constructor:ae}),E.set("CovJSON",{desc:"COVJSON Raster Format",constructor:Yt}),E.set("MEMORY",{desc:"In Memory Raster Format",constructor:Ie});class me{static get supportedFormats(){const e=new Set;return E.forEach((s,i)=>e.add(i)),e}static async open(e){const{url:s,ioConfig:i,source:a,sourceJSON:r}=e;let n=e.datasetFormat??i?.datasetFormat;n==null&&(s.includes(".")?n=s.slice(s.lastIndexOf(".")+1).toUpperCase():a?.type?.toLowerCase()==="coverage"?n="CovJSON":a?.extent&&a.pixelblocks&&(n="MEMORY")),n==="OVR"||n==="TIF"?n="TIFF":n==="JPG"||n==="JPEG"||n==="JFIF"?n="JPG":n==="COVJSON"&&(n="CovJSON"),s.toLowerCase().includes("/imageserver")&&!s.toLowerCase().includes("/wcsserver")&&(n="RasterTileServer");const u={url:s,source:a,sourceJSON:r,datasetFormat:n,ioConfig:i??{bandIds:null,sampling:null}};if(Object.keys(u).forEach(f=>{u[f]==null&&delete u[f]}),n){if(!this.supportedFormats.has(n))throw new F("rasterfactory:open","not a supported format "+n);if(n==="CRF")throw new F("rasterfactory:open",`cannot open raster: ${s}`);const f=new(E.get(n)).constructor(u);return await f.open({signal:e.signal}),f}const o=Array.from(E.keys()).filter(f=>f!=="CovJSON"&&f!=="Memory");let c=0;const l=()=>{if(n=o[c++],!n||n==="CRF")return null;const f=new(E.get(n)).constructor(u);return f.open({signal:e.signal}).then(()=>f).catch(()=>l())};return l()}static register(e,s,i){E.has(e.toUpperCase())||E.set(e.toUpperCase(),{desc:s,constructor:i})}}let N=class extends Qe(ft(it(rt(ot(et(tt(nt(pt(Ze(ut(Xe(Be.ClonableMixin(Ke))))))))))))){constructor(...t){super(...t),this._primaryRasters=[],this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=Ae(async(e,s,i)=>{const{save:a,saveAs:r}=await We(()=>import("./imageryUtils-DHYzIRVX-wwtQJ-Ps.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12,13]),import.meta.url);switch(e){case ie.SAVE:return a(this,s);case ie.SAVE_AS:return r(this,i,s)}})}normalizeCtorArgs(t,e){return typeof t=="string"?{url:t,...e}:t}load(t){const e=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},t).catch(Le).then(()=>this._openRaster(e))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const t=[ht("Pixel Value"),mt("Raw Pixel Value")],e=this.raster?.rasterInfo??this.serviceRasterInfo,s=e?.attributeTable;if(s){const r=dt(s);t.push(...r)}const i=e?.dataType,a=e?.multidimensionalInfo;if((i==="vector-magdir"||i==="vector-uv")&&a!=null){const r=a.variables[0].unit?.trim(),n=yt(r),u=gt();t.push(n,u)}if(a){const r=wt(a);t.push(...r)}return t}createPopupTemplate(t){const{rasterFields:e}=this,s=t?.visibleFieldNames??new Set(e.map(({name:r})=>r).filter(r=>r!==xt.rawServicePixelValue)),i=Ht({fields:e,title:this.title},{...t,visibleFieldNames:s}),{rasterInfo:a}=this.raster;return i?.fieldInfos&&a&&It(i.fieldInfos,a),i}async generateRasterInfo(t,e){if(t=Je(Me,t),await this.load(),!t||t.functionName?.toLowerCase()==="none")return this.serviceRasterInfo;try{const{rasterInfo:s}=await this._openFunctionRaster(t,e);return s}catch(s){throw s instanceof F?s:new F("imagery-tile-layer","the given raster function is not supported")}}async save(t){return this._debouncedSaveOperations(ie.SAVE,t)}async saveAs(t,e){return this._debouncedSaveOperations(ie.SAVE_AS,e,t)}write(t,e){const s=this._primaryRasters[0]??this.raster;if(this.loaded?s.datasetFormat==="RasterTileServer"&&(s.tileType==="Raster"||s.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(t,e);if(e?.messages){const i=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new F("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${i}'`,{layer:this}))}return null}async _openRaster(t){let e=!1;if(this.raster)await this._openFromRaster(this.raster,t),e=bt(this.raster),!e&&this.rasterFunction&&(this._primaryRasters=[this.raster],await this._initializeWithFunctionRaster(this.rasterFunction));else{const{url:i,rasterFunction:a,source:r}=this;if(!i&&!r)throw new F("imagery-tile-layer:open","missing url or source parameter");r?await this._openFromSource(r,t):a?await this._openFromUrlWithRasterFunction(i,a,t):await this._openFromUrl(i,t)}const s=this.raster.rasterInfo;if(!s)throw new F("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",e?s:this._primaryRasters[0].rasterInfo),this._set("spatialReference",s.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const i=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(i,{origin:"service"})}else this.read({tileInfo:this.serviceRasterInfo?.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles($e(()=>this.customParameters,i=>{this.raster&&(this.raster.ioConfig.customFetchParameters=i)}))}async _openFromRaster(t,e){t.rasterInfo||await t.open({signal:e}),this._primaryRasters=vt(t),this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(t,e,s){const i=[t];e&&zt(e.toJSON(),i);const a=await Promise.all(i.map(n=>me.open({url:n,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:s}))),r=a.findIndex(n=>n==null);if(r>-1)throw new F("imagery-tile-layer:open",`cannot open raster: ${i[r]}`);return this._primaryRasters=a,this._initializeWithFunctionRaster(e)}async _openFromUrl(t,e){const s=await me.open({url:t,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(s==null)throw new F("imagery-tile-layer:open",`cannot open raster: ${t}`);this._primaryRasters=[s],this.raster=s}async _openFromSource(t,e){const s="the tiled imagery data source is not supported",i=t.type?.toLowerCase()==="coverage"?"CovJSON":t.extent&&t.pixelBlock?"MEMORY":null;if(!i)throw new F("imagery-tile-layer:open",s);i==="MEMORY"&&(t={...t,pixelBlock:void 0,pixelBlocks:[t.pixelBlock]});const a=await me.open({url:"",source:t,datasetFormat:i,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(a==null)throw new F("imagery-tile-layer:open",s);this._primaryRasters=[a],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=a}async _openFunctionRaster(t,e){const s={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(r=>s[r.url]=r);const i=Ut(t.functionDefinition?.toJSON()??t.toJSON(),s),a=new st({rasterFunction:i});return await a.open(e),a}async _initializeWithFunctionRaster(t,e){try{this.raster=await this._openFunctionRaster(t,e)}catch(s){s instanceof F&&de.getLogger(this).error("imagery-tile-layer:open",s.message),de.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}};S([C({clonable:!1})],N.prototype,"_primaryRasters",void 0),S([C(at)],N.prototype,"legendEnabled",void 0),S([C({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],N.prototype,"isReference",void 0),S([C({type:["show","hide"]})],N.prototype,"listMode",void 0),S([C({json:{read:!0,write:!0}})],N.prototype,"blendMode",void 0),S([C({type:Me,json:{name:"renderingRule",write:!0}})],N.prototype,"rasterFunction",void 0),S([C()],N.prototype,"sourceJSON",void 0),S([C({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],N.prototype,"version",void 0),S([C({readOnly:!0,json:{read:!1}})],N.prototype,"type",void 0),S([C({type:["ArcGISTiledImageServiceLayer"]})],N.prototype,"operationalLayerType",void 0),S([C({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(t,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(t,e,s){e[s]=!t}}}})],N.prototype,"popupEnabled",void 0),S([C({type:ze,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],N.prototype,"popupTemplate",void 0),S([C({readOnly:!0})],N.prototype,"defaultPopupTemplate",null),S([C({readOnly:!0,type:[Se]})],N.prototype,"fields",void 0),S([C({readOnly:!0,type:[Se]})],N.prototype,"rasterFields",null),S([C({constructOnly:!0})],N.prototype,"source",void 0),N=S([Y("esri.layers.ImageryTileLayer")],N);const Pi=N;export{Pi as default};
