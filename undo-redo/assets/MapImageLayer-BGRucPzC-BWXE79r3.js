import{G as S,N as f,O as d,$ as I,b as g,s as w,c as v,R as O,v as o,I as a,J as T,U as P,S as L,t as E}from"./main-CYs6XPOo.js";import{y as M}from"./loadAll-BIhJ1RSe-BGN0qqew.js";import{o as F,l as R,i as J,X as N}from"./PortalLayer-rRU66wtN-BVAfugXn.js";import{c as U}from"./scaleUtils-DtnDbXa5-BrP_qJYu.js";import{U as $}from"./Layer-B8q-l4yV-B0T3QJzM.js";import{c as j}from"./FeatureType-MZ846Ius-D2cOEimd.js";import{J as _,B as q,C as A}from"./SublayersOwner-CvsAZfE5-qVTgKGU0.js";import{a as V}from"./ArcGISService-CdvDPeWS-c-X511LD.js";import{d as k,f as C}from"./ScaleRangeLayer-DIxukUBC-DjplAJ84.js";import{L as B}from"./popupUtils-BiEhUPlu-3y1MScGX.js";import{T as z}from"./RefreshableLayer-yYqabqcs-wx_GDSTU.js";import{N as G}from"./TemporalLayer-DxgXU1f--d83lExre.js";import{r as H}from"./ExportImageParameters-BFIpXRBd-X8DtRuhp.js";import{i as W}from"./imageBitmapUtils-D8LZDu4M-BCmXgLSm.js";import{f as b}from"./sublayerUtils-CVtBGavp-D40CoDLo.js";import{a as Z}from"./versionUtils-DDW8eV12-DZdTHMYt.js";import{j as D}from"./TimeExtent-gZaEUVeW-B3DKso13.js";import{C as x}from"./timeZoneUtils-z3WjfjXQ-CFNiOcQu.js";import"./layerContainerType-ChWdCT09-G5sdAsSy.js";import"./ElevationInfo-DkWlof50-BC73AYyB.js";import"./lengthUtils-wU9RRIqK-Bht2X35Q.js";import"./PortalItem-CJetnHeq-NQDHLNaz.js";import"./portalItemUtils-DsrxEt4W-Dhx8uu6q.js";import"./projection-m8vi7Cxv-pjvwMJYm.js";import"./labelingInfo-D9WqyhOx-DPHhofyf.js";import"./uuid-Dj9mdEVg-BaKSCiyT.js";import"./Field-Cj6Pz3TI-CViTdXI4.js";import"./fieldType-VTpxE-EM-Dg6PEoPe.js";import"./Query-CxQYWcUQ-BqDzyPCB.js";import"./SimpleRenderer-ADQlYl8U-BJmxCJqP.js";import"./commonProperties-BLIn8DYU-C-WNVkSa.js";import"./colorRamps-KMmVdCPJ-CgElNoKx.js";import"./ColorStop-DoHCvOqO-D0Uaw-hG.js";import"./visualVariableUtils-BO-_wo28-CcZ3IpRs.js";import"./UniqueValueRenderer-BmoLL_Ee-DjtXp88D.js";import"./diffUtils-BSe9IE26-D2VJw3xm.js";import"./RendererLegendOptions-f5mIImtQ-wbi8QF2x.js";import"./styleUtils-DxAOZq5S-DplSniEH.js";import"./RelationshipQuery-BgG1nLP1-DAgosQNy.js";import"./NormalizationBinParametersMixin-ZkplD1Sk-B53-Untq.js";import"./labelUtils-Dd5sr1UJ-DAc5QKqh.js";import"./Version-BTMwSXf1-Ddlu6d0c.js";import"./CollectionFlattener-9hYRBLDX-CvH0fF5G.js";import"./QueryTask-DjXUtGiO-DzGGmxE-.js";import"./utils-DuaeuwP5-BZRFZie5.js";import"./executeForIds-MucOSmLz-C0jRWdvg.js";import"./query-nJmB7Ppn-BZFE1FpV.js";import"./normalizeUtils-b-vZURob-CjPA-uZP.js";import"./utils-Jw-4AGsF-CCdtdb_e.js";import"./pbfQueryUtils-1j64fqcx-Dj8bwTP0.js";import"./pbf-Ijhb7ANA-CKni1IOd.js";import"./memoryEstimations-iHVpvWPf-BOWc0Ogh.js";import"./OptimizedGeometry-1qDYm3YK-ConUiLsN.js";import"./OptimizedFeatureSet-D6mgsKNr-iO2JrLI8.js";import"./queryZScale-DBCLQqDI-Chy0WWkV.js";import"./executeQueryPBF-Dc29GEvp-D0e8xjPS.js";import"./featureConversionUtils-DRaHTjrY-DP62BRbz.js";import"./FeatureSet-Dxf4LeOj-D21luLBa.js";import"./executeQueryJSON-BK4r1MU--qhgNUv5x.js";import"./FieldsIndex-Y7EBAYp0-BQGMRQLl.js";import"./typeUtils-I5iG5ZKA-DHNdH_IJ.js";import"./ClassBreaksRenderer-D97YzbWp-D_rIpp-I.js";import"./LRUCache-BLmkvs7b-CKqYW395.js";import"./MemCache-BCippCv6-BkLQoLSb.js";import"./utils-BYqzY6_X-8cxzWbKO.js";import"./defaultCIMValues-gWpu7WSC-cjxb95kj.js";import"./enums-f9UUstHQ-hLTu4V1l.js";import"./heatmapUtils--OU2Fakh-CF7SMBdp.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./vec4f64-CjUMzAyX-DPYbdAom.js";import"./jsonUtils-DzmXEA9_-5dk8A8WM.js";import"./parser-hXQyB-Qx-o1y7Id2T.js";import"./mat4f32-CiZjBg9k-CUm34GoR.js";import"./mat4-BFStKTjU-BwkzHLzi.js";import"./floorFilterUtils-4r-vVdzs-C43jLoAE.js";let t=class extends k(G(C(_(q(V(F(R(J(z(j(B($)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new H({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(S).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const n=r.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,n,s){if(!this.loaded||!e)return;const m=e.slice().reverse().flatten(({sublayers:i})=>i&&i.toArray().reverse()).toArray();let p=!1;const l=f(s.origin);if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(l===d.PORTAL_ITEM){const i=this.createSublayersForOrigin("service").sublayers;p=b(m,i,d.SERVICE)}else if(l>d.PORTAL_ITEM){const i=this.createSublayersForOrigin("portal-item");p=b(m,i.sublayers,f(i.origin))}}const h=[],u={writeSublayerStructure:p,...s};let c=p||this.hasVisibleLayersForOrigin(l);m.forEach(i=>{const y=i.write({},u);h.push(y),c=c||i.originOf("visible")==="user"}),h.some(i=>Object.keys(i).length>1)&&(r.layers=h),c&&(r.visibleLayers=m.filter(i=>i.visible).map(i=>i.id))}createExportImageParameters(e,r,n,s){const m=s?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=s?.floors??null,this._exportImageParameters.scale=U({extent:e,width:r})*m;const p=this._exportImageParameters.toJSON(),l=!s?.rotation||this.version<10.3?{}:{rotation:-s.rotation},h=e?.spatialReference,u=I(h);p.dpi*=m;const c={};if(s?.timeExtent){const{start:i,end:y}=s.timeExtent.toJSON();c.time=i&&y&&i===y?""+i:`${i??"null"},${y??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e?e.xmin+","+e.ymin+","+e.xmax+","+e.ymax:void 0,bboxSR:u,imageSR:u,size:r+","+n,...p,...l,...c}}async fetchImage(e,r,n,s){const{data:m}=await this._fetchImage("image",e,r,n,s);return m}async fetchImageBitmap(e,r,n,s){const{data:m,url:p}=await this._fetchImage("blob",e,r,n,s);return W(m,p,s?.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await g(this.url,r),{extent:s,fullExtent:m,timeExtent:p}=n,l=s||m;return{fullExtent:l&&w.fromJSON(l),timeExtent:p&&D.fromJSON({start:p[0],end:p[1]})}}loadAll(){return M(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return Z(this,e)}async _fetchImage(e,r,n,s,m){const p={responseType:e,signal:m?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,n,s,m),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(p.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:h}=await g(l,p);return{data:h,url:l}}catch(h){throw O(h)?h:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:n}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){return!(e==null||!this.sublayersSourceJSON[e]?.visibleLayers)}};o([a(x("dateFieldsTimeReference"))],t.prototype,"dateFieldsTimeZone",void 0),o([a({type:Boolean})],t.prototype,"datesInUnknownTimezone",void 0),o([a()],t.prototype,"dpi",void 0),o([a()],t.prototype,"gdbVersion",void 0),o([a()],t.prototype,"imageFormat",void 0),o([T("imageFormat",["supportedImageFormatTypes"])],t.prototype,"readImageFormat",null),o([a({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],t.prototype,"imageMaxHeight",void 0),o([a({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],t.prototype,"imageMaxWidth",void 0),o([a()],t.prototype,"imageTransparency",void 0),o([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],t.prototype,"isReference",void 0),o([a({json:{read:!1,write:!1}})],t.prototype,"labelsVisible",void 0),o([a({type:["ArcGISMapServiceLayer"]})],t.prototype,"operationalLayerType",void 0),o([a({json:{read:!1,write:!1}})],t.prototype,"popupEnabled",void 0),o([a(x("preferredTimeReference"))],t.prototype,"preferredTimeZone",void 0),o([a()],t.prototype,"sourceJSON",void 0),o([a({json:{write:{ignoreOrigin:!0}}})],t.prototype,"sublayers",void 0),o([P("sublayers",{layers:{type:[A]},visibleLayers:{type:[L]}})],t.prototype,"writeSublayers",null),o([a({type:["show","hide","hide-children"]})],t.prototype,"listMode",void 0),o([a({json:{read:!1},readOnly:!0,value:"map-image"})],t.prototype,"type",void 0),o([a(N)],t.prototype,"url",void 0),t=o([E("esri.layers.MapImageLayer")],t);const vt=t;export{vt as default};
