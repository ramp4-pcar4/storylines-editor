import{v as t,I as s,dE as n,t as h,aa as m,ai as l,aj as o,bH as d}from"./main-BXI3-gc5.js";import{D as V}from"./LayerView2D-CCfp06E--C_L9tM0c.js";import{v as w}from"./LayerView-D3XoMhlx-sabjvwrI.js";import"./utils-C0LvbFCo-RMQaTNpt.js";import"./Container-BdpN3llD-BdPKoC6Q.js";import"./MapView-BcnxJC0k-Dqhc2adE.js";import"./globalCss-CFN4F315-CM5RVp0S.js";import"./Queue-B8H6jIv7-DlhSj4wg.js";import"./signal-DxzURL18-1M3gToyJ.js";import"./Version-BTMwSXf1-qqUx7ygJ.js";import"./CollectionFlattener-9hYRBLDX-BKBWlKiM.js";import"./workers-0oosFQiO-BZBlIyGb.js";import"./intl-DLmy-Li5-C58XbPr_.js";import"./projection-m8vi7Cxv-Dh8g3WOu.js";import"./TileInfo-owTCOSRx-D5wj3UIp.js";import"./TileKey-B_6qmYK--BtZdR-Xy.js";import"./jsxFactory-C5LxVioS-D3R_CNPv.js";import"./uuid-Dj9mdEVg-BaKSCiyT.js";import"./UpdatingHandles-DBzjq66S-BLmh2OCq.js";import"./Map-DbZVFU-I-DjcsAkZc.js";import"./Basemap-DxWxjcEH-DT3h_GaB.js";import"./loadAll-BIhJ1RSe-DXDo10gw.js";import"./PortalItem-CJetnHeq-agcMhTf1.js";import"./mat4f32-CiZjBg9k-CUm34GoR.js";import"./mat4-BFStKTjU-BWzFSHo6.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./Layer-B8q-l4yV-BG653v1l.js";import"./TimeExtent-gZaEUVeW-lCLxGvB-.js";import"./GraphicsCollection-rAFZo1AJ-D89PIoAM.js";import"./HeightModelInfo-BkDck4B0-B1wyAIDW.js";import"./timeZoneUtils-z3WjfjXQ-Bc6gGyrZ.js";import"./ReactiveMap-BaMcQuG3-Spgxw9xD.js";import"./Query-CxQYWcUQ-B2rKeaAX.js";import"./Field-Cj6Pz3TI-NX1Ppi59.js";import"./fieldType-VTpxE-EM-CrURP_0h.js";import"./IViewEvents-BE10MM98-CvMfjolG.js";import"./HighlightDefaults-Cg50f_1y-BNLXZen5.js";import"./a11yUtils-C2ydunC--DTuIPt3G.js";import"./heightModelInfoUtils-CI93rfC7-TE1FpdGR.js";import"./ViewingMode-CyR_b1T8-_s7_Gbsk.js";import"./vec2-BnynUbeJ-CKtGJQAy.js";import"./vec2f64-CEUyUoff-BBc0aQ6D.js";import"./mat2d-BQA-1WB--Pnyy0dhf.js";import"./normalizeUtils-b-vZURob-D21j1ic6.js";import"./utils-DuaeuwP5-DII1JBOm.js";import"./utils-Jw-4AGsF-CoTihMc6.js";import"./mat2df32-BCnkwMW8-BLRY8i4P.js";import"./mat3-DOnW3DjW-C3hbW9XY.js";import"./vec2f32-CVhmN3Me-DxoqVD7C.js";import"./Scheduler-Br-2v2ys-6dZUXz2P.js";import"./vec32-BuqRmYBM-qzUnKIlX.js";import"./unitBezier-DhyPAQO8-B9kUb8N6.js";import"./Tile-DvzRai0K-DSIXottX.js";import"./quickselect-DHTstthl-Ds_Aj0x5.js";import"./definitions-CBIQmVpq-o3EUznKY.js";import"./enums-DBi1-Mm2-CUS1pvQe.js";import"./Texture-DXSFJsEu-Cs05AQGu.js";import"./getDataTypeBytes-HSdrWtlL-ClHsCcSN.js";import"./imageUtils-DEFspgr5-DlLZpkaW.js";import"./themeUtils-RB4IoNvm-uO-dsvgO.js";import"./ColorBackground-Dcc9SnXm-lIMOzjjM.js";import"./EffectView-Bw7SZPlx-5j5YiEOs.js";import"./parser-hXQyB-Qx-XifxMc6X.js";import"./layerViewUtils-Bk5QNiAa-0aUtYKWQ.js";let r=class extends w{constructor(i){super(i),this.type="group",this.layerViews=new m}destroy(){this.layerViews.length=0}_allLayerViewVisibility(i){this.layerViews.forEach(e=>{e.visible=i})}initialize(){this.addHandles([this.layerViews.on("change",i=>this._layerViewsChangeHandler(i)),l(()=>this.layer?.visibilityMode,()=>{this.layer&&this._applyVisibility(()=>this._allLayerViewVisibility(this.visible),()=>this._applyExclusiveVisibility(null))},o),l(()=>this.visible,i=>{this._applyVisibility(()=>this._allLayerViewVisibility(i),()=>{})},o)],"grouplayerview"),this._layerViewsChangeHandler({target:null,added:this.layerViews.toArray(),removed:[],moved:[]})}get creatingLayerViews(){return this.view?.layerViewManager?.isCreatingLayerViewsForLayer(this.layer)??!1}set layerViews(i){this._set("layerViews",d(i,this._get("layerViews")))}get updatingProgress(){return this.layerViews.length===0?1:this.layerViews.reduce((i,e)=>i+e.updatingProgress,0)/this.layerViews.length}isUpdating(){return this.creatingLayerViews||this.layerViews.some(i=>i.updating)}_hasLayerViewVisibleOverrides(){return this.layerViews.some(i=>i._isOverridden("visible"))}_findLayerViewForLayer(i){return i&&this.layerViews.find(e=>e.layer===i)}_firstVisibleOnLayerOrder(){const i=this.layer.layers.find(e=>!!this._findLayerViewForLayer(e)?.visible);return i&&this._findLayerViewForLayer(i)}_applyExclusiveVisibility(i){i==null&&(i=this._firstVisibleOnLayerOrder())==null&&this.layerViews.length>0&&(i=this._findLayerViewForLayer(this.layer.layers.at(0))),this.layerViews.forEach(e=>{e.visible=e===i})}_layerViewsChangeHandler(i){this.removeHandles("grouplayerview:visible"),this.addHandles(this.layerViews.map(a=>l(()=>a.visible,y=>this._applyVisibility(()=>{y!==this.visible&&(a.visible=this.visible)},()=>this._applyExclusiveVisibility(y?a:null)),o)).toArray(),"grouplayerview:visible");const e=i.added[i.added.length-1];this._applyVisibility(()=>this._allLayerViewVisibility(this.visible),()=>this._applyExclusiveVisibility(e?.visible?e:null))}_applyVisibility(i,e){this._hasLayerViewVisibleOverrides()&&(this.layer?.visibilityMode==="inherited"?i():this.layer?.visibilityMode==="exclusive"&&e())}};t([s({readOnly:!0})],r.prototype,"creatingLayerViews",null),t([s({cast:n})],r.prototype,"layerViews",null),t([s({readOnly:!0})],r.prototype,"updatingProgress",null),t([s()],r.prototype,"view",void 0),r=t([h("esri.views.layers.GroupLayerView")],r);const v=r;let p=class extends V(v){attach(){this._updateStageChildren(),this.addAttachHandles(this.layerViews.on("after-changes",()=>this._updateStageChildren()))}detach(){this.container.removeAllChildren()}update(i){}viewChange(){}moveEnd(){}_updateStageChildren(){this.container.removeAllChildren(),this.layerViews.forEach((i,e)=>this.container.addChildAt(i.container,e))}};p=t([h("esri.views.2d.layers.GroupLayerView2D")],p);const xi=p;export{xi as default};
