import{fu as I,h as E,cw as D,iI as N,cx as v,aM as M,a6 as P,ap as Z,N as G,bu as R}from"./main-DHtbAQdA.js";import{g as $}from"./asyncUtils-BPUlNCrX-D2HVH2_w.js";import{U as B,u as z,X as L,R as Y,L as U}from"./featureConversionUtils-Bjjlcfdo-RVZMNy73.js";import{M as W}from"./executeQueryForSnapping-BsS9M1AV-C3ztVdZj.js";import{I as J}from"./FeatureStore-DfjNNhD_-jguO-tJw.js";import{p as b,h as w}from"./queryUtils-DZy8hWx3-Ca7byjnv.js";import{K as X}from"./QueryEngine-B7NH52mH-Pv259XyJ.js";import{_ as H,Q as K,Y as V}from"./geojson-BLilYCbg-Cej1ai0l.js";import{d as ee,f as te,A as ie}from"./clientSideDefaults-BoAP7ZAL-BH_8Z37y.js";import{b as se,C as T,w as q,a as F,A as k,q as re}from"./sourceUtils-k2zbXRon-_2FhjxnF.js";import{o as C}from"./FieldsIndex-Bt0Y8aWr-BTcJAVb8.js";import{i as ne}from"./fieldType-PhcL4ff8--kuv9my_.js";import"./OptimizedFeature-mIz_HhJg-BtQYWh3P.js";import"./memoryEstimations-DeWfxwaV-CoK5G6KM.js";import"./OptimizedGeometry-pzfNw1AT-BnwWoags.js";import"./OptimizedFeatureSet-Dz5hF8Qm-B1brSkRC.js";import"./normalizeUtils-u00NGW3M-D09mSwtw.js";import"./normalizeUtilsCommon-ClagynAA-6Xs2r3zg.js";import"./utils-BO8hgPs3-QLOzWXOS.js";import"./utils-DpLVEUvg-_bZau67o.js";import"./timeSupport-C2LrHIeW-aFw0BbqN.js";import"./BoundsStore-DffHzOYo-DrmY3gJ-.js";import"./PooledRBush-DfSXIoUa-DyTClDH-.js";import"./quickselect-DHTstthl-Ds_Aj0x5.js";import"./optimizedFeatureQueryEngineAdapter-LiTJLGWN-B2rPrQ4V.js";import"./projectionUtils-B-CplN3q-BG9kybqU.js";import"./json-BI97KiBB-Ce5cWfI2.js";import"./WhereClauseCache-CixYkZwn-Xhi6pi23.js";import"./LRUCache-DPWdPNTF-Du_Z0yHt.js";import"./MemCache-qDGoejB7-9IozotvY.js";import"./WhereClause-D4rZJkVN-C5hKmr3v.js";import"./TimeOnly-CGkId3bj-BPYuAWul.js";import"./enum-g1DWyQyu-BCywOts5.js";import"./UnknownTimeZone-DxjyzFvs-HN_a6G7q.js";import"./QueryEngineCapabilities-CFs6iCek-Cjdn3gaY.js";import"./quantizationUtils-D907S7Bm-DGQIMuEP.js";import"./utils-s7ypkCzr-BAjD-yt5.js";import"./TimeExtent-Cf2Pienb-BXiFml2A.js";import"./heatmapUtils-DRTN9U3a-C94dB_zO.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./vec4f64-DD-nkcCV-CSNWKRqG.js";import"./utils-CdIngiRE-DmpN43QY.js";import"./mat4f32-BdRMyjXW-CWt6U0BP.js";import"./mat4-OOmHNWi7-OqKcclqG.js";import"./intl-BAA1onnp-g-77kbs5.js";import"./timeZoneUtils-d5p0Jda1-jb9GbogI.js";import"./utils-CKRJGBD_-CxFgDpLe.js";import"./ClassBreaksDefinition-BZ4FJdWb-BVRe-3-l.js";import"./SnappingCandidate-DIiHATRz-CuetCfU1.js";import"./FixedIntervalBinParameters-CsFyInBi-aP6ytQ2m.js";import"./NormalizationBinParametersMixin-70JA0FRq-C3b5kVPC.js";import"./Scheduler-BV4C4cVP-DmXgo6A3.js";import"./debugFlags-8tOwPnHK-x8qSCjFs.js";import"./date-B2Zfy8vK-DIf-QFLz.js";const ae={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsQueryAttachmentOrderByFields:!1,supportsQueryBins:!0,supportsQueryWithCacheHint:!0,supportsQueryWithDistance:!0,supportsQueryWithResultType:!0,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0},queryBinsCapabilities:re};class lt{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){this._queryEngine?.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const s=[],[i]=await Promise.all([e.url?this._fetch(t?.signal):null,this._checkProjection(e.spatialReference)]),r=H(i,{geometryType:e.geometryType}),u=e.fields||r.fields||[],l=e.hasZ!=null?e.hasZ:r.hasZ,p=r.geometryType;let c=e.objectIdField||r.objectIdFieldName||"__OBJECTID";const f=e.spatialReference||I;let o=e.timeInfo;u===r.fields&&r.unknownFields.length>0&&s.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:r.unknownFields}});const y=new C(u);let n=y.get(c);n?(n.type!=="esriFieldTypeString"&&(n.type="esriFieldTypeOID"),n.editable=!1,n.nullable=!1,c=n.name):(n={alias:c,name:c,type:r.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},u.unshift(n));const d={};for(const a of u){if(a.name==null&&(a.name=a.alias),a.alias==null&&(a.alias=a.name),!a.name)throw new E("geojson-layer:invalid-field-name","field name is missing",{field:a});if(!ne.jsonValues.includes(a.type))throw new E("geojson-layer:invalid-field-type",`invalid type for field "${a.name}"`,{field:a});if(a.name!==n.name){const _=D(a);_!==void 0&&(d[a.name]=_)}a.length==null&&(a.length=N(a))}if(o){if(o.startTimeField){const a=y.get(o.startTimeField);a?(o.startTimeField=a.name,a.type="esriFieldTypeDate"):o.startTimeField=null}if(o.endTimeField){const a=y.get(o.endTimeField);a?(o.endTimeField=a.name,a.type="esriFieldTypeDate"):o.endTimeField=null}if(o.trackIdField){const a=y.get(o.trackIdField);a?o.trackIdField=a.name:(o.trackIdField=null,s.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:o}}))}o.startTimeField||o.endTimeField||(s.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:o}}),o=null)}const h=p?ee(p):void 0,m=y.dateFields.length?{timeZoneIANA:v}:null,g={warnings:s,featureErrors:[],layerDefinition:{...ae,drawingInfo:h??void 0,templates:te(d),extent:void 0,geometryType:p,objectIdField:c,fields:u,hasZ:!!l,timeInfo:o,dateFieldsTimeReference:m}},O={type:"object-id",fieldName:c};this._queryEngine=new X({fieldsIndex:C.fromLayerJSON({fields:u,timeInfo:o,dateFieldsTimeReference:m}),geometryType:p,hasM:!1,hasZ:l,featureIdInfo:O,spatialReference:f,timeInfo:o,featureStore:new J({geometryType:p,hasM:!1,hasZ:l})});const j=this._queryEngine.fieldsIndex.requiredFields.indexOf(n);j>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(j,1),this._createDefaultAttributes=ie(d,c);const x=await this._createFeatures(i);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,x);const A=this._normalizeFeatures(x,g.featureErrors);this._queryEngine.featureStore.addMany(A);const{fullExtent:Q,timeExtent:S}=await this._queryEngine.fetchRecomputedExtents();if(g.layerDefinition.extent=Q,S){const{start:a,end:_}=S;g.layerDefinition.timeInfo.timeExtent=[a,_]}return g}async applyEdits(e){const{spatialReference:t,geometryType:s}=this._queryEngine;return await Promise.all([se(t,s),b(e.adds,t),b(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),W(this._queryEngine,e,t.signal)}async queryAttributeBins(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeAttributeBinsQuery(e,t.signal)}async refresh(e){this._loadOptions.customParameters=e,this._snapshotTask?.abort(),this._snapshotTask=$(this._snapshotFeatures),this._snapshotTask.promise.then(i=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,i);const r=this._normalizeFeatures(i);r&&this._queryEngine.featureStore.addMany(r)},i=>{this._queryEngine.featureStore.clear(),M(i)||P.getLogger("esri.layers.GeoJSONLayer").error(new E("geojson-layer:refresh","An error occurred during refresh",{error:i}))}),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:s}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:s}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:s,objectIdField:i}=this._queryEngine,r=K(e,{geometryType:t,hasZ:s,objectIdField:i});if(!Z(this._queryEngine.spatialReference,I))for(const u of r)u.geometry!=null&&(u.geometry=B(w(z(u.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),I,this._queryEngine.spatialReference)));return r}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:s}=this._loadOptions,i=(await G(t??"",{responseType:"json",query:{...s},signal:e})).data;return V(i),i}_normalizeFeatures(e,t){const{objectIdField:s,fieldsIndex:i}=this._queryEngine,r=[];for(const u of e){const l=this._createDefaultAttributes(),p=T(i,l,u.attributes,!0);p?t?.push(p):(this._assignObjectId(l,u.attributes,!0),u.attributes=l,u.objectId=l[s],r.push(u))}return r}async _applyEdits(e){const{adds:t,updates:s,deletes:i}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t?.length&&this._applyAddEdits(r,t),s?.length&&this._applyUpdateEdits(r,s),i?.length){for(const p of i)r.deleteResults.push(q(p));this._queryEngine.featureStore.removeManyById(i)}const{fullExtent:u,timeExtent:l}=await this._queryEngine.fetchRecomputedExtents();return{extent:u,timeExtent:l,featureEditResults:r}}_applyAddEdits(e,t){const{addResults:s}=e,{geometryType:i,hasM:r,hasZ:u,objectIdField:l,spatialReference:p,featureStore:c,fieldsIndex:f}=this._queryEngine,o=[],y={type:"object-id",fieldName:l};for(const n of t){if(n.geometry&&i!==R(n.geometry)){s.push(F("Incorrect geometry type."));continue}const d=this._createDefaultAttributes(),h=T(f,d,n.attributes);if(h)s.push(h);else{if(this._assignObjectId(d,n.attributes),n.attributes=d,n.uid!=null){const m=n.attributes[l];e.uidToObjectId[n.uid]=m}if(n.geometry!=null){const m=n.geometry.spatialReference??p;n.geometry=w(k(n.geometry,m),m,p)}o.push(n),s.push(q(n.attributes[l]))}}c.addMany(L([],o,i,u,r,y))}_applyUpdateEdits({updateResults:e},t){const{geometryType:s,hasM:i,hasZ:r,objectIdField:u,spatialReference:l,featureStore:p,fieldsIndex:c}=this._queryEngine,f={type:"object-id",fieldName:u};for(const o of t){const{attributes:y,geometry:n}=o,d=y?.[u];if(d==null){e.push(F(`Identifier field ${u} missing`));continue}if(!p.has(d)){e.push(F(`Feature with object id ${d} missing`));continue}const h=Y(p.getFeature(d),s,r,i);if(n!=null){if(s!==R(n)){e.push(F("Incorrect geometry type."));continue}const m=n.spatialReference??l;h.geometry=w(k(n,m),m,l)}if(y){const m=T(c,h.attributes,y);if(m){e.push(m);continue}}p.add(U(h,s,r,i,f)),e.push(q(d))}}_createObjectIdGenerator(e,t){const s=e.fieldsIndex.get(e.objectIdField);if(s.type==="esriFieldTypeString")return()=>s.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const r of t)r.objectId&&(i=Math.max(i,r.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(e,t,s=!1){const i=this._queryEngine.objectIdField;e[i]=s&&i in t?t[i]:this._objectIdGenerator()}async _checkProjection(e){try{await b(I,e)}catch{throw new E("geojson-layer","Projection not supported")}}}export{lt as default};
