import{ki as A,a6 as B}from"./main-D6SnduPa.js";import{u as C}from"./VertexArrayObject-CieliEx4-DcUN_UUV.js";import{N as _,_ as d,L as M,z as w}from"./Texture-D5XWO2GQ-D1E5euPs.js";import{c as g,d as a,M as o,t as l,n as m,Y as R,f as P,I as y,X as z,g as L,E as D,j as U,V as F,y as O}from"./enums-wEDHPbCF-Cf76M5_x.js";class K{constructor(e,t=0,i=t){this.internalFormat=e,this.width=t,this.height=i,this.multisampled=!1,this.samples=1}}function X(n){return n.width<=0||n.height<=0||n.internalFormat==null?0:n.width*n.height*w(n.internalFormat)}class I{constructor(e,t){this._context=e,this._descriptor=t,this.type=_.Renderbuffer,this._context.instanceCounter.increment(g.Renderbuffer,this);const i=this._context.gl;this.glName=i.createRenderbuffer(),this._context.bindRenderbuffer(this);const{width:r,height:s,internalFormat:h,multisampled:c}=t;c?i.renderbufferStorageMultisample(i.RENDERBUFFER,this.samples,h,r,s):i.renderbufferStorage(i.RENDERBUFFER,h,r,s),this._context.bindRenderbuffer(null)}get descriptor(){return this._descriptor}get samples(){const e=this._descriptor.samples,t=this._context.parameters.maxSamples;return e?Math.min(e,t):t}get usedMemory(){return X(this._descriptor)}resize(e,t){const i=this._descriptor;if(i.width===e&&i.height===t)return;i.width=e,i.height=t;const r=this._context.gl;this._context.bindRenderbuffer(this),i.multisampled?r.renderbufferStorageMultisample(r.RENDERBUFFER,this.samples,i.internalFormat,i.width,i.height):r.renderbufferStorage(r.RENDERBUFFER,i.internalFormat,i.width,i.height),this._context.bindRenderbuffer(null)}dispose(){this._context&&(this._context.gl.deleteRenderbuffer(this.glName),this._context.instanceCounter.decrement(g.Renderbuffer,this),this._context=null)}}const v=()=>B.getLogger("esri.views.webgl.FramebufferObject");class T{constructor(e,t,i){if(this._context=e,this._glName=null,this._colorAttachments=new Map,this._depthStencilBuffer=null,this._depthStencilTexture=null,this._initialized=!1,e.instanceCounter.increment(g.FramebufferObject,this),t!=null){const r=x(t)?t:new d(e,t);this._colorAttachments.set(a,r),this._validateTextureDescriptor(r.descriptor),this._validateColorAttachmentPoint(a)}if(i!=null)if(j(i))this._depthStencilTexture=x(i)?i:new d(e,i),this._validateTextureDescriptor(this._depthStencilTexture.descriptor);else{const r=H(i)?i:new I(e,i);this._depthStencilBuffer=r,this._validateRenderbufferDescriptor(r.descriptor)}}dispose(){const{_colorAttachments:e,_glName:t}=this;if(e.size===0&&!this._depthStencilBuffer&&!this._depthStencilTexture&&!t)return;const{_context:i}=this,r=i.getBoundFramebufferObject();e.forEach((s,h)=>this.detachColorTexture(h)?.dispose()),this.detachDepthStencilBuffer()?.dispose(),this.detachDepthStencilTexture()?.dispose(),i.gl.deleteFramebuffer(t),this._glName=null,i.bindFramebuffer(r===this?null:r),i.instanceCounter.decrement(g.FramebufferObject,this)}get glName(){return this._glName}get colorTexture(){return this._colorAttachments.get(a)}get depthStencil(){return this._depthStencilTexture||this._depthStencilBuffer}get depthStencilTexture(){return this._depthStencilTexture}get width(){return(this._colorAttachments.get(a)??this._depthStencilTexture??this._depthStencilBuffer)?.descriptor?.width??0}get height(){return(this._colorAttachments.get(a)??this._depthStencilTexture??this._depthStencilBuffer)?.descriptor?.height??0}get usedMemory(){return[...this._colorAttachments].reduce((e,[t,i])=>e+i.usedMemory,this.depthStencil?.usedMemory??0)}static{this._MAX_COLOR_ATTACHMENTS=-1}getColorTexture(e){const t=this._colorAttachments.get(e);return t&&x(t)?t:null}get colorAttachments(){return[...this._colorAttachments.keys()]}attachColorTexture(e,t=a){if(!e)return;this._validateColorAttachmentPoint(t);const{descriptor:i}=e;this._validateTextureDescriptor(i),this.detachColorTexture(t)?.dispose(),this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(e.glName,t)),this._colorAttachments.set(t,e)}detachColorTexture(e=a){const t=this._colorAttachments.get(e);if(t)return this._initialized&&this._context.temporaryBindFramebufferObject(this,()=>{this._framebufferTexture2D(null,e)}),this._colorAttachments.delete(e),t}setColorTextureTarget(e,t=a,i=0){const r=this._colorAttachments.get(t);r&&(e===o.TEXTURE_2D_ARRAY?this._framebufferTextureLayer(r.glName,t,l.FRAMEBUFFER,0,i):this._framebufferTexture2D(r.glName,t,e,l.FRAMEBUFFER,0))}attachDepthStencil(e){if(e)switch(e.type){case _.Texture:return this._attachDepthStencilTexture(e);case _.Renderbuffer:return this._attachDepthStencilBuffer(e)}}_attachDepthStencilTexture(e){if(e==null)return;const{descriptor:t}=e,{pixelFormat:i,dataType:r}=t;i===m.DEPTH_STENCIL||i===m.DEPTH_COMPONENT?i!==m.DEPTH_STENCIL||r===R.UNSIGNED_INT_24_8?i!==m.DEPTH_COMPONENT||r===R.UNSIGNED_INT||r===R.UNSIGNED_SHORT?(this._validateTextureDescriptor(t),this._disposeDepthStencilAttachments(),this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(e.glName,E(i))),this._depthStencilTexture?.dispose(),this._depthStencilTexture=e):console.error("Depth texture must have data type of UNSIGNED_INT or UNSIGNED_SHORT!"):console.error("Depth/Stencil texture must have data type of UNSIGNED_INT_24_8!"):console.error("Depth/Stencil texture must have a pixel type of DEPTH_STENCIL!")}detachDepthStencilTexture(){const e=this._depthStencilTexture;return e&&this._initialized&&this._context.temporaryBindFramebufferObject(this,()=>{this._framebufferTexture2D(null,E(e.descriptor.pixelFormat))}),this._depthStencilTexture=null,e}_attachDepthStencilBuffer(e){if(e==null)return;const t=e.descriptor;if(this._validateRenderbufferDescriptor(t),this._disposeDepthStencilAttachments(),this._initialized){this._context.bindFramebuffer(this);const{gl:i}=this._context,r=this._getGLAttachmentPoint(t);i.framebufferRenderbuffer(l.FRAMEBUFFER,r,i.RENDERBUFFER,e.glName)}this._depthStencilBuffer=e}detachDepthStencilBuffer(){const e=this._depthStencilBuffer;if(e&&this._initialized){const{_context:t}=this,i=t.getBoundFramebufferObject();t.bindFramebuffer(this);const{gl:r}=t,s=this._getGLAttachmentPoint(e.descriptor);r.framebufferRenderbuffer(l.FRAMEBUFFER,s,r.RENDERBUFFER,null),t.bindFramebuffer(i)}return this._depthStencilBuffer=null,e}invalidateAttachments(e){const{_context:t}=this;t.temporaryBindFramebufferObject(this,()=>t.gl.invalidateFramebuffer(l.FRAMEBUFFER,e),!0)}copyToTexture(e,t,i,r,s,h,c){(e<0||t<0||s<0||h<0)&&console.error("Offsets cannot be negative!"),(i<=0||r<=0)&&console.error("Copy width and height must be greater than zero!");const f=c.descriptor;c.descriptor.target!==o.TEXTURE_2D&&console.error("Texture target must be TEXTURE_2D!"),(f?.width==null||f?.height==null||e+i>this.width||t+r>this.height||s+i>f.width||h+r>f.height)&&console.error("Bad dimensions, the current input values will attempt to read or copy out of bounds!");const u=this._context,b=u.bindTexture(c,d.TEXTURE_UNIT_FOR_UPDATES);u.setActiveTexture(d.TEXTURE_UNIT_FOR_UPDATES),u.bindFramebuffer(this),u.gl.copyTexSubImage2D(o.TEXTURE_2D,0,s,h,e,t,i,r),u.bindTexture(b,d.TEXTURE_UNIT_FOR_UPDATES)}readPixels(e,t,i,r,s,h,c){(i<=0||r<=0)&&console.error("Copy width and height must be greater than zero!"),c||console.error("Target memory is not initialized!"),this._context.bindFramebuffer(this),this._context.gl.readPixels(e,t,i,r,s,h,c)}async readPixelsAsync(e,t,i,r,s,h,c){const{gl:f}=this._context,u=C.createPixelPack(this._context,P.STREAM_READ,c.byteLength);this._context.bindBuffer(u);const b=this._context.getBoundFramebufferObject();this._context.bindFramebuffer(this),f.readPixels(e,t,i,r,s,h,0),this._context.unbindBuffer(y.PIXEL_PACK_BUFFER),this._context.bindFramebuffer(b),await u.getSubDataAsync(c),u.dispose()}resize(e,t){if(this.width===e&&this.height===t)return;const i={width:e,height:t};p(i,this._context.parameters.maxTextureSize),this._colorAttachments.forEach(r=>r.resize(i.width,i.height)),this._depthStencilTexture?.resize(i.width,i.height),this._initialized&&(p(i,this._context.parameters.maxRenderbufferSize),this._depthStencilBuffer?.resize(i.width,i.height),this._context.getBoundFramebufferObject()===this&&this._context.bindFramebuffer(null),this._initialized=!1)}initializeAndBind(e=l.FRAMEBUFFER){const{gl:t}=this._context;if(this._initialized)return void t.bindFramebuffer(e,this.glName);this._glName&&t.deleteFramebuffer(this._glName);const i=t.createFramebuffer();if(t.bindFramebuffer(e,i),this._colorAttachments.forEach((r,s)=>{const h=N(r);h===o.TEXTURE_2D_ARRAY?this._framebufferTextureLayer(r.glName,s,e,0,0):this._framebufferTexture2D(r.glName,s,h,e)}),this._depthStencilBuffer){const r=this._getGLAttachmentPoint(this._depthStencilBuffer.descriptor);t.framebufferRenderbuffer(e,r,t.RENDERBUFFER,this._depthStencilBuffer.glName)}else if(this._depthStencilTexture){const r=E(this._depthStencilTexture.descriptor.pixelFormat);this._framebufferTexture2D(this._depthStencilTexture.glName,r,N(this._depthStencilTexture),e)}M()&&t.checkFramebufferStatus(e)!==t.FRAMEBUFFER_COMPLETE&&console.error("Framebuffer is incomplete!"),this._glName=i,this._initialized=!0}_framebufferTexture2D(e,t=a,i=o.TEXTURE_2D,r=l.FRAMEBUFFER,s=0){this._context.gl.framebufferTexture2D(r,t,i,e,s)}_framebufferTextureLayer(e,t=a,i=l.FRAMEBUFFER,r=0,s=0){this._context.gl.framebufferTextureLayer(i,t,e,r,s)}_disposeDepthStencilAttachments(){const e=this._context.gl;if(this._depthStencilBuffer){if(this._initialized){this._context.bindFramebuffer(this);const t=this._getGLAttachmentPoint(this._depthStencilBuffer.descriptor);e.framebufferRenderbuffer(l.FRAMEBUFFER,t,e.RENDERBUFFER,null)}this._depthStencilBuffer=A(this._depthStencilBuffer)}this._depthStencilTexture&&(this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(null,E(this._depthStencilTexture.descriptor.pixelFormat))),this._depthStencilTexture=A(this._depthStencilTexture))}_validateTextureDescriptor(e){e.target!==o.TEXTURE_2D&&e.target!==o.TEXTURE_CUBE_MAP&&e.target!==o.TEXTURE_2D_ARRAY&&console.error("Texture type must be TEXTURE_2D, TEXTURE_2D_ARRAY or TEXTURE_CUBE_MAP!"),p(e,this._context.parameters.maxTextureSize),this._validateBufferDimensions(e)}_validateRenderbufferDescriptor(e){p(e,this._context.parameters.maxRenderbufferSize),this._validateBufferDimensions(e)}_validateBufferDimensions(e){e.width<=0&&(e.width=this.width),e.height<=0&&(e.height=this.height),this.width>0&&this.height>0&&(this.width===e.width&&this.height===e.height||console.error("Attachment size must match framebuffer size!"))}_getGLAttachmentPoint(e){switch(e.internalFormat){case F.DEPTH_COMPONENT16:case F.DEPTH_COMPONENT24:case F.DEPTH_COMPONENT32F:return O;case D.DEPTH24_STENCIL8:case D.DEPTH32F_STENCIL8:return U;case z.STENCIL_INDEX8:return L}}_validateColorAttachmentPoint(e){if(T._MAX_COLOR_ATTACHMENTS===-1){const{gl:i}=this._context;T._MAX_COLOR_ATTACHMENTS=i.getParameter(i.MAX_COLOR_ATTACHMENTS)}const t=e-a;t+1>T._MAX_COLOR_ATTACHMENTS&&B.getLogger("esri.views.webgl.FrameBufferObject").error("esri.FrameBufferObject",`illegal attachment point for color attachment: ${t+1}. Implementation supports up to ${T._MAX_COLOR_ATTACHMENTS} color attachments`)}}function x(n){return S(n)===_.Texture}function H(n){return S(n)===_.Renderbuffer}function j(n){return x(n)||G(n)}function G(n){return S(n)===_.TextureDescriptor}function S(n){return n!=null&&"type"in n?n.type:null}function p(n,e){const t=Math.max(n.width,n.height);if(t>e){v().warnOnce(`Resizing FBO attachment size ${n.width}x${n.height} to device limit ${e}`);const i=e/t;return n.width=Math.round(n.width*i),n.height=Math.round(n.height*i),!1}return!0}function N(n){return n.descriptor.target===o.TEXTURE_CUBE_MAP?o.TEXTURE_CUBE_MAP_POSITIVE_X:n.descriptor.target===o.TEXTURE_2D_ARRAY?o.TEXTURE_2D_ARRAY:o.TEXTURE_2D}function E(n){return n===m.DEPTH_COMPONENT?O:U}export{K as L,I as O,T as d};
