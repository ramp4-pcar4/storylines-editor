const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./mapImageLayerUtils-DsXTgn4O-pIa_SVYz.js","./utils-DyDDSDvN-lqMA1rKS.js","./main-BFNwcKi0.js","./main-CSt-K0uB.css","./originUtils-BLsWtgV9-B4sclfuf.js","./multiOriginJSONSupportUtils-DGETddQl-BrWaY9_8.js","./PortalItem-BP-IQXnZ-IpgEgcSF.js","./jsonContext-C9WBVzLb-eZjeddIG.js","./portalItemUtils-BfWDJg-S-BiLqtZ4_.js","./projectionUtils-B-CplN3q-CI73yAQC.js","./saveUtils-W0sSii7v-Cv_Ss2Z4.js"])))=>i.map(i=>d[i]);
import{bv as w,_,t as O,bA as v,bB as g,by as E,N as f,o as T,h as b,aM as P,v as i,S as p,w as A,F as L,bh as M,n as F}from"./main-BFNwcKi0.js";import{d as R}from"./loadAll-DQWsVoX1-Ck0A9c8Y.js";import{w as N}from"./MultiOriginJSONSupport-BqiFJbbt-DTaGT4yS.js";import{a as V}from"./scaleUtils-Br-smv3A-DOz36paR.js";import{e as $}from"./Layer-DvVVmz9x-DGPbs0Tc.js";import{n as j}from"./APIKeyMixin-BNzYY3QS-CKMY99hQ.js";import{$ as q,k as J,o as U}from"./SublayersOwner-KP6FVHkR-DeCz_XUK.js";import{a as k}from"./ArcGISService-B6M5rzsr-QXMN68h1.js";import{u as W}from"./BlendLayer-DjW_5k0v-DjRJRlEP.js";import{i as H}from"./CustomParametersMixin-CSMgHDaw-CvAxAZ9X.js";import{u as z,i as B}from"./OperationalLayer-CbXUnTH0-085XZifQ.js";import{x as C}from"./PortalLayer-B34ZUA2x-C3av8rnd.js";import{T as D}from"./RefreshableLayer-Qpvyi8qY-DpZO_u2S.js";import{S as G}from"./ScaleRangeLayer-x42fwED3-CQFuV0mO.js";import{x as Z}from"./TemporalLayer-lQRje9wB-Cjd6bcYT.js";import{s as K}from"./ExportImageParameters-CC1oba-O-BTzLqFhz.js";import{i as Y}from"./imageBitmapUtils-wCApjb1B-lhRfQ5Ad.js";import{f as S}from"./sublayerUtils-DUalPlkE-D3Gxjp1F.js";import{a as Q}from"./versionUtils-BwTR8Ufq-B2CQ90jO.js";import{r as X}from"./ElevationInfo-DE5to86a-B1fu1NDi.js";import{l as tt}from"./TimeExtent-Cf2Pienb-DOmRVQqn.js";import{C as x}from"./timeZoneUtils-d5p0Jda1-GJK595YP.js";import{E as y}from"./interfaces-Cwm0pihk-Ptzy6gTd.js";import"./asyncUtils-BPUlNCrX-DumqzKDa.js";import"./Version-CnwD6MZa-Lfb9S6Ow.js";import"./portalItemUtils-BfWDJg-S-BiLqtZ4_.js";import"./projectionUtils-B-CplN3q-CI73yAQC.js";import"./CollectionFlattener-DyEG1Q6J-DDE4dU8F.js";import"./QueryTask-DxRoWbf6-C3mY1RFg.js";import"./infoFor3D-BeWnZejW-DJyBSoCy.js";import"./Query-n1aoaaFC-BN-6_Ty2.js";import"./Field-BIQ-quF4-DzRigtr3.js";import"./fieldType-PhcL4ff8-CNIZyvrc.js";import"./utils-BO8hgPs3-zKn2S1KH.js";import"./executeForIds-CRDS8hwo-OdbVKmds.js";import"./query-COAsogFA-BPQJ5jBP.js";import"./normalizeUtils-u00NGW3M-B_Qp6zD8.js";import"./normalizeUtilsCommon-ClagynAA-LrEkvY_m.js";import"./utils-DpLVEUvg-DmwoFJGL.js";import"./pbfQueryUtils-aBcHX3TJ-CAZ2le3J.js";import"./pbf-hoLeQyp2-DtwLX0G0.js";import"./memoryEstimations-DeWfxwaV-CcOrOZpo.js";import"./OptimizedGeometry-pzfNw1AT-BaBuOHZm.js";import"./OptimizedFeature-mIz_HhJg-CwkA-Yjf.js";import"./OptimizedFeatureSet-Dz5hF8Qm-B1brSkRC.js";import"./queryZScale-CwrUzBjP-C0H9bWhZ.js";import"./executeQueryPBF-BbqQX_MH-Be7e3C1-.js";import"./featureConversionUtils-Bjjlcfdo-CjWU3XJE.js";import"./FeatureSet-BVGGhhH9-TH-KQJCF.js";import"./executeQueryJSON-D8fHgTZN-B6V9KieG.js";import"./OrderedLayer-BD-wnvgD-CF9SnRia.js";import"./OrderByInfo-SNGyPlhJ-BImmRyHM.js";import"./labelingInfo-DuLk-IW_-BNBAlYu6.js";import"./uuid-Dj9mdEVg-BaKSCiyT.js";import"./SimpleRenderer-C1YRhRzu-BlI5DxM1.js";import"./commonProperties-CJLeiNuA-CAs3dBnk.js";import"./colorRamps-trM-CPFS--rcr0kfu.js";import"./ColorStop-CL7v3R-A-DW8Pz3in.js";import"./visualVariableUtils-BTS148WR-CmaVJ3bt.js";import"./lengthUtils-C61nRlXw-B3FKlWR8.js";import"./UniqueValueRenderer-CLXHFtg9-4YqASi0E.js";import"./diffUtils-BxG8DCnW-iSz-NZV6.js";import"./RendererLegendOptions-Bil_IDab-Bbqnpy_o.js";import"./styleUtils-DBPDLVBX-wc3AXi8C.js";import"./RelationshipQuery-CaEbQySU-DHdqkVVj.js";import"./NormalizationBinParametersMixin-70JA0FRq-BJ_CDh-l.js";import"./labelUtils-Oapo6DRu-CM63ySY2.js";import"./FeatureType-DdIqcZ2U-q6JTl5mG.js";import"./FeatureTemplate-CW5LOQ_p-DiVJKBng.js";import"./FieldsIndex-Bt0Y8aWr-Df6kH2Xb.js";import"./UnknownTimeZone-DxjyzFvs-DxLbrny9.js";import"./LayerFloorInfo-CkeH-P4_-7N9CFa5I.js";import"./Relationship-B6fQjk3--8YCD66uc.js";import"./serviceCapabilitiesUtils-BerH-9mt-DdoX4jb9.js";import"./typeUtils-CB2EGBWO-DleyNzNe.js";import"./ClassBreaksRenderer-Bq2XGpfI-BNTgb0jZ.js";import"./LRUCache-DPWdPNTF-Du_Z0yHt.js";import"./MemCache-qDGoejB7-9IozotvY.js";import"./DictionaryScriptEvaluator-DW5hOK9A-DMV7Jm5h.js";import"./ArcadeExpression-XjY3x7KV-Usy-NKJW.js";import"./TimeOnly-CGkId3bj-BlPb89p8.js";import"./enum-g1DWyQyu-DADBTVhz.js";import"./utils-BfXZnjCE-RSMN3nbu.js";import"./defaultCIMValues-BcSaJjm--58G-soMN.js";import"./enums-a_LDTPYU-CBIcy3mM.js";import"./heatmapUtils-DRTN9U3a-CXHZOq6N.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./vec4f64-DD-nkcCV-CSNWKRqG.js";import"./popupUtils-B99PyAFi-CYoIMslG.js";import"./layerContainerType-ChWdCT09-G5sdAsSy.js";import"./jsonUtils-BwLwuQj7-zzucba7L.js";import"./parser-CWccHtwJ-C9zR5w5U.js";import"./mat4f32-BdRMyjXW-CWt6U0BP.js";import"./mat4-OOmHNWi7-CRkPo6gm.js";import"./PortalItem-BP-IQXnZ-IpgEgcSF.js";import"./TimeInfo-COHxjenm-D_pxDq-2.js";import"./floorFilterUtils-4r-vVdzs-C43jLoAE.js";let r=class extends W(Z(G(q(J(k(z(C(N(D(j(H($)))))))))))){constructor(...t){super(...t),this._exportImageParameters=new K({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.elevationInfo=new X({mode:"on-the-ground"}),this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null,this._debouncedSaveOperations=w(async(e,m,s)=>{const{save:n,saveAs:a}=await _(()=>import("./mapImageLayerUtils-DsXTgn4O-pIa_SVYz.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10]),import.meta.url);switch(e){case y.SAVE:return n(this,m);case y.SAVE_AS:return a(this,s,m)}})}normalizeCtorArgs(t,e){return typeof t=="string"?{url:t,...e}:t}load(t){const e=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},t).catch(O).then(()=>this._fetchService(e))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(t,e){const m=e.supportedImageFormatTypes;return m&&m.includes("PNG32")?"png32":"png24"}writeSublayers(t,e,m,s){if(!this.loaded||!t)return;const n=t.slice().reverse().flatten(({sublayers:o})=>o&&o.toArray().reverse()).toArray();let a=!1;const l=v(s.origin);let h;if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(l===g.PORTAL_ITEM){const o=this.createSublayersForOrigin("service").sublayers;a=S(n,o,g.SERVICE)}else if(l>g.PORTAL_ITEM){const o=this.createSublayersForOrigin("portal-item");a=S(n,o.sublayers,v(o.origin)),h=o.originWithPartialOverrides}}const d=[],c={writeSublayerStructure:a,...s,minimumWritableOrigin:h};let u=a||this.hasVisibleLayersForOrigin(l);n.forEach(o=>{const I=o.write({},c);d.push(I),u=u||o.originOf("visible")==="user"}),d.some(o=>Object.keys(o).length>1)&&(e.layers=d),u&&(e.visibleLayers=n.filter(o=>o.visible).map(o=>o.id))}createExportImageParameters(t,e,m,s){const n=s?.pixelRatio||1;t&&this.version>=10&&(t=t.clone().shiftCentralMeridian()),this._exportImageParameters.floors=s?.floors??null,this._exportImageParameters.scale=V({extent:t,width:e})*n;const a=this._exportImageParameters.toJSON(),l=!s?.rotation||this.version<10.3?{}:{rotation:-s.rotation},h=t?.spatialReference,d=E(h);a.dpi*=n;const c={};if(s?.timeExtent){const{start:u,end:o}=s.timeExtent.toJSON();c.time=u&&o&&u===o?""+u:`${u??"null"},${o??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:t?t.xmin+","+t.ymin+","+t.xmax+","+t.ymax:void 0,bboxSR:d,imageSR:d,size:e+","+m,...a,...l,...c}}async fetchImage(t,e,m,s){const{data:n}=await this._fetchImage("image",t,e,m,s);return n}async fetchImageBitmap(t,e,m,s){const{data:n,url:a}=await this._fetchImage("blob",t,e,m,s);return Y(n,a,s?.signal)}async fetchRecomputedExtents(t={}){const e={...t,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:m}=await f(this.url,e),{extent:s,fullExtent:n,timeExtent:a}=m,l=s||n;return{fullExtent:l&&T.fromJSON(l),timeExtent:a&&tt.fromJSON({start:a[0],end:a[1]})}}loadAll(){return R(this,t=>{t(this.allSublayers),t(this.subtables)})}async save(t){return this._debouncedSaveOperations(y.SAVE,t)}async saveAs(t,e){return this._debouncedSaveOperations(y.SAVE_AS,e,t)}serviceSupportsSpatialReference(t){return Q(this,t)}async _fetchImage(t,e,m,s,n){const a={responseType:t,signal:n?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,m,s,n),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(a.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:a.query});try{const{data:h}=await f(l,a);return{data:h,url:l}}catch(h){throw P(h)?h:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:h})}}async _fetchService(t){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:e,ssl:m}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:t});m&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=e,this.read(e,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(t){return!(t==null||!this.sublayersSourceJSON[t]?.visibleLayers)}};i([p(x("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),i([p({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),i([p()],r.prototype,"dpi",void 0),i([p()],r.prototype,"elevationInfo",void 0),i([p()],r.prototype,"gdbVersion",void 0),i([p()],r.prototype,"imageFormat",void 0),i([A("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),i([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),i([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),i([p()],r.prototype,"imageTransparency",void 0),i([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),i([p({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),i([p({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),i([p({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),i([p(x("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),i([p()],r.prototype,"sourceJSON",void 0),i([p({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),i([L("sublayers",{layers:{type:[U]},visibleLayers:{type:[M]}})],r.prototype,"writeSublayers",null),i([p({type:["show","hide","hide-children"],json:{origins:{"portal-item":{read:!1,write:!1}}}})],r.prototype,"listMode",void 0),i([p({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),i([p(B)],r.prototype,"url",void 0),r=i([F("esri.layers.MapImageLayer")],r);const Be=r;export{Be as default};
