import{jh as h,ji as o,i$ as p,jj as l,an as a}from"./main-ChKuQKYp.js";import{n as r,c as m,i as u}from"./memoryEstimations-DeWfxwaV-DSj9O3Gi.js";import"./Field-BIQ-quF4-DvF40xdk.js";function b(){return a("curve-densification-coarse-segments")}function f(){return a("curve-densification-max-segments")}function d(){return a("curve-densification-min-segments")}function v(){return a("curve-densification-pixel-deviation")}class k{constructor(i,s,e){this.uid=i,this.geometry=s,this.attributes=e,this.visible=!0,this.objectId=null,this.centroid=null}}function j(t){return t.geometry!=null}class Z{constructor(){this.exceededTransferLimit=!1,this.features=[],this.fields=[],this.hasM=!1,this.hasZ=!1,this.geometryType=null,this.objectIdFieldName=null,this.globalIdFieldName=null,this.geometryProperties=null,this.geohashFieldName=null,this.spatialReference=null,this.transform=null}}function $(t){if(t==null)return 0;switch(t.type){case"point":return r+10+8+24;case"polyline":case"polygon":{let i=0;const s=2+(t.hasZ?1:0)+(t.hasM?1:0),e=t.type==="polyline"?t.paths:t.rings;if((t.type==="polyline"?t.curvePaths:t.curveRings)?.length){const n=3*f()*128;i=8*n*s+128*n+32*(e.length+1)}else i=u(e);return r+64+i+34}case"multipoint":{const i=u(t.points);return r+i+64+34+32}case"extent":return r+10+64+34;case"mesh":{const i=t.vertexAttributes;return r+m(i.position,i.normal,i.uv,i.tangent)}default:return r}}function z(t,i){switch(h(i),t.type==="mesh"&&(t=t.extent),t.type){case"point":i[0]=i[3]=t.x,i[1]=i[4]=t.y,t.hasZ&&(i[2]=i[5]=t.z);break;case"polyline":for(let s=0;s<t.paths.length;s++)o(i,t.paths[s],!!t.hasZ);break;case"polygon":for(let s=0;s<t.rings.length;s++)o(i,t.rings[s],!!t.hasZ);break;case"multipoint":o(i,t.points,!!t.hasZ);break;case"extent":i[0]=t.xmin,i[1]=t.ymin,i[3]=t.xmax,i[4]=t.ymax,t.zmin!=null&&(i[2]=t.zmin),t.zmax!=null&&(i[5]=t.zmax)}return i}function I(t,i){switch(p(i),t.type==="mesh"&&(t=t.extent),t.type){case"point":i[0]=i[2]=t.x,i[1]=i[3]=t.y;break;case"polyline":for(let s=0;s<t.paths.length;s++)l(i,t.paths[s]);break;case"polygon":for(let s=0;s<t.rings.length;s++)l(i,t.rings[s]);break;case"multipoint":l(i,t.points);break;case"extent":i[0]=t.xmin,i[1]=t.ymin,i[2]=t.xmax,i[3]=t.ymax}}function w(t,i){return t.objectId!=null?t.objectId:t.attributes&&i?t.attributes[i]:null}function F(t,i,s,e){if(i?.size&&s!=null&&t)for(const n in t){if(!i.has(n))continue;const c=t[n];typeof c=="string"&&c.length>s&&(e(n),t[n]="")}}export{I,w as Z,j as b,k as d,b as g,f as h,F as j,$ as k,Z as v,v as x,d as y,z};
