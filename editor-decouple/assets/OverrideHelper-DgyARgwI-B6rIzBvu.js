import{q as v,ad as b}from"./main-BMu2VIyp.js";import{x as M}from"./colorUtils-Eg6lOlXm-Bg_RjTzN.js";import{o as C}from"./FieldsIndex-Bt0Y8aWr-FTbdyAwC.js";import{$ as I}from"./ArcadeExpression-XjY3x7KV-BqeMzjrj.js";import{S as x,L as d,w as S,p as k,Z as O,Q as h,b as N}from"./utils-BfXZnjCE-aoQ8RUY1.js";import P from"./callExpressionWithFeature-Bk8k1lJI-DftGvrGa.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./vec4f64-DD-nkcCV-CSNWKRqG.js";import"./UnknownTimeZone-DxjyzFvs-B3IMgeHl.js";import"./timeZoneUtils-d5p0Jda1-CWZRmNST.js";import"./TimeOnly-CGkId3bj-BNV8KuEc.js";import"./enum-g1DWyQyu-DaLd00GK.js";import"./defaultCIMValues-BcSaJjm--58G-soMN.js";import"./enums-a_LDTPYU-CBIcy3mM.js";import"./quantizationUtils-D907S7Bm-De8_bi42.js";const T=m=>{if(!m)return[0,0,0,0];const{r:e,g:r,b:i,a:o}=m;return[e,r,i,255*o]};class t{static findApplicableOverrides(e,r,i){if(e&&r){if(e.primitiveName){let o=!1;for(const s of i)if(s.primitiveName===e.primitiveName){o=!0;break}if(!o)for(const s of r)s.primitiveName===e.primitiveName&&i.push(s)}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const o of e.effects)t.findApplicableOverrides(o,r,i);if(e.symbolLayers)for(const o of e.symbolLayers)t.findApplicableOverrides(o,r,i);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMPictureStroke":case"CIMGradientStroke":case"CIMSolidFill":case"CIMPictureFill":case"CIMHatchFill":case"CIMGradientFill":case"CIMVectorMarker":case"CIMCharacterMarker":case"CIMPictureMarker":if(e.effects)for(const o of e.effects)t.findApplicableOverrides(o,r,i);if(e.markerPlacement&&t.findApplicableOverrides(e.markerPlacement,r,i),e.type==="CIMVectorMarker"){if(e.markerGraphics)for(const o of e.markerGraphics)t.findApplicableOverrides(o,r,i),t.findApplicableOverrides(o.symbol,r,i)}else e.type==="CIMCharacterMarker"?t.findApplicableOverrides(e.symbol,r,i):e.type==="CIMHatchFill"?t.findApplicableOverrides(e.lineSymbol,r,i):e.type==="CIMPictureMarker"&&t.findApplicableOverrides(e.animatedSymbolProperties,r,i)}}}static findEffectOverrides(e,r){if(!e)return null;if(e.type==="CIMGeometricEffectDashes"&&x(e),!r||!e.primitiveName)return{type:"cim-effect-param",effect:e,overrides:[]};const i=d(e),o=e.primitiveName,s=[];for(const a of r)a.primitiveName===o&&s.push(d(a));return{type:"cim-effect-param",effect:i,overrides:S(s)}}static async resolveSymbolOverrides(e,r,i,o,s,a,c){if(!e?.symbol)return null;let{symbol:p,primitiveOverrides:l}=e;const f=!!l;if(!f&&!o)return p;p=v(p),l=v(l);let y=!0;if(r||(r={attributes:{}},y=!1),f){if(y||(l=l.filter(n=>!n.valueExpressionInfo?.expression.includes("$feature"))),c||(l=l.filter(n=>!n.valueExpressionInfo?.expression.includes("$view"))),l.length>0){const n=k(r.attributes),u={spatialReference:i,fields:n,geometryType:s};await t.createRenderExpressions(l,u),t.evaluateOverrides(l,r,s??"esriGeometryPoint",a,c,new C(n))}t.applyOverrides(p,l)}return o&&t.applyDictionaryTextOverrides(p,r,o,null),p}static{this._expressionToRenderExpression=new Map}static async createRenderExpressions(e,r){const i=[];for(const o of e){const s=o.valueExpressionInfo;if(!s||t._expressionToRenderExpression.has(s.expression))continue;const a=I(s.expression,r.spatialReference);i.push(a),a.then(c=>t._expressionToRenderExpression.set(s.expression,c))}i.length>0&&await Promise.all(i)}static evaluateOverrides(e,r,i,o,s,a){const c={$view:{scale:s?.scale}};for(const p of e){p.value&&typeof p.value=="object"&&M(p.value)&&(p.propertyName==="Color"||p.propertyName==="StrokeColor")&&(p.value=T(p.value));const l=p.valueExpressionInfo;if(!l)continue;const f=t._expressionToRenderExpression.get(l.expression);f&&(p.value=P(f,r,c,i,a,o))}}static applyDictionaryTextOverrides(e,r,i,o,s="Normal"){if(e?.type)switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":case"CIMTextSymbol":{const a=e.symbolLayers;if(!a)return;for(const c of a)c&&c.type==="CIMVectorMarker"&&t.applyDictionaryTextOverrides(c,r,i,o,e.type==="CIMTextSymbol"?e.textCase:s)}break;case"CIMVectorMarker":{const a=e.markerGraphics;if(!a)return;for(const c of a)c&&t.applyDictionaryTextOverrides(c,r,i,o)}break;case"CIMMarkerGraphic":{const a=e.textString;if(a&&a.includes("[")){const c=O(a,i);e.textString=h(r,c,o,s)}}}}static applyOverrides(e,r,i,o){if(e.primitiveName){for(const s of r)if(s.primitiveName===e.primitiveName){const a=N(s.propertyName);if(o&&o.push({cim:e,nocapPropertyName:a,value:e[a]}),i){let c=!1;for(const p of i)p.primitiveName===e.primitiveName&&(c=!0);c||i.push(s)}s.value!=null&&(e[a]=s.value)}}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const s of e.effects)t.applyOverrides(s,r,i,o);if(e.symbolLayers)for(const s of e.symbolLayers)t.applyOverrides(s,r,i,o);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMSolidFill":case"CIMVectorMarker":if(e.effects)for(const s of e.effects)t.applyOverrides(s,r,i,o);if(e.type==="CIMVectorMarker"&&e.markerGraphics)for(const s of e.markerGraphics)t.applyOverrides(s,r,i,o),t.applyOverrides(s.symbol,r,i,o)}}static restoreOverrides(e){for(const r of e)r.cim[r.nocapPropertyName]=r.value}static buildOverrideKey(e){let r="";for(const i of e)i.value!==void 0&&(r+=`${i.primitiveName}${i.propertyName}${JSON.stringify(i.value)}`);return r}static toValue(e,r){if(e==="DashTemplate")return r.split(" ").map(i=>Number(i));if(e==="Color"){const i=new b(r).toRgba();return i[3]*=255,i}return r}}export{t as OverrideHelper};
