import{gJ as j,b9 as B,lx as C,aJ as L}from"./main-D6SnduPa.js";function G(n,r,o,e){if(n.type==="point")return n.x+=r,n.y+=o,n.hasZ&&e!=null,n;if(n.type==="multipoint"){const i=n.points;for(let x=0;x<i.length;x++)i[x]=D(i[x],r,o,e);return n}if(n.type==="extent")return n.xmin+=r,n.xmax+=r,n.ymin+=o,n.ymax+=o,n;const m=j(n),t=n.type==="polyline"?n.paths:n.rings;for(let i=0;i<m.length;i++){const x=m[i];for(let s=0;s<x.length;s++)x[s]=D(x[s],r,o,e)}return"paths"in n?n.paths=t:n.rings=t,n}function Z(n,r,o,e,m){const t=n.clone(),i=e.resolution;if(t.type==="point"){if(m)G(t,r*i,-o*i);else{const x=e.state.transform,s=e.state.inverseTransform,y=x[0]*t.x+x[2]*t.y+x[4],f=x[1]*t.x+x[3]*t.y+x[5];t.x=s[0]*(y+r)+s[2]*(f+o)+s[4],t.y=s[1]*(y+r)+s[3]*(f+o)+s[5]}return t}if(t.type==="multipoint"){if(m)G(t,r*i,-o*i);else{const x=t.points,s=e.state.transform,y=e.state.inverseTransform;for(let f=0;f<x.length;f++){const u=x[f],p=s[0]*u[0]+s[2]*u[1]+s[4],v=s[1]*u[0]+s[3]*u[1]+s[5],c=y[0]*(p+r)+y[2]*(v+o)+y[4],a=y[1]*(p+r)+y[3]*(v+o)+y[5];x[f]=J(u,c,a)}}return t}if(t.type==="extent"){if(m)G(t,r*i,-o*i);else{const x=e.state.transform,s=e.state.inverseTransform,y=x[0]*t.xmin+x[2]*t.ymin+x[4],f=x[1]*t.xmin+x[3]*t.ymin+x[5],u=x[0]*t.xmax+x[2]*t.ymax+x[4],p=x[1]*t.xmax+x[3]*t.ymax+x[5];t.xmin=s[0]*(y+r)+s[2]*(f+o)+s[4],t.ymin=s[1]*(y+r)+s[3]*(f+o)+s[5],t.xmax=s[0]*(u+r)+s[2]*(p+o)+s[4],t.ymax=s[1]*(u+r)+s[3]*(p+o)+s[5]}return t}if(m)G(t,r*i,-o*i);else{const x=j(t),s=t.type==="polyline"?t.paths:t.rings,y=e.state.transform,f=e.state.inverseTransform;for(let u=0;u<x.length;u++){const p=x[u];for(let v=0;v<p.length;v++){const c=p[v],a=y[0]*c[0]+y[2]*c[1]+y[4],h=y[1]*c[0]+y[3]*c[1]+y[5],M=f[0]*(a+r)+f[2]*(h+o)+f[4],g=f[1]*(a+r)+f[3]*(h+o)+f[5];p[v]=J(c,M,g)}}"paths"in t?t.paths=s:t.rings=s}return t}function z(n,r,o,e){if(n.type==="point"){const{x:c,y:a}=n,h=e?e[0]:c,M=e?e[1]:a,g=n.clone(),T=(c-h)*r+h,l=(a-M)*o+M;return g.x=T,g.y=l,g}if(n.type==="multipoint"){const c=j(n),a=B(),[h,M,g,T]=C(a,[c]),l=e?e[0]:(h+g)/2,q=e?e[1]:(T+M)/2,d=n.clone(),k=d.points;for(let b=0;b<k.length;b++){const w=k[b],[E,F]=w,I=(E-l)*r+l,K=(F-q)*o+q;k[b]=J(w,I,K)}return d}if(n.type==="extent"){const{xmin:c,xmax:a,ymin:h,ymax:M}=n,g=e?e[0]:(c+a)/2,T=e?e[1]:(M+h)/2,l=n.clone();if(l.xmin=(c-g)*r+g,l.ymax=(M-T)*o+T,l.xmax=(a-g)*r+g,l.ymin=(h-T)*o+T,l.xmin>l.xmax){const q=l.xmin,d=l.xmax;l.xmin=d,l.xmax=q}if(l.ymin>l.ymax){const q=l.ymin,d=l.ymax;l.ymin=d,l.ymax=q}return l}const m=j(n),t=B(),[i,x,s,y]=C(t,m),f=e?e[0]:(i+s)/2,u=e?e[1]:(y+x)/2,p=n.clone(),v=p.type==="polyline"?p.paths:p.rings;for(let c=0;c<m.length;c++){const a=m[c];for(let h=0;h<a.length;h++){const M=a[h],[g,T]=M,l=(g-f)*r+f,q=(T-u)*o+u;v[c][h]=J(M,l,q)}}return"paths"in p?p.paths=v:p.rings=v,p}function A(n,r,o,e,m,t){const i=Math.sqrt((o-n)*(o-n)+(e-r)*(e-r));return Math.sqrt((m-n)*(m-n)+(t-r)*(t-r))/i}function H(n,r,o,e=!1){const m=Math.atan2(r.y-o.y,r.x-o.x)-Math.atan2(n.y-o.y,n.x-o.x),t=Math.atan2(Math.sin(m),Math.cos(m));return e?t:L(t)}function D(n,r,o,e){return J(n,n[0]+r,n[1]+o,n[2]!=null&&e!=null?n[2]+e:void 0)}function J(n,r,o,e){const m=[r,o];return n.length>2&&m.push(n[2]),n.length>3&&m.push(n[3]),m}export{Z as J,z as K,A as L,H as N};
