import{ac as L,ay as V,a6 as O,dd as z,v as s,S as l,n as B}from"./main-D3-gbOxE.js";import{B as X}from"./vec32-Cj8pVsU0-PFJV2443.js";import{U as E,O as G}from"./projectionUtils-B-CplN3q-DAeC_B7K.js";import{l as D}from"./normalizeUtils-u00NGW3M-DiW1XfhW.js";import{f as W}from"./scaleUtils-Br-smv3A-Bf6j0O7c.js";import{L as q,U as H,j as I}from"./gridUtils-ZkKc2j-y-CeA3CbIE.js";import{a9 as d,d as J,X as Y,aa as T,V as _}from"./SketchViewModel-B0qFHK0t-B9QA4s-r.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./normalizeUtilsCommon-ClagynAA-B6CYkAJG.js";import"./utils-BO8hgPs3-WvLpUqDT.js";import"./utils-DpLVEUvg-DiaGCaSa.js";import"./geodesicUtils-DKS2UG72-CsMqTWaw.js";import"./UpdatingHandles-Bd2FQ26N-BPH6YHYQ.js";import"./GraphicsLayer-BiEC2-gS-D0h0ZdRl.js";import"./GraphicsCollection-uWAVmks7-zVQe540T.js";import"./Layer-DvVVmz9x-CEiN-kVe.js";import"./TimeExtent-Cf2Pienb-BKLOg1Op.js";import"./BlendLayer-DjW_5k0v-B8jhZGy_.js";import"./layerContainerType-ChWdCT09-G5sdAsSy.js";import"./jsonUtils-BwLwuQj7-usaEhsfg.js";import"./parser-CWccHtwJ-O0EYpf8h.js";import"./mat4f32-BdRMyjXW-CWt6U0BP.js";import"./mat4-OOmHNWi7-Bcqfbc2Y.js";import"./ScaleRangeLayer-x42fwED3-6_lRwMJ8.js";import"./ElevationInfo-DE5to86a-DayrA1uz.js";import"./lengthUtils-C61nRlXw-BFxKvwO-.js";import"./elevationInfoUtils-Ccn2Wfoe-CMUkK7Ku.js";import"./editableLayers-DFUBlMJy-CwRaVQjZ.js";import"./utils-Dd8gTonD-DgfhbqxE.js";import"./Queue-DV3gpSdl-CNwhN3E0.js";import"./Version-CnwD6MZa-DwOh1HKi.js";import"./Cyclical-DgD7_U1C-D3NKgCVZ.js";import"./quantityUtils-B1Ov7DZK-9iSAiFg5.js";import"./vec2-BnynUbeJ-CKtGJQAy.js";import"./vec2f64-CkowXrDb-3zFQ3LNH.js";import"./projectVectorToVector-DcyiGOWJ-vN31n8cU.js";import"./projectPointToVector-BZJhoF_5-DzZKDvsq.js";import"./asyncUtils-BPUlNCrX-BDxH7hVX.js";import"./Query-n1aoaaFC-ps3j0Hd2.js";import"./Field-BIQ-quF4-CiDPEpgV.js";import"./fieldType-PhcL4ff8-DSzlTy5g.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./vec4f64-DD-nkcCV-CSNWKRqG.js";import"./plane-Cf3Koz3c-ediSXUgq.js";import"./vectorStacks-5ZZtmT9E-B4zlP9lx.js";import"./mat3f64-BnNZDR5l-Bz3OL2oI.js";import"./mat4f64-xsZDPPj0-Dq35B4BL.js";import"./quatf64-C16JxGFv-BKWK1F8U.js";import"./sphere-zPMQWhGG-CIBGaddn.js";import"./mat3-DOnW3DjW-C3hbW9XY.js";import"./geodeticLengthOperator-DHGBHzf3-BqO9zu6F.js";import"./geodeticCurveType-D_etKnbP-CirnHLSB.js";import"./earcut-C6NeZYSh-Da0ULCQ5.js";import"./triangle-BM89wdHY-D8Yfy3FT.js";import"./lineSegment-BAWQVP9P-Bi9WkYOE.js";import"./spatialReferenceEllipsoidUtils-BK0OQJn2-Bb-QFp7w.js";let o=class extends L{constructor(t){super(t),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){return this.grid?.rotateWithMap?0:V(this.view.rotation??0)}get gridRotation(){return V(this.grid?.rotation??0)}get gridCenter(){const{spatialReference:t,grid:r}=this;if(!r||!t||!E(r.center.spatialReference,t))return null;try{const e=G(r.center,t),i=t.isWrappable&&this.view?.center!=null?D(e.x,this.view.center.x,t):e.x;return d(i,e.y,e.z)}catch(e){return O.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",e),null}}get offsetScaleFactor(){const{pixelsPerStride:t,grid:r}=this;if(!r||!t)return 1;const{majorLineInterval:e,dynamicScaling:i}=r;return e<1?null:q(e,t,i)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:t}=this;return t?z(t.spacing,t.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:t}=this;return t==null?null:t*W(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:t}=this.view;return this.gridCenter?H(this.gridCenter[0],this.gridCenter[1],t):null}get pixelsPerStride(){const{gridMetersPerStride:t,viewMetersPerPixel:r}=this;return r&&t?t/r:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(t,r,e){const{options:i,view:n}=this;if(!i?.effectiveGridEnabled||!n.grid||e.feature?.attributes&&J in e.feature.attributes)return[];const p=e.coordinateHelper.arrayToPoint(t),a=i.distance*(e.pointer==="touch"?i.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(p,a)}fetchCandidatesSync(t,r){const e=[],{grid:i,effectiveViewRotation:n,gridRotation:p,gridCenter:a,viewMetersPerPixel:f,viewMetersPerSRUnit:m,offsetScaleFactor:S,spatialReference:g,gridMetersPerStride:C,pixelsPerStride:U}=this;if(!(i&&f&&m&&a&&g&&S&&C&&U)||!i.dynamicScaling&&U<I||!E(t.spatialReference,g))return e;const w=G(t,g),$=d(w.x,w.y,w.z),u=h($,-p,a,-n),P=C/m*S,c=k(u,P,a),{shouldSnapX:v,shouldSnapY:y}=A(c,u,r,f,m);if(!v&&!y)return[];const j=d((v?c:u)[0],(y?c:u)[1]),M=h(j,p,a,n),b=h(c,p,a,n);if(y){const R=F(c,u,P,"y"),x=h(R,p,a,n);e.push(new Y({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}if(v){const R=F(c,u,P,"x"),x=h(R,p,a,n);e.push(new Y({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}return v&&y&&e.push(new T(M,e[0],e[1],!1)),e}};s([l({constructOnly:!0})],o.prototype,"view",void 0),s([l()],o.prototype,"options",void 0),s([l()],o.prototype,"grid",null),s([l()],o.prototype,"effectiveViewRotation",null),s([l()],o.prototype,"gridRotation",null),s([l()],o.prototype,"gridCenter",null),s([l()],o.prototype,"offsetScaleFactor",null),s([l()],o.prototype,"spatialReference",null),s([l()],o.prototype,"gridMetersPerStride",null),s([l()],o.prototype,"viewMetersPerPixel",null),s([l()],o.prototype,"viewMetersPerSRUnit",null),s([l()],o.prototype,"pixelsPerStride",null),s([l()],o.prototype,"updating",null),o=s([B("esri.views.interactive.snapping.GridSnappingEngine")],o);const h=(t,r,e,i)=>{const n=_(t[0],t[1],t[2]);return X(n,X(n,n,e,r),e,i)},k=(t,r,e)=>{const i=(t[0]-e[0])/r,n=(t[1]-e[1])/r,p=Math.trunc(i),a=Math.trunc(n),f=Math.round(i%1),m=Math.round(n%1),S=e[0]+(p+f)*r,g=e[1]+(a+m)*r;return d(S,g)},A=(t,r,e,i,n)=>{if(i<=0)return{shouldSnapX:!1,shouldSnapY:!1};const p=(t[0]-r[0])/i,a=(t[1]-r[1])/i;return{shouldSnapX:Math.abs(p*n)<e,shouldSnapY:Math.abs(a*n)<e}},F=(t,r,e,i)=>{if(i==="y"){const p=r[0]>t[0]?1:-1;return d(t[0]+e*p,t[1])}const n=r[1]>t[1]?1:-1;return d(t[0],t[1]+e*n)};export{o as GridSnappingEngine};
